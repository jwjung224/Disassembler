00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/12/2016 7:35:01 PM

00000000                             1  *-----------------------------------------------------------------------------
00000000                             2  * Title      : Disassembler Project 
00000000                             3  * Written by : Team JKR: Joon Jung, Kevin Tan, Ryu Muthui 
00000000                             4  * Date       : Start Date 02/13/2016 - End Data 03/13/2016
00000000                             5  * Description: CSS422: Computer Hardware and Organization - Final Project
00000000                             6  *-----------------------------------------------------------------------------
00000000                             7  * Main entry into the program.
00000000                             8  * Below are the list of instructions and addressing modes assigned for this project. 
00000000                             9  * 
00000000                            10  * Effective Addressing Modes:
00000000                            11  * Data Register Direct
00000000                            12  * Address Register Direct
00000000                            13  * Address Register Indirect
00000000                            14  * Immediate Data
00000000                            15  * Address Register Indirect with Post incrementing
00000000                            16  * Address Register Indirect with Pre decrementing
00000000                            17  * Absolute Long Address
00000000                            18  * Absolute Word Address
00000000                            19  *
00000000                            20  * Instructions:
00000000                            21  * NOP
00000000                            22  * MOVE
00000000                            23  * MOVEQ
00000000                            24  * MOVEM
00000000                            25  * ADD
00000000                            26  * ADDA
00000000                            27  * ADDI
00000000                            28  * SUB
00000000                            29  * MULS
00000000                            30  * DIVU
00000000                            31  * LEA
00000000                            32  * CLR
00000000                            33  * AND
00000000                            34  * LSL
00000000                            35  * ASR
00000000                            36  * ROL
00000000                            37  * CMP
00000000                            38  * Bcc (BCC, BGT, BLE)
00000000                            39  * JSR
00000000                            40  * RTS
00000000                            41  * Additonal added by us:
00000000                            42  * STOP
00000000                            43  * SUBI
00000000                            44  * ASL
00000000                            45  * LSR
00000000                            46  * ROR
00000000                            47  *----------------------------------------------------------------------------- 
00001000                            48  START:  ORG $1000   First line of source code
00001000                            49      INCLUDE         'JKR_STARTING_LOGIC_W16.X68'
00001000                            50  INTRO
00001000  4EB9 000015F4             51      JSR     CLEAR_NEXT_LINE
00001006  4EB9 00003C1E             52      JSR     CLR_ALL                 Clear All data/addr reg for new session
0000100C  4EB9 00003B1C             53      JSR     INITIALIZE_VARIABLES    Initialize all variables.
00001012  13FC 0000 00006020        54      MOVE.B  #0, PRINT_COUNTER       Set print counter var to 0.
0000101A  43F9 00003DC6             55      LEA     MSG_WELCOME, A1         Load and display welcome message
00001020  103C 000E                 56      MOVE.B  #14,D0                  |
00001024  4E4F                      57      TRAP    #15                     V
00001026                            58  START_ADDR_PROMPT
00001026  43F9 00003D8C             59      LEA     STARTADDRESS_PROMPT,A1  Prompt for Start Address
0000102C  103C 000E                 60      MOVE.B  #14,D0                  |
00001030  4E4F                      61      TRAP    #15                     V
00001032  43F9 00006000             62      LEA     START_ADDRESS, A1       Store input value at start addr of program
00001038  103C 0002                 63      MOVE.B  #2,D0                   Read string from keyboard and store at (A1)
0000103C  4E4F                      64      TRAP    #15                     Length of string is stored into D1.L
0000103E  4EB9 000011DE             65      JSR     CHECK_LEN_S             Check input length of addr (MAX 8 chars) 
00001044  7600                      66      MOVE.L  #0,D3                   D3 is the counter variable, D1 is terminal
00001046                            67  FOR_LOOP_START
00001046  B203                      68      CMP.B   D3,D1                   CMP.B with counter and terminal values
00001048  6700 0044                 69      BEQ     STORE_STR_ADDRESS       IF all chars verified, then store start addr
0000104C  4EB9 000010D0             70      JSR     ASCII_TO_HEX_S          ELSE continue to check chars
00001052  5283                      71      ADDQ.L  #1,D3                   Counter++; D3 is the counter variable
00001054  60F0                      72      BRA     FOR_LOOP_START          Loop back to start of loop
00001056                            73  END_ADDR_PROMPT
00001056  4EB9 000011FA             74      JSR     CLR_DATAREG             Clear data registers
0000105C  43F9 00003DAA             75      LEA     ENDADDRESS_PROMPT, A1   Prompt for End Address
00001062  103C 000E                 76      MOVE.B  #14,D0                  |
00001066  4E4F                      77      TRAP    #15                     V
00001068  43F9 00006010             78      LEA     END_ADDRESS, A1         Store input value at end addr of program
0000106E  103C 0002                 79      MOVE.B  #2,D0                   Read string from keyboard and store at (A1)
00001072  4E4F                      80      TRAP    #15                     Length of string is stored into D1.L
00001074  1411                      81      MOVE.B  (A1),D2                 We Move input byte value from A1 to D2
00001076  4EB9 000011EC             82      JSR     CHECK_LEN_E             Check input length of addr (MAX 8 chars) 
0000107C  7600                      83      MOVE.L  #0,D3                   D3 is the counter variable, D1 is terminal
0000107E                            84  FOR_LOOP_END
0000107E  B203                      85      CMP.B   D3,D1                   CMP.B with counter and terminal values
00001080  6700 0018                 86      BEQ     STORE_END_ADDRESS       IF all chars verified, then store end addr
00001084  4EB9 000010DE             87      JSR     ASCII_TO_HEX_E          ELSE continue to check chars
0000108A  5283                      88      ADDQ.L  #1,D3                   Counter++; D3 is the counter variable
0000108C  60F0                      89      BRA     FOR_LOOP_END            Loop back to start of loop
0000108E                            90  STORE_STR_ADDRESS
0000108E  4EB9 00001206             91      JSR     CHECK_ODD_ADDR          Check if addr is ODD to prevent crash  
00001094  2A44                      92      MOVEA.L D4, A5                  A5 holds STARTING ADDRESS
00001096  4EF8 1056                 93      JMP     END_ADDR_PROMPT         
0000109A                            94  STORE_END_ADDRESS              
0000109A  2C44                      95      MOVEA.L D4, A6                  A6 holds ENDING ADDRESS
0000109C  4EF9 000010A2             96      JMP     CHECK_ADDRESS_VALUE
000010A2                            97  CHECK_ADDRESS_VALUE
000010A2  BDCD                      98      CMPA.L  A5, A6                  IF ENDING addr is GT STARTING addr
000010A4  6F00 0008                 99      BLE     DISPLAY_INVALID_ADDRESS Goto invalid addr logic
000010A8  4EF9 00001210            100      JMP     DECIPHER                ELSE begin decoding
000010AE                           101  DISPLAY_INVALID_ADDRESS
000010AE  43F9 00003E55            102      LEA     MSG_INVALID_ADDRESS, A1 Load and display invalid message
000010B4  103C 000E                103      MOVE.B  #14,D0                  |
000010B8  4E4F                     104      TRAP    #15                     |
000010BA  4EB9 000011FA            105      JSR     CLR_DATAREG             Clear data/addr registers
000010C0  2A7C 00000000            106      MOVEA.L #0, A5                  |
000010C6  2C7C 00000000            107      MOVEA.L #0, A6                  V
000010CC  4EF8 1026                108      JMP     START_ADDR_PROMPT       Branch to start of program
000010D0                           109  ASCII_TO_HEX_S
000010D0  1419                     110      MOVE.B  (A1)+,D2                MOVE byte value from A1 to D2
000010D2  4EB9 000010EC            111      JSR     CHECK_NUM_S             Run through conversion logic
000010D8  E98C                     112      LSL.L   #4,D4                   Left shift 4 bits, D4 holds converted value
000010DA  B504                     113      EOR.B   D2,D4                   Exclusive OR D2, into D4
000010DC  4E75                     114      RTS 
000010DE                           115  ASCII_TO_HEX_E
000010DE  1419                     116      MOVE.B  (A1)+,D2                MOVE byte value from A1 to D2
000010E0  4EB9 0000112E            117      JSR     CHECK_NUM_E             Run through conversion logic
000010E6  E98C                     118      LSL.L   #4,D4                   Left shift 4 bits, D4 holds converted value
000010E8  B504                     119      EOR.B   D2,D4                   Exclusive OR D2, into D4
000010EA  4E75                     120      RTS
000010EC                           121  CHECK_NUM_S
000010EC  0C02 0030                122      CMPI.B  #$30, D2                IF LT $30 (ASCII value '0')
000010F0  6D00 00AA                123      BLT     INVALID_S               Goto INVALID
000010F4  0C02 0039                124      CMPI.B  #$39, D2                ELSE CMPI to $39
000010F8  6E00 0008                125      BGT     CHECK_UCHAR_S           IF GT $39, goto CHECK_UCHAR_START
000010FC  0402 0030                126      SUB.B   #$30, D2                ELSE SUB $30 convert to Hex and store at D2
00001100  4E75                     127      RTS
00001102                           128  
00001102                           129  CHECK_UCHAR_S
00001102  0C02 0041                130      CMPI.B  #$41, D2                IF LT $41 (ASCII value 'A'),
00001106  6D00 0094                131      BLT     INVALID_S               Goto INVALID_START
0000110A  0C02 0046                132      CMPI.B  #$46, D2                ELSE CMPI to $46
0000110E  6E00 0008                133      BGT     CHECK_LCHAR_S           IF GT $46 (ASCII value 'F'), goto CHECK_LCHAR_START
00001112  0402 0037                134      SUB.B   #$37, D2                ELSE SUB $37 to convert to upper case at D2
00001116  4E75                     135      RTS                             
00001118                           136      
00001118                           137  CHECK_LCHAR_S
00001118  0C02 0061                138      CMPI.B  #$61, D2                IF LT $61 (ASCII value 'a')
0000111C  6D00 007E                139      BLT     INVALID_S               Goto INVALID_START
00001120  0C02 0066                140      CMPI.B  #$66, D2                ELSE CMPI to $66, goto CHECK_UCHAR_START
00001124  6E00 0076                141      BGT     INVALID_S               IF GT $66 (ASCII value 'f') go to INVALID
00001128  0402 0057                142      SUB.B   #$57, D2                ELSE SUB $57 to convert to lower case at D2
0000112C  4E75                     143      RTS
0000112E                           144      
0000112E                           145  CHECK_NUM_E
0000112E  0C02 0030                146      CMPI.B  #$30, D2                IF LT $30 (ASCII value '0')
00001132  6D00 0094                147      BLT     INVALID_E               Goto INVALID
00001136  0C02 0039                148      CMPI.B  #$39, D2                ELSE CMPI to $39
0000113A  6E00 0008                149      BGT     CHECK_UCHAR_E           IF GT $39, goto CHECK_UCHAR_END
0000113E  0402 0030                150      SUB.B   #$30, D2                ELSE SUB $30 convert to Hex and store at D2
00001142  4E75                     151      RTS
00001144                           152  
00001144                           153  CHECK_UCHAR_E
00001144  0C02 0041                154      CMPI.B  #$41, D2                IF LT $41 (ASCII value 'A'),
00001148  6D00 007E                155      BLT     INVALID_E               Goto INVALID_END
0000114C  0C02 0046                156      CMPI.B  #$46, D2                ELSE CMPI to $46
00001150  6E00 0008                157      BGT     CHECK_LCHAR_E           IF GT $46 (ASCII value 'F'), goto CHECK_LCHAR_END
00001154  0402 0037                158      SUB.B   #$37, D2                ELSE SUB $37 to convert to upper case at D2
00001158  4E75                     159      RTS  
0000115A                           160      
0000115A                           161  CHECK_LCHAR_E
0000115A  0C02 0061                162      CMPI.B  #$61, D2                IF LT $61 (ASCII value 'a')
0000115E  6D00 0068                163      BLT     INVALID_E               Goto INVALID_START
00001162  0C02 0066                164      CMPI.B  #$66, D2                ELSE CMPI to $66, goto CHECK_UCHAR_END
00001166  6E00 0060                165      BGT     INVALID_E               IF GT $66 (ASCII value 'f') go to INVALID
0000116A  0402 0057                166      SUB.B   #$57, D2                ELSE SUB $57 to convert to lower case at D2
0000116E  4E75                     167      RTS
00001170                           168  
00001170                           169  INVALID_ODD_ADDR
00001170  43F9 00003E9A            170      LEA     MSG_INVALID_ODDADDR, A1 Load and display invalid odd addr message
00001176  103C 000E                171      MOVE.B  #14, D0                 |
0000117A  4E4F                     172      TRAP    #15                     |
0000117C  4EB9 000011FA            173      JSR     CLR_DATAREG             V
00001182  4EF8 1026                174      JMP     START_ADDR_PROMPT       Return to START_ADDR_PROMPT
00001186                           175      
00001186                           176  INVALID_LEN_S
00001186  43F9 00003E12            177      LEA     MSG_INVALID_LENGTH, A1  Load and display invalid length message
0000118C  103C 000D                178      MOVE.B  #13, D0                 |
00001190  4E4F                     179      TRAP    #15                     |
00001192  4EB9 000011FA            180      JSR     CLR_DATAREG             V
00001198  4EF8 1026                181      JMP     START_ADDR_PROMPT       Return to START_ADDR_PROMPT
0000119C                           182  
0000119C                           183  INVALID_S
0000119C  43F9 00003DE6            184      LEA     MSG_INVALID_ENTRY, A1   Load and display invalid length message
000011A2  103C 000D                185      MOVE.B  #13, D0                 |
000011A6  4E4F                     186      TRAP    #15                     |
000011A8  4EB9 000011FA            187      JSR     CLR_DATAREG             V
000011AE  4EF8 1026                188      JMP     START_ADDR_PROMPT       Return to START_ADDR_PROMPT    
000011B2                           189      
000011B2                           190  INVALID_LEN_E
000011B2  43F9 00003E12            191      LEA     MSG_INVALID_LENGTH, A1  Load and display invalid length message
000011B8  103C 000D                192      MOVE.B  #13, D0                 |
000011BC  4E4F                     193      TRAP    #15                     |
000011BE  4EB9 000011FA            194      JSR     CLR_DATAREG             V
000011C4  6000 FE90                195      BRA     END_ADDR_PROMPT         Return to END_ADDR_PROMPT
000011C8                           196  
000011C8                           197  INVALID_E
000011C8  43F9 00003DE6            198      LEA     MSG_INVALID_ENTRY, A1   Load and display invalid length message
000011CE  103C 000D                199      MOVE.B  #13, D0                 |
000011D2  4E4F                     200      TRAP    #15                     |
000011D4  4EB9 000011FA            201      JSR     CLR_DATAREG             V
000011DA  4EF8 1056                202      JMP     END_ADDR_PROMPT         Return to END_ADDR_PROMPT  
000011DE                           203  
000011DE                           204  CHECK_LEN_S 
000011DE  B23C 0008                205      CMP.B   #$8, D1                 IF string length is GT 8
000011E2  6EA2                     206      BGT     INVALID_LEN_S           Goto INVALID_LEN_START
000011E4  B23C 0000                207      CMP.B   #$0, D1                 ELSE CMP length of string with 0
000011E8  6F9C                     208      BLE     INVALID_LEN_S           IF string length is LT 0, Goto INVALID_LEN_S
000011EA  4E75                     209      RTS
000011EC                           210      
000011EC                           211  CHECK_LEN_E 
000011EC  B23C 0008                212      CMP.B   #$8, D1                 IF string length is GT 8
000011F0  6EC0                     213      BGT     INVALID_LEN_E           Goto INVALID_LEN_END
000011F2  B23C 0000                214      CMP.B   #$0, D1                 ELSE CMP length of string with 0
000011F6  6FBA                     215      BLE     INVALID_LEN_E           IF string length is LT 0, Goto INVALID_LEN_E
000011F8  4E75                     216      RTS
000011FA                           217      
000011FA                           218  CLR_DATAREG                         *Subroutine to clear data registers
000011FA  4280                     219      CLR.L   D0                      |
000011FC  4281                     220      CLR.L   D1                      |
000011FE  4282                     221      CLR.L   D2                      |
00001200  4283                     222      CLR.L   D3                      |
00001202  4284                     223      CLR.L   D4                      V
00001204  4E75                     224      RTS                             RTS
00001206                           225  CHECK_ODD_ADDR
00001206  1604                     226      MOVE.B  D4, D3                  Get a byte value from the addr
00001208  E20B                     227      LSR.B   #1, D3                  Right shift 1 bit to force carry bit flag
0000120A  6500 FF64                228      BCS     INVALID_ODD_ADDR        IF carry bit is 1, it is odd
0000120E  4E75                     229      RTS
00001210                           230  
00001210                           231  -------------------- end include --------------------
00001210                           232      INCLUDE         'JKR_DECIPHER_LOGIC_W16.X68'
00001210                           233  DECIPHER
00001210  43F9 00003ECC            234      LEA     MSG_DECODE, A1
00001216  103C 000E                235      MOVE.B  #14,D0
0000121A  4E4F                     236      TRAP    #15
0000121C  41F9 00001296            237      LEA     JMP_TABLE, A0               Load jump table addr into A0
00001222                           238      
00001222                           239  PRINT_LOGIC
00001222  4EB9 00003B1C            240      JSR     INITIALIZE_VARIABLES        Reset all variables
00001228  4EB9 00003C0E            241      JSR     CLR_DATAREG_D6              Clear all Data Reg up to D6
0000122E  5239 00006020            242      ADDI.B  #1, (PRINT_COUNTER)         Increment print counter by one
00001234  0C39 001E 00006020       243      CMP.B   #30,(PRINT_COUNTER)         Is printcount less than 30
0000123C  6E00 000E                244      BGT     PRESS_ENTER                 IF GT 30, go to prompt to press enter
00001240  0C39 001E 00006020       245      CMP.B   #30, (PRINT_COUNTER)        Is printcount less than 30
00001248  6600 001E                246      BNE     JMP_LOOP                    IF NE, go to JUMP table loop
0000124C                           247      
0000124C                           248  PRESS_ENTER                             *Print pause after printing 30 lines
0000124C  13FC 0000 00006020       249      MOVE.B  #0, (PRINT_COUNTER)         Set print count to 0
00001254  43F9 00003F68            250      LEA     PRESS_ENTER_PROMPT, A1      Display press enter prompt
0000125A  103C 000E                251      MOVE.B  #14, D0             
0000125E  4E4F                     252      TRAP    #15
00001260  103C 0004                253      MOVE.B  #4, D0                      Take the 'Enter' keyboard input
00001264  4E4F                     254      TRAP    #15
00001266  4241                     255      CLR     D1                          Discard user input
00001268                           256  
00001268                           257  JMP_LOOP
00001268  41F9 00001296            258      LEA     JMP_TABLE, A0               Load jump table addr into A0
0000126E  4280                     259      CLR.L   D0                          Clear D0 of size long   
00001270  BBCE                     260      CMPA.L  A6, A5                      Compare Start and End addr
00001272  6C00 2AB2                261      BGE     FINAL                       IF current addr is or greater than ending, end decoding
00001276  3E15                     262      MOVE.W  (A5),D7                     Store full opword into D7
00001278  4EB9 00001602            263      JSR     DISPLAY_ADDRESS             Display addr in memory
0000127E  301D                     264      MOVE.W  (A5)+, D0                   Store another opword into D0 for manipulation
00001280  123C 000C                265      MOVE.B  #SHIFT_12_BITS, D1          Shift 12 bits to right to isolate first 4 bits
00001284  E268                     266      LSR.W   D1, D0                      Move the bits
00001286  6000 29D2                267      BRA     CHECK_MODE
0000128A                           268      
0000128A                           269  SAFE
0000128A  C0FC 0006                270      MULU    #6, D0                      Multiply D0 by 6 to properly identify 4 most sig bits
0000128E  4EB0 0000                271      JSR     0(A0,D0)                    Indirect jump to proper index in jump table
00001292  BBCE                     272      CMPA.L  A6, A5                      Compare current address and End adress
00001294  6FD2                     273      BLE     JMP_LOOP                    IF Start addr less than End addr, reloop
00001296                           274  JMP_TABLE
00001296  4EF9 000012F6            275      JMP     MSB_0000                    *ADDI, ANDI, CMPI 
0000129C  4EF9 000012FC            276      JMP     MSB_0001                    *MOVE.B
000012A2  4EF9 00001302            277      JMP     MSB_0010                    *MOVE.L
000012A8  4EF9 00001308            278      JMP     MSB_0011                    *MOVE.W
000012AE  4EF9 0000130E            279      JMP     MSB_0100                    *CLR, MULS.L, DIVU.L, MOVEM, LEA, RTS, JSR, NOP, STOP
000012B4  4EF9 00001314            280      JMP     MSB_0101                    *NOT USED  
000012BA  4EF9 00001318            281      JMP     MSB_0110                    *BCC, BGT, BLE
000012C0  4EF9 0000131E            282      JMP     MSB_0111                    *MOVEQ.L
000012C6  4EF9 00001324            283      JMP     MSB_1000                    *DIVU.W
000012CC  4EF9 0000132A            284      JMP     MSB_1001                    *SUB, SUBA
000012D2  4EF9 00001330            285      JMP     MSB_1010                    *Unassigned  NOT USED    
000012D8  4EF9 00001336            286      JMP     MSB_1011                    *CMP
000012DE  4EF9 0000133C            287      JMP     MSB_1100                    *AND, MULS.W
000012E4  4EF9 00001342            288      JMP     MSB_1101                    *ADD, ADDA
000012EA  4EF9 00001348            289      JMP     MSB_1110                    *ROL, ROR, LSL, LSR, ASL, ASR
000012F0  4EF9 0000134E            290      JMP     MSB_1111                    *Special/Reserved  NOT USED
000012F6                           291      
000012F6                           292  MSB_0000    
000012F6  4EF9 00001352            293      JMP     MSB_SUBR_0000
000012FC                           294  MSB_0001    
000012FC  4EF9 0000138E            295      JMP     MSB_SUBR_0001
00001302                           296  MSB_0010    
00001302  4EF9 0000139A            297      JMP     MSB_SUBR_0010
00001308                           298  MSB_0011    
00001308  4EF9 000013A6            299      JMP     MSB_SUBR_0011
0000130E                           300  MSB_0100    
0000130E  4EF9 000013B2            301      JMP     MSB_SUBR_0100
00001314                           302  MSB_0101    
00001314  6000 0110                303      BRA     MSB_SUBR_0101   Not used   
00001318                           304  MSB_0110    
00001318  4EF9 0000142C            305      JMP     MSB_SUBR_0110 
0000131E                           306  MSB_0111    
0000131E  4EF9 00001450            307      JMP     MSB_SUBR_0111 
00001324                           308  MSB_1000    
00001324  4EF9 00001464            309      JMP     MSB_SUBR_1000 
0000132A                           310  MSB_1001    
0000132A  4EF9 00001478            311      JMP     MSB_SUBR_1001
00001330                           312  MSB_1010    
00001330  4EF9 000014D8            313      JMP     MSB_SUBR_1010   Not used 
00001336                           314  MSB_1011    
00001336  4EF9 000014B4            315      JMP     MSB_SUBR_1011              
0000133C                           316  MSB_1100    
0000133C  4EF9 000014DE            317      JMP     MSB_SUBR_1100
00001342                           318  MSB_1101    
00001342  4EF9 00001528            319      JMP     MSB_SUBR_1101  
00001348                           320  MSB_1110    
00001348  4EF9 00001574            321      JMP     MSB_SUBR_1110
0000134E                           322  MSB_1111    
0000134E  6000 025A                323      BRA     MSB_SUBR_1111   Not used
00001352                           324  
00001352                           325  MSB_SUBR_0000
00001352  4EB9 0000220A            326      JSR     GET_ADDI_BITS 
00001358  B47C 0600                327      CMP.W   #$0600, D2
0000135C  6700 186A                328      BEQ     DECODE_ADDIB            If $0600, it's ADDI.B
00001360  B47C 0640                329      CMP.W   #$0640, D2
00001364  6700 187A                330      BEQ     DECODE_ADDIW            If $0640, it's ADDI.W
00001368  B47C 0680                331      CMP.W   #$0680, D2
0000136C  6700 188A                332      BEQ     DECODE_ADDIL            If $0680, it's ADDI.L
00001370                           333      
00001370  B47C 0400                334      CMP.W   #$0400, D2
00001374  6700 1A0E                335      BEQ     DECODE_SUBIB            If $0600, it's SUBI.B
00001378  B47C 0440                336      CMP.W   #$0440, D2
0000137C  6700 1A1E                337      BEQ     DECODE_SUBIW            If $0640, it's SUBI.W
00001380  B47C 0480                338      CMP.W   #$0480, D2
00001384  6700 1A2E                339      BEQ     DECODE_SUBIL            If $0680, it's SUBI.L
00001388  4EF9 000015AA            340      JMP     INVALID_OP
0000138E                           341  
0000138E                           342  MSB_SUBR_0001
0000138E  4EF9 00002774            343      JMP     DECODE_MOVEB
00001394  4EF9 000015AA            344      JMP     INVALID_OP
0000139A                           345   
0000139A                           346  MSB_SUBR_0010
0000139A  4EF9 00002794            347      JMP     DECODE_MOVEL
000013A0  4EF9 000015AA            348      JMP     INVALID_OP
000013A6                           349     
000013A6                           350  MSB_SUBR_0011
000013A6  4EF9 00002784            351      JMP     DECODE_MOVEW  
000013AC  4EF9 000015AA            352      JMP     INVALID_OP
000013B2                           353  
000013B2                           354  MSB_SUBR_0100
000013B2  BE7C 4E71                355      CMP.W   #$4E71, D7              Compares hex value for NOP
000013B6  6700 0F16                356      BEQ     DECODE_NOP              IF equal, decode NOP Opcode
000013BA                           357      
000013BA  BE7C 4E72                358      CMP.W   #$4E72, D7              Compares hex value for STOP
000013BE  6700 0F1E                359      BEQ     DECODE_STOP             IF equal, decode STOP Opcode
000013C2                           360      
000013C2  BE7C 4E75                361      CMP.W   #$4E75, D7              Compares hex value for RTS
000013C6  6700 0F84                362      BEQ     DECODE_RTS              IF equal, decode RTS Opcode
000013CA                           363      
000013CA  4EB9 000021E6            364      JSR     GET_CLR_BITS            Get CLR Bits
000013D0  B47C 0008                365      CMP.W   #VAR_CLRB, D2           IF match with CLR.B bits
000013D4  6700 0F86                366      BEQ     DECODE_CLRB             Decode CLR.B
000013D8  B47C 0009                367      CMP.W   #VAR_CLRW, D2           IF match with CLR.B bits
000013DC  6700 0F88                368      BEQ     DECODE_CLRW             Decode CLR.W
000013E0  B47C 000A                369      CMP.W   #VAR_CLRL, D2           IF match with CLR.B bits
000013E4  6700 0F8A                370      BEQ     DECODE_CLRL             Decode CLR.L
000013E8                           371      
000013E8  4EB9 000021F2            372      JSR     GET_JSR_BITS            Get JSR Bits
000013EE  B47C 003A                373      CMP.W   #VAR_JSR, D2            IF match with JSR bits
000013F2  6700 0F08                374      BEQ     DECODE_JSR              Decode JSR
000013F6                           375      
000013F6  4EB9 000021FE            376      JSR     GET_LEA_BITS            Get LEA Bits
000013FC  B47C 0007                377      CMP.W   #VAR_LEA, D2            IF match with LSR bits    
00001400  6700 0F1E                378      BEQ     DECODE_LEA              Decode JSR
00001404                           379      
00001404  4EB9 00002226            380      JSR     GET_MOVEM_BITS          Get MOVEM Bits
0000140A  B47C 0002                381      CMP.W   #VAR_MOVEMW, D2         IF match with MOVEM.W bits 
0000140E  6700 103E                382      BEQ     DECODE_MOVEMW           Decode MOVEMW
00001412                           383      
00001412  4EB9 00002226            384      JSR     GET_MOVEM_BITS          Get MOVEM Bits
00001418  B47C 0003                385      CMP.W   #VAR_MOVEML, D2         IF match with MOVEM.L bits 
0000141C  6700 1042                386      BEQ     DECODE_MOVEML           Decode MOVEML
00001420  4EF9 000015AA            387      JMP     INVALID_OP
00001426                           388  
00001426                           389  MSB_SUBR_0101  
00001426  4EF9 000015AA            390      JMP     INVALID_OP
0000142C                           391  
0000142C                           392  MSB_SUBR_0110 
0000142C  4EB9 000021DA            393      JSR     GET_BCC_BITS 
00001432  B47C 0004                394      CMP.W   #VAR_BCC, D2
00001436  6700 1600                395      BEQ     DECODE_BCC
0000143A                           396      
0000143A  B47C 000E                397      CMP.W   #VAR_BGT, D2
0000143E  6700 1608                398      BEQ     DECODE_BGT
00001442                           399       
00001442  B47C 000F                400      CMP.W   #VAR_BLE, D2
00001446  6700 1610                401      BEQ     DECODE_BLE 
0000144A  4EF9 000015AA            402      JMP     INVALID_OP
00001450                           403   
00001450                           404  MSB_SUBR_0111 
00001450  4EB9 00002216            405      JSR     GET_MOVEQ_BITS
00001456  B47C 0000                406      CMP.W   #VAR_MOVEQ,D2
0000145A  6700 138C                407      BEQ     DECODE_MOVEQ
0000145E  4EF9 000015AA            408      JMP     INVALID_OP
00001464                           409  
00001464                           410  MSB_SUBR_1000 
00001464  4EB9 00002256            411      JSR     GET_MULS_DIVU_BITS      
0000146A  B47C 0003                412      CMP.W   #VAR_DIVU,D2
0000146E  6700 1584                413      BEQ     DECODE_DIVU   
00001472  4EF9 000015AA            414      JMP     INVALID_OP
00001478                           415       
00001478                           416  MSB_SUBR_1001                   
00001478  4EB9 000021AE            417      JSR     GET_OPMODE_BITS             
0000147E  B47C 0000                418      CMP.W   #0, D2
00001482  6700 19CC                419      BEQ     DECODE_SUBB_EATODN
00001486  B47C 0001                420      CMP.W   #1, D2
0000148A  6700 19EC                421      BEQ     DECODE_SUBW_EATODN
0000148E  B47C 0002                422      CMP.W   #2, D2
00001492  6700 1A04                423      BEQ     DECODE_SUBL_EATODN
00001496                           424      
00001496  B47C 0004                425      CMP.W   #4, D2
0000149A  6700 193E                426      BEQ     DECODE_SUBB_DNTOEA
0000149E  B47C 0005                427      CMP.W   #5, D2
000014A2  6700 195E                428      BEQ     DECODE_SUBW_DNTOEA
000014A6  B47C 0006                429      CMP.W   #6, D2
000014AA  6700 1976                430      BEQ     DECODE_SUBL_DNTOEA 
000014AE  4EF9 000015AA            431      JMP     INVALID_OP
000014B4                           432  
000014B4                           433  MSB_SUBR_1011              
000014B4  4EB9 000021AE            434      JSR     GET_OPMODE_BITS
000014BA  B47C 0000                435      CMP.W   #VAR_CMPB,D2
000014BE  6700 0EEC                436      BEQ     DECODE_CMPB
000014C2  B47C 0001                437      CMP.W   #VAR_CMPW,D2
000014C6  6700 0F28                438      BEQ     DECODE_CMPW
000014CA  B47C 0002                439      CMP.W   #VAR_CMPL,D2
000014CE  6700 0F2A                440      BEQ     DECODE_CMPL
000014D2  4EF9 000015AA            441      JMP     INVALID_OP
000014D8                           442  
000014D8                           443  MSB_SUBR_1010       
000014D8  4EF9 000015AA            444      JMP     INVALID_OP
000014DE                           445  
000014DE                           446  MSB_SUBR_1100       
000014DE  4EB9 00002256            447      JSR     GET_MULS_DIVU_BITS        Decode Muls/Divu   
000014E4  B47C 0007                448      CMP.W   #VAR_MULS,D2
000014E8  6700 14F8                449      BEQ     DECODE_MULS
000014EC                           450  
000014EC  4EB9 000021AE            451      JSR     GET_OPMODE_BITS                 
000014F2  B47C 0000                452      CMP.W   #0, D2
000014F6  6700 178A                453      BEQ     DECODE_ANDB_EATODN        Decode AND EA to Dn
000014FA  B47C 0001                454      CMP.W   #1, D2
000014FE  6700 17A2                455      BEQ     DECODE_ANDW_EATODN
00001502  B47C 0002                456      CMP.W   #2, D2
00001506  6700 17BA                457      BEQ     DECODE_ANDL_EATODN
0000150A  B47C 0004                458      CMP.W   #4, D2
0000150E  6700 1806                459      BEQ     DECODE_ANDB_DNTOEA        Decode AND Dn to EA
00001512  B47C 0005                460      CMP.W   #5, D2
00001516  6700 181E                461      BEQ     DECODE_ANDW_DNTOEA
0000151A  B47C 0006                462      CMP.W   #6, D2
0000151E  6700 1836                463      BEQ     DECODE_ANDL_DNTOEA
00001522  4EF9 000015AA            464      JMP     INVALID_OP
00001528                           465    
00001528                           466  MSB_SUBR_1101 
00001528  4EB9 000021AE            467      JSR     GET_OPMODE_BITS
0000152E  B47C 0000                468      CMP.W   #0, D2
00001532  6700 156E                469      BEQ     DECODE_ADDB_EATODN
00001536  B47C 0001                470      CMP.W   #1, D2
0000153A  6700 15B2                471      BEQ     DECODE_ADDW_EATODN
0000153E  B47C 0002                472      CMP.W   #2, D2
00001542  6700 15CA                473      BEQ     DECODE_ADDL_EATODN
00001546  B47C 0003                474      CMP.W   #3, D2
0000154A  6700 16D2                475      BEQ     DECODE_ADDAW
0000154E  B47C 0004                476      CMP.W   #4, D2
00001552  6700 1616                477      BEQ     DECODE_ADDB_DNTOEA
00001556  B47C 0005                478      CMP.W   #5, D2
0000155A  6700 1626                479      BEQ     DECODE_ADDW_DNTOEA
0000155E  B47C 0006                480      CMP.W   #6, D2
00001562  6700 1636                481      BEQ     DECODE_ADDL_DNTOEA
00001566  B47C 0007                482      CMP.W   #7, D2
0000156A  6700 16C2                483      BEQ     DECODE_ADDAL   
0000156E  4EF9 000015AA            484      JMP     INVALID_OP 
00001574                           485       
00001574                           486  MSB_SUBR_1110       
00001574                           487      *<REG SHIFT>    
00001574  4EB9 00002266            488      JSR     GET_SHIFT_SIZE_BITS                 Check 6th and 7th bit, %11 != RS mode
0000157A  B43C 0000                489      CMP.B   #0,D2
0000157E  6700 1328                490      BEQ     DECODE_ROTATIONS_BYTE_RS            %00 == BYTE
00001582  B43C 0001                491      CMP.B   #1,D2
00001586  6700 132C                492      BEQ     DECODE_ROTATIONS_WORD_RS            %01 == WORD
0000158A  B43C 0002                493      CMP.B   #2,D2
0000158E  6700 1330                494      BEQ     DECODE_ROTATIONS_LONG_RS            %11 == LONG
00001592                           495  
00001592                           496      *<MEM SHIFT>    
00001592  6000 277A                497      BRA     CHECK_ROTATIONS_OPMODE_LHS
00001596                           498  VALID_ROTATIONS_MS           
00001596  4EB9 00002266            499      JSR     GET_SHIFT_SIZE_BITS
0000159C  B43C 0003                500      CMP.B   #3,D2   
000015A0  6700 1268                501      BEQ     DECODE_ROTATIONS_MS                 Check 6th and 7th bit, %11 == MS mode 
000015A4                           502  INVALID_ROTATIONS_MS    
000015A4  4EF9 000015AA            503      JMP     INVALID_OP
000015AA                           504  
000015AA                           505  MSB_SUBR_1111
000015AA                           506  
000015AA                           507  INVALID_OP
000015AA  4EF9 000016EC            508      JMP INVALID_OPWORD      When current opword can't be decoded (ERROR)
000015AA  4EF9 000016EC            509  -------------------- end include --------------------
000015B0                           510      INCLUDE         'JKR_PRINT_LOGIC_W16.X68'
000015B0                           511  PRINT_SLASH
000015B0  43F9 00003F98            512      LEA     DISPLAY_SLASH, A1
000015B6  103C 000E                513      MOVE.B  #14, D0
000015BA  4E4F                     514      TRAP    #15
000015BC  4E75                     515      RTS
000015BE                           516  PRINT_COMMA
000015BE  43F9 00003F96            517      LEA     DISPLAY_COMMA, A1
000015C4  103C 000E                518      MOVE.B  #14, D0
000015C8  4E4F                     519      TRAP    #15
000015CA  4E75                     520      RTS
000015CC                           521  PRINT_DOLLAR
000015CC  43F9 00003F92            522      LEA     DISPLAY_DOLLAR, A1
000015D2  103C 000E                523      MOVE.B  #14, D0             
000015D6  4E4F                     524      TRAP    #15
000015D8  4E75                     525      RTS
000015DA                           526  PRINT_IMDATA
000015DA  43F9 00003F94            527      LEA     DISPLAY_HASH, A1
000015E0  103C 000E                528      MOVE.B  #14, D0             
000015E4  4E4F                     529      TRAP    #15
000015E6  43F9 00003F92            530      LEA     DISPLAY_DOLLAR, A1
000015EC  103C 000E                531      MOVE.B  #14, D0             
000015F0  4E4F                     532      TRAP    #15
000015F2  4E75                     533      RTS
000015F4                           534  CLEAR_NEXT_LINE
000015F4  43F9 00003F8C            535      LEA     CLEAR_LINE,A1       Display a space and clear to new line
000015FA  103C 000E                536      MOVE.B  #14, D0             |
000015FE  4E4F                     537      TRAP    #15                 V
00001600  4E75                     538      RTS                         RTS
00001602                           539  DISPLAY_ADDRESS
00001602  43F9 00003F90            540      LEA     DISPLAY_SPACE, A1
00001608  103C 000E                541      MOVE.B  #14, D0
0000160C  4E4F                     542      TRAP    #15
0000160E  4EB8 15CC                543      JSR     PRINT_DOLLAR
00001612  4EF9 0000161A            544      JMP     HEX_TO_ACII_ADDR    
00001618  4E75                     545      RTS                         
0000161A                           546  HEX_TO_ACII_ADDR
0000161A  4EB9 00003C0E            547      JSR     CLR_DATAREG_D6      Clear all registers before calculation
00001620  224D                     548      MOVEA.L A5, A1              Take the addr at A5 and put it in A1
00001622  2C09                     549      MOVE.L  A1, D6              Put addr1's addr into D6, to hold addr value
00001624  143C 0001                550      MOVE.B  #1, D2              Counter Variable
00001628  163C 0004                551      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
0000162C  223C F0000000            552      MOVE.L  #$F0000000, D1      Move the masking value to D1
00001632                           553        
00001632                           554  CONVERSION_LOOP
00001632  2A06                     555      MOVE.L  D6, D5              D5 will hold addr for manipulation
00001634  CA81                     556      AND.L   D1, D5              Mask D5 with mask value
00001636  E889                     557      LSR.L   #4, D1              Update the mask to next digit, by shifting 4
00001638  E7BD                     558      ROL.L   D3, D5              ROL once to bring MSB to LSB
0000163A  1805                     559      MOVE.B  D5, D4              Extract the digit
0000163C  4EB9 000016D8            560      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
00001642  23FC 00000000 00006022   561      MOVE.L  #0,(PRINT_ADDR_CHAR) Initialize addr with 0 for null termination
0000164C  13C4 00006022            562      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
00001652  43F9 00006022            563      LEA     PRINT_ADDR_CHAR,A1  |
00001658  103C 000E                564      MOVE.B  #14,D0              |
0000165C  4E4F                     565      TRAP    #15                 V
0000165E  0C02 0008                566      CMPI.B  #8, D2              IF counter equals terminal value
00001662  6700 0008                567      BEQ     CONTINUE_DISPLAY    Exit the loop
00001666  5803                     568      ADDQ.B  #4, D3              Else update shift value to next digit
00001668  5202                     569      ADDQ.B  #1, D2              Counter++
0000166A  60C6                     570      BRA     CONVERSION_LOOP     Loop to start of loop
0000166C                           571  CONTINUE_DISPLAY
0000166C  4E75                     572      RTS
0000166E                           573  PRINT_DISP_ADDR
0000166E  43F9 00003F90            574      LEA     DISPLAY_SPACE, A1
00001674  103C 000E                575      MOVE.B  #14, D0
00001678  4E4F                     576      TRAP    #15
0000167A  4EB8 15CC                577      JSR     PRINT_DOLLAR
0000167E  4EF9 00001686            578      JMP     HEX_TO_ACII_DISPLACEMENT    
00001684  4E75                     579      RTS                         
00001686                           580  HEX_TO_ACII_DISPLACEMENT
00001686  4EB9 00003C0E            581      JSR     CLR_DATAREG_D6      Clear all registers before calculation
0000168C  2C07                     582      MOVE.L  D7, D6              Put addr1's addr into D6, to hold addr value
0000168E  143C 0001                583      MOVE.B  #1, D2              Counter Variable
00001692  163C 0004                584      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
00001696  223C F0000000            585      MOVE.L  #$F0000000, D1      Move the masking value to D1
0000169C                           586        
0000169C                           587  DISPLACEMENT_LOOP
0000169C  2A06                     588      MOVE.L  D6, D5              D5 will hold addr for manipulation
0000169E  CA81                     589      AND.L   D1, D5              Mask D5 with mask value
000016A0  E889                     590      LSR.L   #4, D1              Update the mask to next digit, by shifting 4
000016A2  E7BD                     591      ROL.L   D3, D5              ROL once to bring MSB to LSB
000016A4  1805                     592      MOVE.B  D5, D4              Extract the digit
000016A6  4EB9 000016D8            593      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
000016AC  23FC 00000000 00006022   594      MOVE.L  #0,(PRINT_ADDR_CHAR) Initialize addr with 0 for null termination
000016B6  13C4 00006022            595      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
000016BC  43F9 00006022            596      LEA     PRINT_ADDR_CHAR,A1  |
000016C2  103C 000E                597      MOVE.B  #14,D0              |
000016C6  4E4F                     598      TRAP    #15                 V
000016C8  0C02 0008                599      CMPI.B  #8, D2              IF counter equals terminal value
000016CC  6700 0008                600      BEQ     EXIT_DISP_LOOP      Exit the loop
000016D0  5803                     601      ADDQ.B  #4, D3              Else update shift value to next digit
000016D2  5202                     602      ADDQ.B  #1, D2              Counter++
000016D4  60C6                     603      BRA     DISPLACEMENT_LOOP   Loop to start of loop
000016D6                           604  EXIT_DISP_LOOP
000016D6  4E75                     605      RTS
000016D8                           606  CHECK_CONVERSION 
000016D8  0C04 0009                607      CMPI.B  #$9, D4             D4 stores the single hex value to print
000016DC  6E00 0008                608      BGT     CHECK_LETTER        
000016E0  0604 0030                609      ADD.B   #$30,D4             Add $30 to make it ASCII value_digits
000016E4  4E75                     610      RTS
000016E6                           611      
000016E6                           612  CHECK_LETTER 
000016E6  0604 0037                613      ADD.B   #$37,D4             Add $37 to make it ASCII value_upper(A-F)
000016EA  4E75                     614      RTS 
000016EC                           615  INVALID_OPWORD
000016EC  43F9 00003FE8            616      LEA     DISPLAY_DATA, A1    
000016F2  103C 000E                617      MOVE.B  #14, D0             
000016F6  4E4F                     618      TRAP    #15
000016F8  4EB8 15CC                619      JSR     PRINT_DOLLAR
000016FC  4EB9 00003C0E            620      JSR     CLR_DATAREG_D6      Clear all registers before calculation
00001702  3C07                     621      MOVE.W  D7, D6              Put addr1's addr into D6, to hold addr value
00001704  143C 0001                622      MOVE.B  #1, D2              Counter Variable
00001708  163C 0004                623      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
0000170C  323C F000                624      MOVE.W  #$F000, D1          Move the masking value to D1
00001710                           625      
00001710                           626  INVALID_LOOP
00001710  3A06                     627      MOVE.W  D6, D5              D5 will hold addr for manipulation
00001712  CA41                     628      AND.W   D1, D5              Mask D5 with mask value
00001714  E849                     629      LSR.W   #4, D1              Update the mask to next digit, by shifting 4
00001716  E77D                     630      ROL.W   D3, D5              ROL once to bring MSB to LSB
00001718  1805                     631      MOVE.B  D5, D4              Extract the digit
0000171A  4EB8 16D8                632      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
0000171E  33FC 0000 00006022       633      MOVE.W  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
00001726  13C4 00006022            634      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
0000172C  43F9 00006022            635      LEA     PRINT_ADDR_CHAR,A1  |
00001732  103C 000E                636      MOVE.B  #14,D0              |
00001736  4E4F                     637      TRAP    #15                 V
00001738  0C02 0004                638      CMPI.B  #4, D2              IF counter equals terminal value
0000173C  6700 0008                639      BEQ     EXIT_LOOP           Exit the loop
00001740  5803                     640      ADDQ.B  #4, D3              Else update shift value to next digit
00001742  5202                     641      ADDQ.B  #1, D2              Counter++
00001744  60CA                     642      BRA     INVALID_LOOP        Loop to start of loop
00001746                           643  EXIT_LOOP
00001746  4EB8 15F4                644      JSR     CLEAR_NEXT_LINE
0000174A  4EF8 1222                645      JMP     PRINT_LOGIC
0000174E                           646  PRINT_D0_RHS
0000174E  43F9 000041F7            647      LEA     DISPLAY_D0, A1
00001754  103C 000E                648      MOVE.B  #14, D0
00001758  4E4F                     649      TRAP    #15
0000175A  4EB8 15F4                650      JSR     CLEAR_NEXT_LINE
0000175E  4EF8 1222                651      JMP     PRINT_LOGIC
00001762                           652  PRINT_D1_RHS
00001762  43F9 000041FA            653      LEA     DISPLAY_D1, A1
00001768  103C 000E                654      MOVE.B  #14, D0
0000176C  4E4F                     655      TRAP    #15
0000176E  4EB8 15F4                656      JSR     CLEAR_NEXT_LINE
00001772  4EF8 1222                657      JMP     PRINT_LOGIC
00001776                           658  PRINT_D2_RHS
00001776  43F9 000041FD            659      LEA     DISPLAY_D2, A1
0000177C  103C 000E                660      MOVE.B  #14, D0
00001780  4E4F                     661      TRAP    #15
00001782  4EB8 15F4                662      JSR     CLEAR_NEXT_LINE
00001786  4EF8 1222                663      JMP     PRINT_LOGIC
0000178A                           664  PRINT_D3_RHS
0000178A  43F9 00004200            665      LEA     DISPLAY_D3, A1
00001790  103C 000E                666      MOVE.B  #14, D0
00001794  4E4F                     667      TRAP    #15
00001796  4EB8 15F4                668      JSR     CLEAR_NEXT_LINE
0000179A  4EF8 1222                669      JMP     PRINT_LOGIC
0000179E                           670  PRINT_D4_RHS
0000179E  43F9 00004203            671      LEA     DISPLAY_D4, A1
000017A4  103C 000E                672      MOVE.B  #14, D0
000017A8  4E4F                     673      TRAP    #15
000017AA  4EB8 15F4                674      JSR     CLEAR_NEXT_LINE
000017AE  4EF8 1222                675      JMP     PRINT_LOGIC
000017B2                           676  PRINT_D5_RHS
000017B2  43F9 00004206            677      LEA     DISPLAY_D5, A1
000017B8  103C 000E                678      MOVE.B  #14, D0
000017BC  4E4F                     679      TRAP    #15
000017BE  4EB8 15F4                680      JSR     CLEAR_NEXT_LINE
000017C2  4EF8 1222                681      JMP     PRINT_LOGIC
000017C6                           682  PRINT_D6_RHS
000017C6  43F9 00004209            683      LEA     DISPLAY_D6, A1
000017CC  103C 000E                684      MOVE.B  #14, D0
000017D0  4E4F                     685      TRAP    #15
000017D2  4EB8 15F4                686      JSR     CLEAR_NEXT_LINE
000017D6  4EF8 1222                687      JMP     PRINT_LOGIC
000017DA                           688  PRINT_D7_RHS
000017DA  43F9 0000420C            689      LEA     DISPLAY_D7, A1
000017E0  103C 000E                690      MOVE.B  #14, D0
000017E4  4E4F                     691      TRAP    #15
000017E6  4EB8 15F4                692      JSR     CLEAR_NEXT_LINE
000017EA  4EF8 1222                693      JMP     PRINT_LOGIC
000017EE                           694  PRINT_A0_RHS
000017EE  43F9 0000420F            695      LEA     DISPLAY_A0, A1
000017F4  103C 000E                696      MOVE.B  #14, D0
000017F8  4E4F                     697      TRAP    #15
000017FA  4EB8 15F4                698      JSR     CLEAR_NEXT_LINE
000017FE  4EF8 1222                699      JMP     PRINT_LOGIC
00001802                           700  PRINT_A1_RHS
00001802  43F9 00004212            701      LEA     DISPLAY_A1, A1
00001808  103C 000E                702      MOVE.B  #14, D0
0000180C  4E4F                     703      TRAP    #15
0000180E  4EB8 15F4                704      JSR     CLEAR_NEXT_LINE
00001812  4EF8 1222                705      JMP     PRINT_LOGIC
00001816                           706  PRINT_A2_RHS
00001816  43F9 00004215            707      LEA     DISPLAY_A2, A1
0000181C  103C 000E                708      MOVE.B  #14, D0
00001820  4E4F                     709      TRAP    #15
00001822  4EB8 15F4                710      JSR     CLEAR_NEXT_LINE
00001826  4EF8 1222                711      JMP     PRINT_LOGIC
0000182A                           712  PRINT_A3_RHS
0000182A  43F9 00004218            713      LEA     DISPLAY_A3, A1
00001830  103C 000E                714      MOVE.B  #14, D0
00001834  4E4F                     715      TRAP    #15
00001836  4EB8 15F4                716      JSR     CLEAR_NEXT_LINE
0000183A  4EF8 1222                717      JMP     PRINT_LOGIC
0000183E                           718  PRINT_A4_RHS
0000183E  43F9 0000421B            719      LEA     DISPLAY_A4, A1
00001844  103C 000E                720      MOVE.B  #14, D0
00001848  4E4F                     721      TRAP    #15
0000184A  4EB8 15F4                722      JSR     CLEAR_NEXT_LINE
0000184E  4EF8 1222                723      JMP     PRINT_LOGIC
00001852                           724  PRINT_A5_RHS
00001852  43F9 0000421E            725      LEA     DISPLAY_A5, A1
00001858  103C 000E                726      MOVE.B  #14, D0
0000185C  4E4F                     727      TRAP    #15
0000185E  4EB8 15F4                728      JSR     CLEAR_NEXT_LINE
00001862  4EF8 1222                729      JMP     PRINT_LOGIC
00001866                           730  PRINT_A6_RHS
00001866  43F9 00004221            731      LEA     DISPLAY_A6, A1
0000186C  103C 000E                732      MOVE.B  #14, D0
00001870  4E4F                     733      TRAP    #15
00001872  4EB8 15F4                734      JSR     CLEAR_NEXT_LINE
00001876  4EF8 1222                735      JMP     PRINT_LOGIC
0000187A                           736  PRINT_A7_RHS
0000187A  43F9 00004224            737      LEA     DISPLAY_A7, A1
00001880  103C 000E                738      MOVE.B  #14, D0
00001884  4E4F                     739      TRAP    #15
00001886  4EB8 15F4                740      JSR     CLEAR_NEXT_LINE
0000188A  4EF8 1222                741      JMP     PRINT_LOGIC
0000188E                           742  PRINT_A0_P_RHS
0000188E  43F9 00004227            743      LEA     DISPLAY_A0_P, A1
00001894  103C 000E                744      MOVE.B  #14, D0
00001898  4E4F                     745      TRAP    #15
0000189A  4EB8 15F4                746      JSR     CLEAR_NEXT_LINE
0000189E  4EF8 1222                747      JMP     PRINT_LOGIC
000018A2                           748  PRINT_A1_P_RHS
000018A2  43F9 0000422C            749      LEA     DISPLAY_A1_P, A1
000018A8  103C 000E                750      MOVE.B  #14, D0
000018AC  4E4F                     751      TRAP    #15
000018AE  4EB8 15F4                752      JSR     CLEAR_NEXT_LINE
000018B2  4EF8 1222                753      JMP     PRINT_LOGIC
000018B6                           754  PRINT_A2_P_RHS
000018B6  43F9 00004231            755      LEA     DISPLAY_A2_P, A1
000018BC  103C 000E                756      MOVE.B  #14, D0
000018C0  4E4F                     757      TRAP    #15
000018C2  4EB8 15F4                758      JSR     CLEAR_NEXT_LINE
000018C6  4EF8 1222                759      JMP     PRINT_LOGIC
000018CA                           760  PRINT_A3_P_RHS
000018CA  43F9 00004236            761      LEA     DISPLAY_A3_P, A1
000018D0  103C 000E                762      MOVE.B  #14, D0
000018D4  4E4F                     763      TRAP    #15
000018D6  4EB8 15F4                764      JSR     CLEAR_NEXT_LINE
000018DA  4EF8 1222                765      JMP     PRINT_LOGIC
000018DE                           766  PRINT_A4_P_RHS
000018DE  43F9 0000423B            767      LEA     DISPLAY_A4_P, A1
000018E4  103C 000E                768      MOVE.B  #14, D0
000018E8  4E4F                     769      TRAP    #15
000018EA  4EB8 15F4                770      JSR     CLEAR_NEXT_LINE
000018EE  4EF8 1222                771      JMP     PRINT_LOGIC
000018F2                           772  PRINT_A5_P_RHS
000018F2  43F9 00004240            773      LEA     DISPLAY_A5_P, A1
000018F8  103C 000E                774      MOVE.B  #14, D0
000018FC  4E4F                     775      TRAP    #15
000018FE  4EB8 15F4                776      JSR     CLEAR_NEXT_LINE
00001902  4EF8 1222                777      JMP     PRINT_LOGIC
00001906                           778  PRINT_A6_P_RHS
00001906  43F9 00004245            779      LEA     DISPLAY_A6_P, A1
0000190C  103C 000E                780      MOVE.B  #14, D0
00001910  4E4F                     781      TRAP    #15
00001912  4EB8 15F4                782      JSR     CLEAR_NEXT_LINE
00001916  4EF8 1222                783      JMP     PRINT_LOGIC
0000191A                           784  PRINT_A7_P_RHS
0000191A  43F9 0000424A            785      LEA     DISPLAY_A7_P, A1
00001920  103C 000E                786      MOVE.B  #14, D0
00001924  4E4F                     787      TRAP    #15
00001926  4EB8 15F4                788      JSR     CLEAR_NEXT_LINE
0000192A  4EF8 1222                789      JMP     PRINT_LOGIC
0000192E                           790  PRINT_A0_PP_RHS
0000192E  43F9 0000424F            791      LEA     DISPLAY_A0_PP, A1
00001934  103C 000E                792      MOVE.B  #14, D0
00001938  4E4F                     793      TRAP    #15
0000193A  4EB8 15F4                794      JSR     CLEAR_NEXT_LINE
0000193E  4EF8 1222                795      JMP     PRINT_LOGIC
00001942                           796  PRINT_A1_PP_RHS
00001942  43F9 00004255            797      LEA     DISPLAY_A1_PP, A1
00001948  103C 000E                798      MOVE.B  #14, D0
0000194C  4E4F                     799      TRAP    #15
0000194E  4EB8 15F4                800      JSR     CLEAR_NEXT_LINE
00001952  4EF8 1222                801      JMP     PRINT_LOGIC
00001956                           802  PRINT_A2_PP_RHS
00001956  43F9 0000425B            803      LEA     DISPLAY_A2_PP, A1
0000195C  103C 000E                804      MOVE.B  #14, D0
00001960  4E4F                     805      TRAP    #15
00001962  4EB8 15F4                806      JSR     CLEAR_NEXT_LINE
00001966  4EF8 1222                807      JMP     PRINT_LOGIC
0000196A                           808  PRINT_A3_PP_RHS
0000196A  43F9 00004261            809      LEA     DISPLAY_A3_PP, A1
00001970  103C 000E                810      MOVE.B  #14, D0
00001974  4E4F                     811      TRAP    #15
00001976  4EB8 15F4                812      JSR     CLEAR_NEXT_LINE
0000197A  4EF8 1222                813      JMP     PRINT_LOGIC
0000197E                           814  PRINT_A4_PP_RHS
0000197E  43F9 00004267            815      LEA     DISPLAY_A4_PP, A1
00001984  103C 000E                816      MOVE.B  #14, D0
00001988  4E4F                     817      TRAP    #15
0000198A  4EB8 15F4                818      JSR     CLEAR_NEXT_LINE
0000198E  4EF8 1222                819      JMP     PRINT_LOGIC
00001992                           820  PRINT_A5_PP_RHS
00001992  43F9 0000426D            821      LEA     DISPLAY_A5_PP, A1
00001998  103C 000E                822      MOVE.B  #14, D0
0000199C  4E4F                     823      TRAP    #15
0000199E  4EB8 15F4                824      JSR     CLEAR_NEXT_LINE
000019A2  4EF8 1222                825      JMP     PRINT_LOGIC
000019A6                           826  PRINT_A6_PP_RHS
000019A6  43F9 00004273            827      LEA     DISPLAY_A6_PP, A1
000019AC  103C 000E                828      MOVE.B  #14, D0
000019B0  4E4F                     829      TRAP    #15
000019B2  4EB8 15F4                830      JSR     CLEAR_NEXT_LINE
000019B6  4EF8 1222                831      JMP     PRINT_LOGIC
000019BA                           832  PRINT_A7_PP_RHS
000019BA  43F9 00004279            833      LEA     DISPLAY_A7_PP, A1
000019C0  103C 000E                834      MOVE.B  #14, D0
000019C4  4E4F                     835      TRAP    #15
000019C6  4EB8 15F4                836      JSR     CLEAR_NEXT_LINE
000019CA  4EF8 1222                837      JMP     PRINT_LOGIC
000019CE                           838  PRINT_A0_PM_RHS
000019CE  43F9 0000427F            839      LEA     DISPLAY_A0_PM, A1
000019D4  103C 000E                840      MOVE.B  #14, D0
000019D8  4E4F                     841      TRAP    #15
000019DA  4EB8 15F4                842      JSR     CLEAR_NEXT_LINE
000019DE  4EF8 1222                843      JMP     PRINT_LOGIC
000019E2                           844  PRINT_A1_PM_RHS
000019E2  43F9 00004285            845      LEA     DISPLAY_A1_PM, A1
000019E8  103C 000E                846      MOVE.B  #14, D0
000019EC  4E4F                     847      TRAP    #15
000019EE  4EB8 15F4                848      JSR     CLEAR_NEXT_LINE
000019F2  4EF8 1222                849      JMP     PRINT_LOGIC
000019F6                           850  PRINT_A2_PM_RHS
000019F6  43F9 0000428B            851      LEA     DISPLAY_A2_PM, A1
000019FC  103C 000E                852      MOVE.B  #14, D0
00001A00  4E4F                     853      TRAP    #15
00001A02  4EB8 15F4                854      JSR     CLEAR_NEXT_LINE
00001A06  4EF8 1222                855      JMP     PRINT_LOGIC
00001A0A                           856  PRINT_A3_PM_RHS
00001A0A  43F9 00004291            857      LEA     DISPLAY_A3_PM, A1
00001A10  103C 000E                858      MOVE.B  #14, D0
00001A14  4E4F                     859      TRAP    #15
00001A16  4EB8 15F4                860      JSR     CLEAR_NEXT_LINE
00001A1A  4EF8 1222                861      JMP     PRINT_LOGIC
00001A1E                           862  PRINT_A4_PM_RHS
00001A1E  43F9 00004297            863      LEA     DISPLAY_A4_PM, A1
00001A24  103C 000E                864      MOVE.B  #14, D0
00001A28  4E4F                     865      TRAP    #15
00001A2A  4EB8 15F4                866      JSR     CLEAR_NEXT_LINE
00001A2E  4EF8 1222                867      JMP     PRINT_LOGIC
00001A32                           868  PRINT_A5_PM_RHS
00001A32  43F9 0000429D            869      LEA     DISPLAY_A5_PM, A1
00001A38  103C 000E                870      MOVE.B  #14, D0
00001A3C  4E4F                     871      TRAP    #15
00001A3E  4EB8 15F4                872      JSR     CLEAR_NEXT_LINE
00001A42  4EF8 1222                873      JMP     PRINT_LOGIC
00001A46                           874  PRINT_A6_PM_RHS
00001A46  43F9 000042A3            875      LEA     DISPLAY_A6_PM, A1
00001A4C  103C 000E                876      MOVE.B  #14, D0
00001A50  4E4F                     877      TRAP    #15
00001A52  4EB8 15F4                878      JSR     CLEAR_NEXT_LINE
00001A56  4EF8 1222                879      JMP     PRINT_LOGIC
00001A5A                           880  PRINT_A7_PM_RHS
00001A5A  43F9 000042A9            881      LEA     DISPLAY_A7_PM, A1
00001A60  103C 000E                882      MOVE.B  #14, D0
00001A64  4E4F                     883      TRAP    #15
00001A66  4EB8 15F4                884      JSR     CLEAR_NEXT_LINE
00001A6A  4EF8 1222                885      JMP     PRINT_LOGIC
00001A6E                           886  PRINT_D0_LHS
00001A6E  43F9 000041F7            887      LEA     DISPLAY_D0, A1
00001A74  103C 000E                888      MOVE.B  #14, D0
00001A78  4E4F                     889      TRAP    #15
00001A7A  4EB8 15BE                890      JSR     PRINT_COMMA
00001A7E  4EF9 000037B0            891      JMP     CHECK_DECODE_RHS
00001A84  4EF8 1222                892      JMP     PRINT_LOGIC
00001A88                           893  PRINT_D1_LHS
00001A88  43F9 000041FA            894      LEA     DISPLAY_D1, A1
00001A8E  103C 000E                895      MOVE.B  #14, D0
00001A92  4E4F                     896      TRAP    #15
00001A94  4EB8 15BE                897      JSR     PRINT_COMMA
00001A98  4EF9 000037B0            898      JMP     CHECK_DECODE_RHS
00001A9E  4EF8 1222                899      JMP     PRINT_LOGIC
00001AA2                           900  PRINT_D2_LHS
00001AA2  43F9 000041FD            901      LEA     DISPLAY_D2, A1
00001AA8  103C 000E                902      MOVE.B  #14, D0
00001AAC  4E4F                     903      TRAP    #15
00001AAE  4EB8 15BE                904      JSR     PRINT_COMMA
00001AB2  4EF9 000037B0            905      JMP     CHECK_DECODE_RHS
00001AB8  4EF8 1222                906      JMP     PRINT_LOGIC
00001ABC                           907  PRINT_D3_LHS
00001ABC  43F9 00004200            908      LEA     DISPLAY_D3, A1
00001AC2  103C 000E                909      MOVE.B  #14, D0
00001AC6  4E4F                     910      TRAP    #15
00001AC8  4EB8 15BE                911      JSR     PRINT_COMMA
00001ACC  4EF9 000037B0            912      JMP     CHECK_DECODE_RHS
00001AD2  4EF8 1222                913      JMP     PRINT_LOGIC
00001AD6                           914  PRINT_D4_LHS
00001AD6  43F9 00004203            915      LEA     DISPLAY_D4, A1
00001ADC  103C 000E                916      MOVE.B  #14, D0
00001AE0  4E4F                     917      TRAP    #15
00001AE2  4EB8 15BE                918      JSR     PRINT_COMMA
00001AE6  4EF9 000037B0            919      JMP     CHECK_DECODE_RHS
00001AEC  4EF8 1222                920      JMP     PRINT_LOGIC
00001AF0                           921  PRINT_D5_LHS
00001AF0  43F9 00004206            922      LEA     DISPLAY_D5, A1
00001AF6  103C 000E                923      MOVE.B  #14, D0
00001AFA  4E4F                     924      TRAP    #15
00001AFC  4EB8 15BE                925      JSR     PRINT_COMMA
00001B00  4EF9 000037B0            926      JMP     CHECK_DECODE_RHS
00001B06  4EF8 1222                927      JMP     PRINT_LOGIC
00001B0A                           928  PRINT_D6_LHS
00001B0A  43F9 00004209            929      LEA     DISPLAY_D6, A1
00001B10  103C 000E                930      MOVE.B  #14, D0
00001B14  4E4F                     931      TRAP    #15
00001B16  4EB8 15BE                932      JSR     PRINT_COMMA
00001B1A  4EF9 000037B0            933      JMP     CHECK_DECODE_RHS
00001B20  4EF8 1222                934      JMP     PRINT_LOGIC
00001B24                           935  PRINT_D7_LHS
00001B24  43F9 0000420C            936      LEA     DISPLAY_D7, A1
00001B2A  103C 000E                937      MOVE.B  #14, D0
00001B2E  4E4F                     938      TRAP    #15
00001B30  4EB8 15BE                939      JSR     PRINT_COMMA
00001B34  4EF9 000037B0            940      JMP     CHECK_DECODE_RHS
00001B3A  4EF8 1222                941      JMP     PRINT_LOGIC
00001B3E                           942  PRINT_A0_LHS
00001B3E  43F9 0000420F            943      LEA     DISPLAY_A0, A1
00001B44  103C 000E                944      MOVE.B  #14, D0
00001B48  4E4F                     945      TRAP    #15
00001B4A  4EB8 15BE                946      JSR     PRINT_COMMA
00001B4E  4EF9 000037B0            947      JMP     CHECK_DECODE_RHS
00001B54  4EF8 1222                948      JMP     PRINT_LOGIC
00001B58                           949  PRINT_A1_LHS
00001B58  43F9 00004212            950      LEA     DISPLAY_A1, A1
00001B5E  103C 000E                951      MOVE.B  #14, D0
00001B62  4E4F                     952      TRAP    #15
00001B64  4EB8 15BE                953      JSR     PRINT_COMMA
00001B68  4EF9 000037B0            954      JMP     CHECK_DECODE_RHS
00001B6E  4EF8 1222                955      JMP     PRINT_LOGIC
00001B72                           956  PRINT_A2_LHS
00001B72  43F9 00004215            957      LEA     DISPLAY_A2, A1
00001B78  103C 000E                958      MOVE.B  #14, D0
00001B7C  4E4F                     959      TRAP    #15
00001B7E  4EB8 15BE                960      JSR     PRINT_COMMA
00001B82  4EF9 000037B0            961      JMP     CHECK_DECODE_RHS
00001B88  4EF8 1222                962      JMP     PRINT_LOGIC
00001B8C                           963  PRINT_A3_LHS
00001B8C  43F9 00004218            964      LEA     DISPLAY_A3, A1
00001B92  103C 000E                965      MOVE.B  #14, D0
00001B96  4E4F                     966      TRAP    #15
00001B98  4EB8 15BE                967      JSR     PRINT_COMMA
00001B9C  4EF9 000037B0            968      JMP     CHECK_DECODE_RHS
00001BA2  4EF8 1222                969      JMP     PRINT_LOGIC
00001BA6                           970  PRINT_A4_LHS
00001BA6  43F9 0000421B            971      LEA     DISPLAY_A4, A1
00001BAC  103C 000E                972      MOVE.B  #14, D0
00001BB0  4E4F                     973      TRAP    #15
00001BB2  4EB8 15BE                974      JSR     PRINT_COMMA
00001BB6  4EF9 000037B0            975      JMP     CHECK_DECODE_RHS
00001BBC  4EF8 1222                976      JMP     PRINT_LOGIC
00001BC0                           977  PRINT_A5_LHS
00001BC0  43F9 0000421E            978      LEA     DISPLAY_A5, A1
00001BC6  103C 000E                979      MOVE.B  #14, D0
00001BCA  4E4F                     980      TRAP    #15
00001BCC  4EB8 15BE                981      JSR     PRINT_COMMA
00001BD0  4EF9 000037B0            982      JMP     CHECK_DECODE_RHS
00001BD6  4EF8 1222                983      JMP     PRINT_LOGIC
00001BDA                           984  PRINT_A6_LHS
00001BDA  43F9 00004221            985      LEA     DISPLAY_A6, A1
00001BE0  103C 000E                986      MOVE.B  #14, D0
00001BE4  4E4F                     987      TRAP    #15
00001BE6  4EB8 15BE                988      JSR     PRINT_COMMA
00001BEA  4EF9 000037B0            989      JMP     CHECK_DECODE_RHS
00001BF0  4EF8 1222                990      JMP     PRINT_LOGIC
00001BF4                           991  PRINT_A7_LHS
00001BF4  43F9 00004224            992      LEA     DISPLAY_A7, A1
00001BFA  103C 000E                993      MOVE.B  #14, D0
00001BFE  4E4F                     994      TRAP    #15
00001C00  4EB8 15BE                995      JSR     PRINT_COMMA
00001C04  4EF9 000037B0            996      JMP     CHECK_DECODE_RHS
00001C0A  4EF8 1222                997      JMP     PRINT_LOGIC
00001C0E                           998  PRINT_A0_P_LHS
00001C0E  43F9 00004227            999      LEA     DISPLAY_A0_P, A1
00001C14  103C 000E               1000      MOVE.B  #14, D0
00001C18  4E4F                    1001      TRAP    #15
00001C1A  4EB8 15BE               1002      JSR     PRINT_COMMA
00001C1E  4EF9 000037B0           1003      JMP     CHECK_DECODE_RHS
00001C24  4EF8 1222               1004      JMP     PRINT_LOGIC
00001C28                          1005  PRINT_A1_P_LHS
00001C28  43F9 0000422C           1006      LEA     DISPLAY_A1_P, A1
00001C2E  103C 000E               1007      MOVE.B  #14, D0
00001C32  4E4F                    1008      TRAP    #15
00001C34  4EB8 15BE               1009      JSR     PRINT_COMMA
00001C38  4EF9 000037B0           1010      JMP     CHECK_DECODE_RHS
00001C3E  4EF8 1222               1011      JMP     PRINT_LOGIC
00001C42                          1012  PRINT_A2_P_LHS
00001C42  43F9 00004231           1013      LEA     DISPLAY_A2_P, A1
00001C48  103C 000E               1014      MOVE.B  #14, D0
00001C4C  4E4F                    1015      TRAP    #15
00001C4E  4EB8 15BE               1016      JSR     PRINT_COMMA
00001C52  4EF9 000037B0           1017      JMP     CHECK_DECODE_RHS
00001C58  4EF8 1222               1018      JMP     PRINT_LOGIC
00001C5C                          1019  PRINT_A3_P_LHS
00001C5C  43F9 00004236           1020      LEA     DISPLAY_A3_P, A1
00001C62  103C 000E               1021      MOVE.B  #14, D0
00001C66  4E4F                    1022      TRAP    #15
00001C68  4EB8 15BE               1023      JSR     PRINT_COMMA
00001C6C  4EF9 000037B0           1024      JMP     CHECK_DECODE_RHS
00001C72  4EF8 1222               1025      JMP     PRINT_LOGIC
00001C76                          1026  PRINT_A4_P_LHS
00001C76  43F9 0000423B           1027      LEA     DISPLAY_A4_P, A1
00001C7C  103C 000E               1028      MOVE.B  #14, D0
00001C80  4E4F                    1029      TRAP    #15
00001C82  4EB8 15BE               1030      JSR     PRINT_COMMA
00001C86  4EF9 000037B0           1031      JMP     CHECK_DECODE_RHS
00001C8C  4EF8 1222               1032      JMP     PRINT_LOGIC
00001C90                          1033  PRINT_A5_P_LHS
00001C90  43F9 00004240           1034      LEA     DISPLAY_A5_P, A1
00001C96  103C 000E               1035      MOVE.B  #14, D0
00001C9A  4E4F                    1036      TRAP    #15
00001C9C  4EB8 15BE               1037      JSR     PRINT_COMMA
00001CA0  4EF9 000037B0           1038      JMP     CHECK_DECODE_RHS
00001CA6  4EF8 1222               1039      JMP     PRINT_LOGIC
00001CAA                          1040  PRINT_A6_P_LHS
00001CAA  43F9 00004245           1041      LEA     DISPLAY_A6_P, A1
00001CB0  103C 000E               1042      MOVE.B  #14, D0
00001CB4  4E4F                    1043      TRAP    #15
00001CB6  4EB8 15BE               1044      JSR     PRINT_COMMA
00001CBA  4EF9 000037B0           1045      JMP     CHECK_DECODE_RHS
00001CC0  4EF8 1222               1046      JMP     PRINT_LOGIC
00001CC4                          1047  PRINT_A7_P_LHS
00001CC4  43F9 0000424A           1048      LEA     DISPLAY_A7_P, A1
00001CCA  103C 000E               1049      MOVE.B  #14, D0
00001CCE  4E4F                    1050      TRAP    #15
00001CD0  4EB8 15BE               1051      JSR     PRINT_COMMA
00001CD4  4EF9 000037B0           1052      JMP     CHECK_DECODE_RHS
00001CDA  4EF8 1222               1053      JMP     PRINT_LOGIC
00001CDE                          1054  PRINT_A0_PP_LHS
00001CDE  43F9 0000424F           1055      LEA     DISPLAY_A0_PP, A1
00001CE4  103C 000E               1056      MOVE.B  #14, D0
00001CE8  4E4F                    1057      TRAP    #15
00001CEA  4EB8 15BE               1058      JSR     PRINT_COMMA
00001CEE  4EF9 000037B0           1059      JMP     CHECK_DECODE_RHS
00001CF4  4EF8 1222               1060      JMP     PRINT_LOGIC
00001CF8                          1061  PRINT_A1_PP_LHS
00001CF8  43F9 00004255           1062      LEA     DISPLAY_A1_PP, A1
00001CFE  103C 000E               1063      MOVE.B  #14, D0
00001D02  4E4F                    1064      TRAP    #15
00001D04  4EB8 15BE               1065      JSR     PRINT_COMMA
00001D08  4EF9 000037B0           1066      JMP     CHECK_DECODE_RHS
00001D0E  4EF8 1222               1067      JMP     PRINT_LOGIC
00001D12                          1068  PRINT_A2_PP_LHS
00001D12  43F9 0000425B           1069      LEA     DISPLAY_A2_PP, A1
00001D18  103C 000E               1070      MOVE.B  #14, D0
00001D1C  4E4F                    1071      TRAP    #15
00001D1E  4EB8 15BE               1072      JSR     PRINT_COMMA
00001D22  4EF9 000037B0           1073      JMP     CHECK_DECODE_RHS
00001D28  4EF8 1222               1074      JMP     PRINT_LOGIC
00001D2C                          1075  PRINT_A3_PP_LHS
00001D2C  43F9 00004261           1076      LEA     DISPLAY_A3_PP, A1
00001D32  103C 000E               1077      MOVE.B  #14, D0
00001D36  4E4F                    1078      TRAP    #15
00001D38  4EB8 15BE               1079      JSR     PRINT_COMMA
00001D3C  4EF9 000037B0           1080      JMP     CHECK_DECODE_RHS
00001D42  4EF8 1222               1081      JMP     PRINT_LOGIC
00001D46                          1082  PRINT_A4_PP_LHS
00001D46  43F9 00004267           1083      LEA     DISPLAY_A4_PP, A1
00001D4C  103C 000E               1084      MOVE.B  #14, D0
00001D50  4E4F                    1085      TRAP    #15
00001D52  4EB8 15BE               1086      JSR     PRINT_COMMA
00001D56  4EF9 000037B0           1087      JMP     CHECK_DECODE_RHS
00001D5C  4EF8 1222               1088      JMP     PRINT_LOGIC
00001D60                          1089  PRINT_A5_PP_LHS
00001D60  43F9 0000426D           1090      LEA     DISPLAY_A5_PP, A1
00001D66  103C 000E               1091      MOVE.B  #14, D0
00001D6A  4E4F                    1092      TRAP    #15
00001D6C  4EB8 15BE               1093      JSR     PRINT_COMMA
00001D70  4EF9 000037B0           1094      JMP     CHECK_DECODE_RHS
00001D76  4EF8 1222               1095      JMP     PRINT_LOGIC
00001D7A                          1096  PRINT_A6_PP_LHS
00001D7A  43F9 00004273           1097      LEA     DISPLAY_A6_PP, A1
00001D80  103C 000E               1098      MOVE.B  #14, D0
00001D84  4E4F                    1099      TRAP    #15
00001D86  4EB8 15BE               1100      JSR     PRINT_COMMA
00001D8A  4EF9 000037B0           1101      JMP     CHECK_DECODE_RHS
00001D90  4EF8 1222               1102      JMP     PRINT_LOGIC
00001D94                          1103  PRINT_A7_PP_LHS
00001D94  43F9 00004279           1104      LEA     DISPLAY_A7_PP, A1
00001D9A  103C 000E               1105      MOVE.B  #14, D0
00001D9E  4E4F                    1106      TRAP    #15
00001DA0  4EB8 15BE               1107      JSR     PRINT_COMMA
00001DA4  4EF9 000037B0           1108      JMP     CHECK_DECODE_RHS
00001DAA  4EF8 1222               1109      JMP     PRINT_LOGIC
00001DAE                          1110  PRINT_A0_PM_LHS
00001DAE  43F9 0000427F           1111      LEA     DISPLAY_A0_PM, A1
00001DB4  103C 000E               1112      MOVE.B  #14, D0
00001DB8  4E4F                    1113      TRAP    #15
00001DBA  4EB8 15BE               1114      JSR     PRINT_COMMA
00001DBE  4EF9 000037B0           1115      JMP     CHECK_DECODE_RHS
00001DC4  4EF8 1222               1116      JMP     PRINT_LOGIC
00001DC8                          1117  PRINT_A1_PM_LHS
00001DC8  43F9 00004285           1118      LEA     DISPLAY_A1_PM, A1
00001DCE  103C 000E               1119      MOVE.B  #14, D0
00001DD2  4E4F                    1120      TRAP    #15
00001DD4  4EB8 15BE               1121      JSR     PRINT_COMMA
00001DD8  4EF9 000037B0           1122      JMP     CHECK_DECODE_RHS
00001DDE  4EF8 1222               1123      JMP     PRINT_LOGIC
00001DE2                          1124  PRINT_A2_PM_LHS
00001DE2  43F9 0000428B           1125      LEA     DISPLAY_A2_PM, A1
00001DE8  103C 000E               1126      MOVE.B  #14, D0
00001DEC  4E4F                    1127      TRAP    #15
00001DEE  4EB8 15BE               1128      JSR     PRINT_COMMA
00001DF2  4EF9 000037B0           1129      JMP     CHECK_DECODE_RHS
00001DF8  4EF8 1222               1130      JMP     PRINT_LOGIC
00001DFC                          1131  PRINT_A3_PM_LHS
00001DFC  43F9 00004291           1132      LEA     DISPLAY_A3_PM, A1
00001E02  103C 000E               1133      MOVE.B  #14, D0
00001E06  4E4F                    1134      TRAP    #15
00001E08  4EB8 15BE               1135      JSR     PRINT_COMMA
00001E0C  4EF9 000037B0           1136      JMP     CHECK_DECODE_RHS
00001E12  4EF8 1222               1137      JMP     PRINT_LOGIC
00001E16                          1138  PRINT_A4_PM_LHS
00001E16  43F9 00004297           1139      LEA     DISPLAY_A4_PM, A1
00001E1C  103C 000E               1140      MOVE.B  #14, D0
00001E20  4E4F                    1141      TRAP    #15
00001E22  4EB8 15BE               1142      JSR     PRINT_COMMA
00001E26  4EF9 000037B0           1143      JMP     CHECK_DECODE_RHS
00001E2C  4EF8 1222               1144      JMP     PRINT_LOGIC
00001E30                          1145  PRINT_A5_PM_LHS
00001E30  43F9 0000429D           1146      LEA     DISPLAY_A5_PM, A1
00001E36  103C 000E               1147      MOVE.B  #14, D0
00001E3A  4E4F                    1148      TRAP    #15
00001E3C  4EB8 15BE               1149      JSR     PRINT_COMMA
00001E40  4EF9 000037B0           1150      JMP     CHECK_DECODE_RHS
00001E46  4EF8 1222               1151      JMP     PRINT_LOGIC
00001E4A                          1152  PRINT_A6_PM_LHS
00001E4A  43F9 000042A3           1153      LEA     DISPLAY_A6_PM, A1
00001E50  103C 000E               1154      MOVE.B  #14, D0
00001E54  4E4F                    1155      TRAP    #15
00001E56  4EB8 15BE               1156      JSR     PRINT_COMMA
00001E5A  4EF9 000037B0           1157      JMP     CHECK_DECODE_RHS
00001E60  4EF8 1222               1158      JMP     PRINT_LOGIC
00001E64                          1159  PRINT_A7_PM_LHS
00001E64  43F9 000042A9           1160      LEA     DISPLAY_A7_PM, A1
00001E6A  103C 000E               1161      MOVE.B  #14, D0
00001E6E  4E4F                    1162      TRAP    #15
00001E70  4EB8 15BE               1163      JSR     PRINT_COMMA
00001E74  4EF9 000037B0           1164      JMP     CHECK_DECODE_RHS
00001E7A  4EF8 1222               1165      JMP     PRINT_LOGIC
00001E7E                          1166  PRINT_0_LHS
00001E7E  43F9 000042AF           1167      LEA     DISPLAY_0, A1
00001E84  103C 000E               1168      MOVE.B  #14, D0
00001E88  4E4F                    1169      TRAP    #15
00001E8A  4EB8 15BE               1170      JSR     PRINT_COMMA
00001E8E  4EF9 00002F48           1171      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001E94  4EF8 1222               1172      JMP     PRINT_LOGIC
00001E98                          1173  PRINT_1_LHS
00001E98  43F9 000042B1           1174      LEA     DISPLAY_1, A1
00001E9E  103C 000E               1175      MOVE.B  #14, D0
00001EA2  4E4F                    1176      TRAP    #15
00001EA4  4EB8 15BE               1177      JSR     PRINT_COMMA
00001EA8  4EF9 00002F48           1178      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001EAE  4EF8 1222               1179      JMP     PRINT_LOGIC
00001EB2                          1180  PRINT_2_LHS
00001EB2  43F9 000042B3           1181      LEA     DISPLAY_2, A1
00001EB8  103C 000E               1182      MOVE.B  #14, D0
00001EBC  4E4F                    1183      TRAP    #15
00001EBE  4EB8 15BE               1184      JSR     PRINT_COMMA
00001EC2  4EF9 00002F48           1185      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001EC8  4EF8 1222               1186      JMP     PRINT_LOGIC
00001ECC                          1187  PRINT_3_LHS
00001ECC  43F9 000042B5           1188      LEA     DISPLAY_3, A1
00001ED2  103C 000E               1189      MOVE.B  #14, D0
00001ED6  4E4F                    1190      TRAP    #15
00001ED8  4EB8 15BE               1191      JSR     PRINT_COMMA
00001EDC  4EF9 00002F48           1192      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001EE2  4EF8 1222               1193      JMP     PRINT_LOGIC
00001EE6                          1194  PRINT_4_LHS
00001EE6  43F9 000042B7           1195      LEA     DISPLAY_4, A1
00001EEC  103C 000E               1196      MOVE.B  #14, D0
00001EF0  4E4F                    1197      TRAP    #15
00001EF2  4EB8 15BE               1198      JSR     PRINT_COMMA
00001EF6  4EF9 00002F48           1199      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001EFC  4EF8 1222               1200      JMP     PRINT_LOGIC
00001F00                          1201  PRINT_5_LHS
00001F00  43F9 000042B9           1202      LEA     DISPLAY_5, A1
00001F06  103C 000E               1203      MOVE.B  #14, D0
00001F0A  4E4F                    1204      TRAP    #15
00001F0C  43F9 00003F96           1205      LEA     DISPLAY_COMMA, A1
00001F12  4EB8 15BE               1206      JSR     PRINT_COMMA
00001F16  4EF9 00002F48           1207      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001F1C  4EF8 1222               1208      JMP     PRINT_LOGIC
00001F20                          1209  PRINT_6_LHS
00001F20  43F9 000042BB           1210      LEA     DISPLAY_6, A1
00001F26  103C 000E               1211      MOVE.B  #14, D0
00001F2A  4E4F                    1212      TRAP    #15
00001F2C  4EB8 15BE               1213      JSR     PRINT_COMMA
00001F30  4EF9 00002F48           1214      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001F36  4EF8 1222               1215      JMP     PRINT_LOGIC
00001F3A                          1216  PRINT_7_LHS
00001F3A  43F9 000042BD           1217      LEA     DISPLAY_7, A1
00001F40  103C 000E               1218      MOVE.B  #14, D0
00001F44  4E4F                    1219      TRAP    #15
00001F46  4EB8 15BE               1220      JSR     PRINT_COMMA
00001F4A  4EF9 00002F48           1221      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001F50  4EF8 1222               1222      JMP     PRINT_LOGIC
00001F54                          1223  PRINT_8_LHS
00001F54  43F9 000042BF           1224      LEA     DISPLAY_8, A1
00001F5A  103C 000E               1225      MOVE.B  #14, D0
00001F5E  4E4F                    1226      TRAP    #15
00001F60  4EB8 15BE               1227      JSR     PRINT_COMMA
00001F64  4EF9 00002F48           1228      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001F6A  4EF8 1222               1229      JMP     PRINT_LOGIC
00001F6E                          1230  PRINT_MOVEM_RHS_D0
00001F6E  43F9 000041F7           1231      LEA     DISPLAY_D0, A1
00001F74  103C 000E               1232      MOVE.B  #14, D0
00001F78  4E4F                    1233      TRAP    #15
00001F7A  0C39 0001 00006076      1234      CMP.B   #1,IS_MEM_TO_REG
00001F82  6700 05FE               1235      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00001F86  4EF9 00002528           1236      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00001F8C  4EF8 1222               1237      JMP     PRINT_LOGIC
00001F90                          1238  PRINT_MOVEM_RHS_D1
00001F90  43F9 000041FA           1239      LEA     DISPLAY_D1, A1
00001F96  103C 000E               1240      MOVE.B  #14, D0
00001F9A  4E4F                    1241      TRAP    #15
00001F9C  0C39 0001 00006076      1242      CMP.B   #1,IS_MEM_TO_REG
00001FA4  6700 05DC               1243      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00001FA8  4EF9 00002528           1244      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00001FAE  4EF8 1222               1245      JMP     PRINT_LOGIC
00001FB2                          1246  PRINT_MOVEM_RHS_D2
00001FB2  43F9 000041FD           1247      LEA     DISPLAY_D2, A1
00001FB8  103C 000E               1248      MOVE.B  #14, D0
00001FBC  4E4F                    1249      TRAP    #15
00001FBE  0C39 0001 00006076      1250      CMP.B   #1,IS_MEM_TO_REG
00001FC6  6700 05BA               1251      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00001FCA  4EF9 00002528           1252      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00001FD0  4EF8 1222               1253      JMP     PRINT_LOGIC 
00001FD4                          1254  PRINT_MOVEM_RHS_D3
00001FD4  43F9 00004200           1255      LEA     DISPLAY_D3, A1
00001FDA  103C 000E               1256      MOVE.B  #14, D0
00001FDE  4E4F                    1257      TRAP    #15
00001FE0  0C39 0001 00006076      1258      CMP.B   #1,IS_MEM_TO_REG
00001FE8  6700 0598               1259      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00001FEC  4EF9 00002528           1260      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00001FF2  4EF8 1222               1261      JMP     PRINT_LOGIC
00001FF6                          1262  PRINT_MOVEM_RHS_D4
00001FF6  43F9 00004203           1263      LEA     DISPLAY_D4, A1
00001FFC  103C 000E               1264      MOVE.B  #14, D0
00002000  4E4F                    1265      TRAP    #15
00002002  0C39 0001 00006076      1266      CMP.B   #1,IS_MEM_TO_REG
0000200A  6700 0576               1267      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
0000200E  4EF9 00002528           1268      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00002014  4EF8 1222               1269      JMP     PRINT_LOGIC
00002018                          1270  PRINT_MOVEM_RHS_D5
00002018  43F9 00004206           1271      LEA     DISPLAY_D5, A1
0000201E  103C 000E               1272      MOVE.B  #14, D0
00002022  4E4F                    1273      TRAP    #15
00002024  0C39 0001 00006076      1274      CMP.B   #1,IS_MEM_TO_REG
0000202C  6700 0554               1275      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00002030  4EF9 00002528           1276      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00002036  4EF8 1222               1277      JMP     PRINT_LOGIC
0000203A                          1278  PRINT_MOVEM_RHS_D6
0000203A  43F9 00004209           1279      LEA     DISPLAY_D6, A1
00002040  103C 000E               1280      MOVE.B  #14, D0
00002044  4E4F                    1281      TRAP    #15
00002046  0C39 0001 00006076      1282      CMP.B   #1,IS_MEM_TO_REG
0000204E  6700 0532               1283      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00002052  4EF9 00002528           1284      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00002058  4EF8 1222               1285      JMP     PRINT_LOGIC
0000205C                          1286  PRINT_MOVEM_RHS_D7
0000205C  43F9 0000420C           1287      LEA     DISPLAY_D7, A1
00002062  103C 000E               1288      MOVE.B  #14, D0
00002066  4E4F                    1289      TRAP    #15
00002068  0C39 0001 00006076      1290      CMP.B   #1,IS_MEM_TO_REG
00002070  6700 0510               1291      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00002074  4EF9 00002528           1292      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
0000207A  4EF8 1222               1293      JMP     PRINT_LOGIC
0000207E                          1294  PRINT_MOVEM_RHS_A0
0000207E  43F9 0000420F           1295      LEA     DISPLAY_A0, A1
00002084  103C 000E               1296      MOVE.B  #14, D0
00002088  4E4F                    1297      TRAP    #15
0000208A  0C39 0001 00006076      1298      CMP.B   #1,IS_MEM_TO_REG
00002092  6700 04EE               1299      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00002096  4EF9 00002528           1300      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
0000209C  4EF8 1222               1301      JMP     PRINT_LOGIC
000020A0                          1302  PRINT_MOVEM_RHS_A1
000020A0  43F9 00004212           1303      LEA     DISPLAY_A1, A1
000020A6  103C 000E               1304      MOVE.B  #14, D0
000020AA  4E4F                    1305      TRAP    #15
000020AC  0C39 0001 00006076      1306      CMP.B   #1,IS_MEM_TO_REG
000020B4  6700 04CC               1307      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
000020B8  4EF9 00002528           1308      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
000020BE  4EF8 1222               1309      JMP     PRINT_LOGIC
000020C2                          1310  PRINT_MOVEM_RHS_A2
000020C2  43F9 00004215           1311      LEA     DISPLAY_A2, A1
000020C8  103C 000E               1312      MOVE.B  #14, D0
000020CC  4E4F                    1313      TRAP    #15
000020CE  0C39 0001 00006076      1314      CMP.B   #1,IS_MEM_TO_REG
000020D6  6700 04AA               1315      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
000020DA  4EF9 00002528           1316      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
000020E0  4EF8 1222               1317      JMP     PRINT_LOGIC
000020E4                          1318  PRINT_MOVEM_RHS_A3
000020E4  43F9 00004218           1319      LEA     DISPLAY_A3, A1
000020EA  103C 000E               1320      MOVE.B  #14, D0
000020EE  4E4F                    1321      TRAP    #15
000020F0  0C39 0001 00006076      1322      CMP.B   #1,IS_MEM_TO_REG
000020F8  6700 0488               1323      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
000020FC  4EF9 00002528           1324      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00002102  4EF8 1222               1325      JMP     PRINT_LOGIC
00002106                          1326  PRINT_MOVEM_RHS_A4
00002106  43F9 0000421B           1327      LEA     DISPLAY_A4, A1
0000210C  103C 000E               1328      MOVE.B  #14, D0
00002110  4E4F                    1329      TRAP    #15
00002112  0C39 0001 00006076      1330      CMP.B   #1,IS_MEM_TO_REG
0000211A  6700 0466               1331      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
0000211E  4EF9 00002528           1332      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00002124  4EF8 1222               1333      JMP     PRINT_LOGIC
00002128                          1334  PRINT_MOVEM_RHS_A5
00002128  43F9 0000421E           1335      LEA     DISPLAY_A5, A1
0000212E  103C 000E               1336      MOVE.B  #14, D0
00002132  4E4F                    1337      TRAP    #15
00002134  0C39 0001 00006076      1338      CMP.B   #1,IS_MEM_TO_REG
0000213C  6700 0444               1339      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00002140  4EF9 00002528           1340      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00002146  4EF8 1222               1341      JMP     PRINT_LOGIC
0000214A                          1342  PRINT_MOVEM_RHS_A6
0000214A  43F9 00004221           1343      LEA     DISPLAY_A6, A1
00002150  103C 000E               1344      MOVE.B  #14, D0
00002154  4E4F                    1345      TRAP    #15
00002156  0C39 0001 00006076      1346      CMP.B   #1,IS_MEM_TO_REG
0000215E  6700 0422               1347      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00002162  4EF9 00002528           1348      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00002168  4EF8 1222               1349      JMP     PRINT_LOGIC
0000216C                          1350  PRINT_MOVEM_RHS_A7
0000216C  43F9 00004224           1351      LEA     DISPLAY_A7, A1
00002172  103C 000E               1352      MOVE.B  #14, D0
00002176  4E4F                    1353      TRAP    #15
00002178  0C39 0001 00006076      1354      CMP.B   #1,IS_MEM_TO_REG
00002180  6700 0400               1355      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00002184  4EF9 00002528           1356      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
0000218A  4EF8 1222               1357      JMP     PRINT_LOGIC
0000218A  4EF8 1222               1358  -------------------- end include --------------------
0000218E                          1359      INCLUDE         'JKR_GET_LOGIC_W16.X68'
0000218E                          1360  GET_REGISTER_BITS
0000218E  3407                    1361      MOVE.W  D7, D2
00002190  1A3C 0004               1362      MOVE.B  #SHIFT_4_BITS, D5       
00002194  EB6A                    1363      LSL.W   D5, D2                  
00002196  1A3C 000D               1364      MOVE.B  #SHIFT_13_BITS, D5
0000219A  EA6A                    1365      LSR.W   D5, D2                  Isolate bit 9 to 11 for Register
0000219C  4E75                    1366      RTS                             Note: For MOVE, this is DST_REG
0000219E                          1367  GET_REGISTER_BITS_0TO2
0000219E  3407                    1368      MOVE.W  D7, D2
000021A0  1A3C 000D               1369      MOVE.B  #SHIFT_13_BITS, D5      
000021A4  EB6A                    1370      LSL.W   D5, D2                  Left shift 13 bits
000021A6  1A3C 000D               1371      MOVE.B  #SHIFT_13_BITS, D5
000021AA  EA6A                    1372      LSR.W   D5, D2                  Isolate bit 0 to 2 (3 bits) for Register
000021AC  4E75                    1373      RTS
000021AE                          1374  GET_OPMODE_BITS
000021AE  3407                    1375      MOVE.W  D7, D2
000021B0  1A3C 0007               1376      MOVE.B  #SHIFT_7_BITS, D5       
000021B4  EB6A                    1377      LSL.W   D5, D2                  
000021B6  1A3C 000D               1378      MOVE.B  #SHIFT_13_BITS, D5
000021BA  EA6A                    1379      LSR.W   D5, D2                  Isolate bit 6 to 8 for Opmode
000021BC  4E75                    1380      RTS                             Note: For MOVE, this is DST_MODE
000021BE                          1381  GET_EAMODE_BITS
000021BE  3407                    1382      MOVE.W  D7, D2
000021C0  1A3C 000A               1383      MOVE.B  #SHIFT_10_BITS, D5
000021C4  EB6A                    1384      LSL.W   D5, D2
000021C6  1A3C 000D               1385      MOVE.B  #SHIFT_13_BITS, D5
000021CA  EA6A                    1386      LSR.W   D5, D2                  Isolate bit 3 to 5 for EA_Mode
000021CC  4E75                    1387      RTS                             Note: For MOVE, this is SRC_MODE
000021CE                          1388  GET_EAREG_BITS
000021CE  3407                    1389      MOVE.W  D7, D2
000021D0  1A3C 000D               1390      MOVE.B  #SHIFT_13_BITS,D5
000021D4  EB6A                    1391      LSL.W   D5, D2
000021D6  EA6A                    1392      LSR.W   D5, D2                  Isolate bit 0 to 2 for EA_Register
000021D8  4E75                    1393      RTS                             Note: For MOVE, this is SRC_REG
000021DA                          1394  GET_BCC_BITS
000021DA  3407                    1395      MOVE.W  D7, D2
000021DC  E94A                    1396      LSL.W   #4, D2
000021DE  1A3C 000C               1397      MOVE.B  #SHIFT_12_BITS,D5
000021E2  EA6A                    1398      LSR.W   D5, D2
000021E4  4E75                    1399      RTS
000021E6                          1400  GET_CLR_BITS
000021E6  3407                    1401      MOVE.W  D7, D2
000021E8  E94A                    1402      LSL.W   #4, D2
000021EA  1A3C 000A               1403      MOVE.B  #SHIFT_10_BITS,D5
000021EE  EA6A                    1404      LSR.W   D5, D2
000021F0  4E75                    1405      RTS
000021F2                          1406  GET_JSR_BITS
000021F2  3407                    1407      MOVE.W  D7, D2
000021F4  E94A                    1408      LSL.W   #4, D2
000021F6  1A3C 000A               1409      MOVE.B  #SHIFT_10_BITS,D5
000021FA  EA6A                    1410      LSR.W   D5, D2
000021FC  4E75                    1411      RTS
000021FE                          1412  GET_LEA_BITS
000021FE  3407                    1413      MOVE.W  D7, D2
00002200  EF4A                    1414      LSL.W   #SHIFT_7_BITS, D2
00002202  1A3C 000D               1415      MOVE.B  #SHIFT_13_BITS, D5
00002206  EA6A                    1416      LSR.W   D5, D2
00002208  4E75                    1417      RTS
0000220A                          1418  GET_ADDI_BITS
0000220A  3407                    1419      MOVE.W  D7, D2
0000220C  EC4A                    1420      LSR.W   #SHIFT_6_BITS, D2       Isolates size bits of ADDI (7-6)
0000220E  1A3C 0006               1421      MOVE.B  #SHIFT_6_BITS, D5      
00002212  EB6A                    1422      LSL.W   D5, D2                  
00002214  4E75                    1423      RTS
00002216                          1424  GET_MOVEQ_BITS
00002216  3407                    1425      MOVE.W  D7, D2
00002218  1A3C 0007               1426      MOVE.B  #SHIFT_7_BITS, D5
0000221C  EB6A                    1427      LSL.W   D5, D2
0000221E  1A3C 000F               1428      MOVE.B  #SHIFT_15_BITS, D5
00002222  EA6A                    1429      LSR.W   D5, D2
00002224  4E75                    1430      RTS
00002226                          1431  GET_MOVEM_BITS
00002226  3407                    1432      MOVE.W  D7, D2
00002228  1A3C 0006               1433      MOVE.B  #SHIFT_6_BITS, D5
0000222C  EB6A                    1434      LSL.W   D5, D2
0000222E  1A3C 000C               1435      MOVE.B  #SHIFT_12_BITS, D5
00002232  EA6A                    1436      LSR.W   D5, D2
00002234  4E75                    1437      RTS
00002236                          1438  GET_MOVEM_DR_BITS
00002236  3407                    1439      MOVE.W  D7, D2
00002238  1A3C 0004               1440      MOVE.B  #SHIFT_4_BITS, D5
0000223C  EB6A                    1441      LSL.W   D5, D2
0000223E  1A3C 000E               1442      MOVE.B  #SHIFT_14_BITS, D5
00002242  EA6A                    1443      LSR.W   D5, D2
00002244  4E75                    1444      RTS
00002246                          1445  GET_DATA_8BITS
00002246  3407                    1446      MOVE.W  D7, D2
00002248  1A3C 0008               1447      MOVE.B  #SHIFT_8_BITS, D5
0000224C  EB6A                    1448      LSL.W   D5, D2
0000224E  1A3C 0008               1449      MOVE.B  #SHIFT_8_BITS, D5
00002252  EA6A                    1450      LSR.W   D5, D2
00002254  4E75                    1451      RTS
00002256                          1452  GET_MULS_DIVU_BITS
00002256  3407                    1453      MOVE.W  D7, D2
00002258  1A3C 0007               1454      MOVE.B  #SHIFT_7_BITS, D5
0000225C  EB6A                    1455      LSL.W   D5, D2
0000225E  1A3C 000D               1456      MOVE.B  #SHIFT_13_BITS, D5
00002262  EA6A                    1457      LSR.W   D5, D2
00002264  4E75                    1458      RTS
00002266                          1459  GET_SHIFT_SIZE_BITS
00002266  3407                    1460      MOVE.W  D7, D2
00002268  1A3C 0008               1461      MOVE.B  #SHIFT_8_BITS, D5
0000226C  EB6A                    1462      LSL.W   D5, D2
0000226E  1A3C 000E               1463      MOVE.B  #SHIFT_14_BITS, D5
00002272  EA6A                    1464      LSR.W   D5, D2
00002274  4E75                    1465      RTS
00002276                          1466  GET_SHIFT_RS_BITS
00002276  3407                    1467      MOVE.W  D7, D2
00002278  1A3C 000B               1468      MOVE.B  #SHIFT_11_BITS, D5
0000227C  EB6A                    1469      LSL.W   D5, D2
0000227E  1A3C 000E               1470      MOVE.B  #SHIFT_14_BITS, D5
00002282  EA6A                    1471      LSR.W   D5, D2
00002284  4E75                    1472      RTS
00002286                          1473  GET_SHIFT_DIRECTION_BITS
00002286  3407                    1474      MOVE.W  D7, D2
00002288  1A3C 0007               1475      MOVE.B  #SHIFT_7_BITS, D5
0000228C  EB6A                    1476      LSL.W   D5, D2
0000228E  1A3C 000F               1477      MOVE.B  #SHIFT_15_BITS, D5
00002292  EA6A                    1478      LSR.W   D5, D2
00002294  4E75                    1479      RTS
00002296                          1480  GET_SHIFT_IR_BITS
00002296  3407                    1481      MOVE.W  D7, D2
00002298  1A3C 000A               1482      MOVE.B  #SHIFT_10_BITS, D5
0000229C  EB6A                    1483      LSL.W   D5, D2
0000229E  1A3C 000F               1484      MOVE.B  #SHIFT_15_BITS, D5
000022A2  EA6A                    1485      LSR.W   D5, D2
000022A4  4E75                    1486      RTS
000022A6                          1487  GET_SHIFT_CR_NUM_BITS
000022A6  3407                    1488      MOVE.W  D7, D2
000022A8  1A3C 0004               1489      MOVE.B  #SHIFT_4_BITS, D5
000022AC  EB6A                    1490      LSL.W   D5, D2
000022AE  1A3C 000D               1491      MOVE.B  #SHIFT_13_BITS, D5
000022B2  EA6A                    1492      LSR.W   D5, D2
000022B4  4E75                    1493      RTS
000022B6                          1494  GET_IR_BITS
000022B6  4EB8 2296               1495      JSR     GET_SHIFT_IR_BITS
000022BA  B43C 0000               1496      CMP.B   #0,D2
000022BE  6700 06A2               1497      BEQ     DECODE_IMMEDIATE_NUM
000022C2  B43C 0001               1498      CMP.B   #1,D2
000022C6  6700 06AC               1499      BEQ     DECODE_REGISTER_NUM
000022CA  4EF8 1222               1500      JMP     PRINT_LOGIC
000022CA  4EF8 1222               1501  -------------------- end include --------------------
000022CE                          1502      INCLUDE         'JKR_DECODE_LOGIC_W16.X68'
000022CE                          1503  DECODE_NOP
000022CE  43F9 00003FD1           1504      LEA     DISPLAY_NOP, A1
000022D4  103C 000D               1505      MOVE.B  #13, D0
000022D8  4E4F                    1506      TRAP    #15
000022DA  4EF8 1222               1507      JMP     PRINT_LOGIC
000022DE                          1508  DECODE_STOP
000022DE  43F9 00003FDC           1509      LEA     DISPLAY_STOP, A1
000022E4  103C 000E               1510      MOVE.B  #14, D0
000022E8  4E4F                    1511      TRAP    #15
000022EA  13FC 0001 00006050      1512      MOVE.B  #1, IS_STOP
000022F2  4EF9 000037B0           1513      JMP     CHECK_DECODE_RHS
000022F8  4EF8 1222               1514      JMP     PRINT_LOGIC
000022FC                          1515  DECODE_JSR
000022FC  43F9 00003FC6           1516      LEA     DISPLAY_JSR, A1
00002302  103C 000E               1517      MOVE.B  #14, D0
00002306  4E4F                    1518      TRAP    #15
00002308  4EB8 21BE               1519      JSR     GET_EAMODE_BITS
0000230C  B43C 0002               1520      CMP.B   #2,D2
00002310  6700 12FC               1521      BEQ     DECODE_ADDRP_REG_ONE_OPERAND
00002314  B43C 0007               1522      CMP.B   #7,D2
00002318  6700 13CC               1523      BEQ     DECODE_EA_REG_ONE_OPERAND
0000231C  4EF8 1222               1524      JMP     PRINT_LOGIC
00002320                          1525  DECODE_LEA
00002320  43F9 00003FB0           1526      LEA     DISPLAY_LEA, A1
00002326  103C 000E               1527      MOVE.B  #14, D0
0000232A  4E4F                    1528      TRAP    #15
0000232C  13FC 0001 00006038      1529      MOVE.B  #1, IS_LEA
00002334  4EB8 21BE               1530      JSR     GET_EAMODE_BITS
00002338  B43C 0002               1531      CMP.B   #2,D2
0000233C  6700 108C               1532      BEQ     DECODE_ADDRP_REG_LHS
00002340  B43C 0007               1533      CMP.B   #7,D2
00002344  6700 115C               1534      BEQ     DECODE_EA_REG_LHS
00002348  4EF8 1222               1535      JMP     PRINT_LOGIC
0000234C                          1536  DECODE_RTS
0000234C  43F9 00003FBB           1537      LEA     DISPLAY_RTS, A1
00002352  103C 000D               1538      MOVE.B  #13, D0
00002356  4E4F                    1539      TRAP    #15
00002358  4EF8 1222               1540      JMP     PRINT_LOGIC
0000235C                          1541  DECODE_CLRB
0000235C  43F9 00003FF4           1542      LEA     DISPLAY_CLRB, A1
00002362  6000 0012               1543      BRA     DECODE_CLR_DISPLAY
00002366                          1544      
00002366                          1545  DECODE_CLRW
00002366  43F9 00004001           1546      LEA     DISPLAY_CLRW, A1
0000236C  6000 0008               1547      BRA     DECODE_CLR_DISPLAY
00002370                          1548      
00002370                          1549  DECODE_CLRL
00002370  43F9 0000400E           1550      LEA     DISPLAY_CLRL, A1
00002376                          1551  
00002376                          1552  DECODE_CLR_DISPLAY
00002376  103C 000E               1553      MOVE.B  #14, D0
0000237A  4E4F                    1554      TRAP    #15
0000237C  4EB8 21BE               1555      JSR     GET_EAMODE_BITS
00002380  B43C 0000               1556      CMP.B   #0,D2
00002384  6700 11F8               1557      BEQ     DECODE_DATA_REG_ONE_OPERAND
00002388  B43C 0002               1558      CMP.B   #2,D2
0000238C  6700 1280               1559      BEQ     DECODE_ADDRP_REG_ONE_OPERAND
00002390  B43C 0003               1560      CMP.B   #3,D2
00002394  6700 12C0               1561      BEQ     DECODE_ADDRPLUS_REG_ONE_OPERAND
00002398  B43C 0004               1562      CMP.B   #4,D2
0000239C  6700 1300               1563      BEQ     DECODE_MINUSADDR_REG_ONE_OPERAND
000023A0  B43C 0007               1564      CMP.B   #7,D2
000023A4  6700 1340               1565      BEQ     DECODE_EA_REG_ONE_OPERAND
000023A8  4EF8 1222               1566      JMP     PRINT_LOGIC
000023AC                          1567  DECODE_CMPB
000023AC  43F9 0000416C           1568      LEA     DISPLAY_CMPB, A1
000023B2  103C 000E               1569      MOVE.B  #14, D0
000023B6  4E4F                    1570      TRAP    #15
000023B8  13FC 0001 00006030      1571      MOVE.B  #1, IS_CMP          Flag set to true for when decoding RHS
000023C0                          1572      
000023C0  4EB8 21BE               1573      JSR     GET_EAMODE_BITS
000023C4  B43C 0000               1574      CMP.B   #0, D2
000023C8  6700 0F70               1575      BEQ     DECODE_DATA_REG_LHS
000023CC  B43C 0002               1576      CMP.B   #2, D2
000023D0  6700 0FF8               1577      BEQ     DECODE_ADDRP_REG_LHS
000023D4  B43C 0003               1578      CMP.B   #3, D2
000023D8  6700 1038               1579      BEQ     DECODE_ADDRPLUS_REG_LHS
000023DC  B43C 0004               1580      CMP.B   #4, D2
000023E0  6700 1078               1581      BEQ     DECODE_MINUSADDR_REG_LHS
000023E4  B43C 0007               1582      CMP.B   #7, D2
000023E8  6700 10B8               1583      BEQ     DECODE_EA_REG_LHS
000023EC  4EF8 1222               1584      JMP     PRINT_LOGIC
000023F0                          1585  DECODE_CMPW
000023F0  43F9 00004179           1586      LEA     DISPLAY_CMPW, A1
000023F6  6000 0010               1587      BRA     DECODE_CMP_W_L_DISPLAY
000023FA                          1588      
000023FA                          1589  DECODE_CMPL
000023FA  43F9 00004186           1590      LEA     DISPLAY_CMPL, A1
00002400  13FC 0001 00006036      1591      MOVE.B  #1, IS_LONG         Flag set to true for when decoding IMDATA_L
00002408                          1592      
00002408                          1593  DECODE_CMP_W_L_DISPLAY
00002408  103C 000E               1594      MOVE.B  #14, D0
0000240C  4E4F                    1595      TRAP    #15
0000240E  13FC 0001 00006030      1596      MOVE.B  #1, IS_CMP          Flag set to true for when decoding RHS
00002416  4EB8 21BE               1597      JSR     GET_EAMODE_BITS
0000241A  B43C 0000               1598      CMP.B   #0, D2
0000241E  6700 0F1A               1599      BEQ     DECODE_DATA_REG_LHS
00002422  B43C 0001               1600      CMP.B   #1, D2
00002426  6700 0F5A               1601      BEQ     DECODE_ADDR_REG_LHS
0000242A  B43C 0002               1602      CMP.B   #2, D2
0000242E  6700 0F9A               1603      BEQ     DECODE_ADDRP_REG_LHS
00002432  B43C 0003               1604      CMP.B   #3, D2
00002436  6700 0FDA               1605      BEQ     DECODE_ADDRPLUS_REG_LHS
0000243A  B43C 0004               1606      CMP.B   #4, D2
0000243E  6700 101A               1607      BEQ     DECODE_MINUSADDR_REG_LHS
00002442  B43C 0007               1608      CMP.B   #7, D2
00002446  6700 105A               1609      BEQ     DECODE_EA_REG_LHS
0000244A  4EF8 1222               1610      JMP     PRINT_LOGIC
0000244E                          1611  DECODE_MOVEMW
0000244E  13FC 0001 00006048      1612      MOVE.B  #1, IS_MOVEM   
00002456  43F9 00004054           1613      LEA     DISPLAY_MOVEMW, A1
0000245C  6000 0010               1614      BRA     MOVEM_DIRECTION
00002460                          1615  
00002460                          1616  DECODE_MOVEML
00002460  13FC 0001 00006048      1617      MOVE.B  #1, IS_MOVEM   
00002468  43F9 00004063           1618      LEA     DISPLAY_MOVEML, A1
0000246E                          1619  
0000246E                          1620  MOVEM_DIRECTION
0000246E  103C 000E               1621      MOVE.B  #14, D0
00002472  4E4F                    1622      TRAP    #15
00002474  4EB8 2236               1623      JSR     GET_MOVEM_DR_BITS       Get MOVEM direction Bits
00002478  B47C 0003               1624      CMP.W   #3, D2                  IF match with 0011 bits, then Memory to Register 
0000247C  6700 004A               1625      BEQ     DECODE_MOVEM_MEM_TO_REG Decode MOVEM.M/L with Mem to Reg
00002480                          1626  
00002480                          1627  DECODE_MOVEM_REG_TO_MEM
00002480  13FC 0000 00006076      1628      MOVE.B  #0, IS_MEM_TO_REG       DIRECTION FLAG = 0, Register to Memory
00002488  4EB8 21BE               1629      JSR     GET_EAMODE_BITS         *Special <EA> check for -(An) before printing <LIST>
0000248C  B43C 0004               1630      CMP.B   #4, D2
00002490  6600 000C               1631      BNE     JUMP_FLAG_MINUSADDR
00002494  13FC 0001 00006080      1632      MOVE.B  #1, IS_MINUSADDR        *FLAG to indicate -(An) when bit 3 to 5 for EA_Mode is %0100(#4)
0000249C  4242                    1633      CLR     D2
0000249E                          1634      
0000249E                          1635  JUMP_FLAG_MINUSADDR 
0000249E  4EF9 0000250C           1636      JMP     DECODE_MOVEM_REGISTERS_LHS
000024A4                          1637  
000024A4                          1638  DECODE_MOVEM_EA_REG_RHS             *MOVEM  <LIST>,<EA>     *<EA> part  
000024A4  4EB8 15BE               1639      JSR     PRINT_COMMA
000024A8  4EB8 21BE               1640      JSR     GET_EAMODE_BITS
000024AC  B43C 0002               1641      CMP.B   #2, D2
000024B0  6700 115C               1642      BEQ     DECODE_ADDRP_REG_ONE_OPERAND    
000024B4  B43C 0004               1643      CMP.B   #4, D2
000024B8  6700 11E4               1644      BEQ     DECODE_MINUSADDR_REG_ONE_OPERAND
000024BC  B43C 0007               1645      CMP.B   #7, D2
000024C0  6700 002E               1646      BEQ     DECODE_MOVEM_EA_REG         
000024C4  4EF8 1222               1647      JMP     PRINT_LOGIC
000024C8                          1648      
000024C8                          1649  DECODE_MOVEM_MEM_TO_REG             *MOVEM  <EA>,<LIST>     *<EA> part
000024C8  13FC 0001 00006076      1650      MOVE.B  #1, IS_MEM_TO_REG       DIRECTION FLAG = 1, Memory to Register                                      
000024D0  4EB8 21BE               1651      JSR     GET_EAMODE_BITS
000024D4  B43C 0002               1652      CMP.B   #2, D2
000024D8  6700 0EF0               1653      BEQ     DECODE_ADDRP_REG_LHS    
000024DC  B43C 0003               1654      CMP.B   #3, D2
000024E0  6700 0F30               1655      BEQ     DECODE_ADDRPLUS_REG_LHS 
000024E4  B43C 0007               1656      CMP.B   #7, D2
000024E8  6700 0006               1657      BEQ     DECODE_MOVEM_EA_REG
000024EC  4EF8 1222               1658      JMP     PRINT_LOGIC     
000024F0                          1659  
000024F0                          1660  DECODE_MOVEM_EA_REG                 *Both MOVEM     *<EA> part
000024F0  13FC 0001 00006078      1661      MOVE.B  #1, IS_MOVEM_EA_REG
000024F8  4EB8 21CE               1662      JSR     GET_EAREG_BITS
000024FC  B43C 0000               1663      CMP.B   #0, D2                  (xxxx).W
00002500  6700 0158               1664      BEQ     DECODE_MOVEM_EA_WORD_LHS
00002504  B43C 0001               1665      CMP.B   #1, D2                  (xxxx).L
00002508  6700 01D2               1666      BEQ     DECODE_MOVEM_EA_LONG_LHS
0000250C                          1667  
0000250C                          1668  DECODE_MOVEM_REGISTERS_LHS          *MOVEM  <LIST>,<EA>     *<LIST> part    
0000250C                          1669  DECODE_MOVEM_REGISTERS_RHS          *MOVEM  <EA>,<LIST>     *<LIST> part
0000250C  4283                    1670      CLR.L   D3
0000250E  4284                    1671      CLR.L   D4
00002510  4285                    1672      CLR.L   D5
00002512  361D                    1673      MOVE.W  (A5)+,D3                VALUE
00002514  183C 0000               1674      MOVE.B  #0,D4                   COUNTER 0 to 15
00002518  1A3C 0000               1675      MOVE.B  #0,D5                   Indicate first hit of 1 bit
0000251C  0C39 0001 00006076      1676      CMP.B   #1,IS_MEM_TO_REG
00002524  6700 005C               1677      BEQ     MOVEM_REGISTER_RHS_LOOP
00002528                          1678      
00002528                          1679  MOVEM_REGISTER_LHS_LOOP             *MOVEM  <LIST>,<EA>     *<LIST> part    
00002528  B67C 0000               1680      CMP.W   #0,D3                   EXIT CONDITION
0000252C  6700 FF76               1681      BEQ     DECODE_MOVEM_EA_REG_RHS Move to <EA>
00002530  0803 0000               1682      BTST    #0,D3
00002534  6600 0014               1683      BNE     CHECK_SLASH_CONDITION_REG_TO_MEM    IF there is something in D3, print slash
00002538  0C39 0001 00006080      1684      CMP.B   #1,IS_MINUSADDR
00002540  6700 002E               1685      BEQ     JUMP_SLASH_SPECIAL_CASE
00002544  4EF9 00002564           1686      JMP     JUMP_SLASH_REG_TO_MEM
0000254A                          1687      
0000254A                          1688  CHECK_SLASH_CONDITION_REG_TO_MEM
0000254A  5205                    1689      ADD.B   #1,D5                   Add count to indicate if it hits any Dn or An
0000254C  BA3C 0001               1690      CMP.B   #1,D5                   
00002550  6F00 0012               1691      BLE     JUMP_SLASH_REG_TO_MEM   If there is only one Dn or An, then skip "/"
00002554  4EB8 15B0               1692      JSR     PRINT_SLASH
00002558  0C39 0001 00006080      1693      CMP.B   #1,IS_MINUSADDR
00002560  6700 0016               1694      BEQ     AFTER_SLASH_SPECIAL_CASE
00002564                          1695      
00002564                          1696  JUMP_SLASH_REG_TO_MEM
00002564  5204                    1697      ADDI.B  #1,D4                   Add count to hit until 16
00002566  E24B                    1698      LSR.W   #1,D3
00002568  6500 0048               1699      BCS     DISPLAY_MOVEM_REGISTER
0000256C  4EF8 2528               1700      JMP     MOVEM_REGISTER_LHS_LOOP     
00002570                          1701      
00002570                          1702  JUMP_SLASH_SPECIAL_CASE             *ONLY Case to print out Dn/An mask reversed order                       
00002570  E34B                    1703      LSL.W   #1,D3
00002572  5204                    1704      ADDI.B  #1,D4
00002574  E35B                    1705      ROL.W   #1,D3
00002576  65D2                    1706      BCS     CHECK_SLASH_CONDITION_REG_TO_MEM
00002578                          1707  AFTER_SLASH_SPECIAL_CASE
00002578  E24B                    1708      LSR.W   #1,D3   
0000257A  6500 0036               1709      BCS     DISPLAY_MOVEM_REGISTER
0000257E  4EF8 2528               1710      JMP     MOVEM_REGISTER_LHS_LOOP
00002582                          1711      
00002582                          1712  MOVEM_REGISTER_RHS_LOOP             *MOVEM  <EA>,<LIST>     *<LIST> part
00002582  B67C 0000               1713      CMP.W   #0,D3                   EXIT CONDITION
00002586  6700 00AE               1714      BEQ     ONE_STEP_BEFORE_PRINT_LOGIC
0000258A  0803 0000               1715      BTST    #0,D3
0000258E  6600 0008               1716      BNE     CHECK_SLASH_CONDITION   IF there is something in D3, print slash
00002592  4EF9 000025A6           1717      JMP     JUMP_SLASH
00002598                          1718      
00002598                          1719  CHECK_SLASH_CONDITION
00002598  5205                    1720      ADD.B   #1,D5                   Add count to indicate if it hits any Dn or An
0000259A  BA3C 0001               1721      CMP.B   #1,D5                   
0000259E  6F00 0006               1722      BLE     JUMP_SLASH              If there is only one Dn or An, then skip "/"
000025A2  4EB8 15B0               1723      JSR     PRINT_SLASH
000025A6                          1724      
000025A6                          1725  JUMP_SLASH
000025A6  5204                    1726      ADDI.B  #1,D4                   Add count to hit until 16
000025A8  E24B                    1727      LSR.W   #1,D3   
000025AA  6500 0006               1728      BCS     DISPLAY_MOVEM_REGISTER
000025AE  4EF8 2582               1729      JMP     MOVEM_REGISTER_RHS_LOOP
000025B2                          1730  
000025B2                          1731  DISPLAY_MOVEM_REGISTER              *<EA> on both case
000025B2  B87C 0001               1732      CMP.W   #1,D4
000025B6  6700 F9B6               1733      BEQ     PRINT_MOVEM_RHS_D0
000025BA  B87C 0002               1734      CMP.W   #2,D4
000025BE  6700 F9D0               1735      BEQ     PRINT_MOVEM_RHS_D1
000025C2  B87C 0003               1736      CMP.W   #3,D4
000025C6  6700 F9EA               1737      BEQ     PRINT_MOVEM_RHS_D2
000025CA  B87C 0004               1738      CMP.W   #4,D4
000025CE  6700 FA04               1739      BEQ     PRINT_MOVEM_RHS_D3
000025D2  B87C 0005               1740      CMP.W   #5,D4
000025D6  6700 FA1E               1741      BEQ     PRINT_MOVEM_RHS_D4
000025DA  B87C 0006               1742      CMP.W   #6,D4
000025DE  6700 FA38               1743      BEQ     PRINT_MOVEM_RHS_D5
000025E2  B87C 0007               1744      CMP.W   #7,D4
000025E6  6700 FA52               1745      BEQ     PRINT_MOVEM_RHS_D6
000025EA  B87C 0008               1746      CMP.W   #8,D4
000025EE  6700 FA6C               1747      BEQ     PRINT_MOVEM_RHS_D7
000025F2  B87C 0009               1748      CMP.W   #9,D4
000025F6  6700 FA86               1749      BEQ     PRINT_MOVEM_RHS_A0
000025FA  B87C 000A               1750      CMP.W   #10,D4
000025FE  6700 FAA0               1751      BEQ     PRINT_MOVEM_RHS_A1
00002602  B87C 000B               1752      CMP.W   #11,D4
00002606  6700 FABA               1753      BEQ     PRINT_MOVEM_RHS_A2
0000260A  B87C 000C               1754      CMP.W   #12,D4
0000260E  6700 FAD4               1755      BEQ     PRINT_MOVEM_RHS_A3
00002612  B87C 000D               1756      CMP.W   #13,D4
00002616  6700 FAEE               1757      BEQ     PRINT_MOVEM_RHS_A4  
0000261A  B87C 000E               1758      CMP.W   #14,D4
0000261E  6700 FB08               1759      BEQ     PRINT_MOVEM_RHS_A5
00002622  B87C 000F               1760      CMP.W   #15,D4
00002626  6700 FB22               1761      BEQ     PRINT_MOVEM_RHS_A6
0000262A  B87C 0010               1762      CMP.W   #16,D4
0000262E  6700 FB3C               1763      BEQ     PRINT_MOVEM_RHS_A7
00002632  4EF8 1222               1764      JMP     PRINT_LOGIC
00002636                          1765      
00002636                          1766  ONE_STEP_BEFORE_PRINT_LOGIC         *ONLY used in MOVEM <EA>,<LIST>
00002636  0C39 0001 00006078      1767      CMP.B   #1,  IS_MOVEM_EA_REG
0000263E  6600 0012               1768      BNE     SKIP_TO_PRINT_LOGIC     If MOVEM EA REGISTER MODE,
00002642  3C1D                    1769      MOVE.W  (A5)+,D6                ADD 1 address forward in oderd to place correct address.
00002644  0C39 0001 00006036      1770      CMP.B   #1, IS_LONG             Word/long address?
0000264C  6600 0004               1771      BNE     SKIP_TO_PRINT_LOGIC     If long address, then add one more move.w
00002650  3C1D                    1772      MOVE.W  (A5)+,D6
00002652                          1773  SKIP_TO_PRINT_LOGIC
00002652  4EB8 15F4               1774      JSR     CLEAR_NEXT_LINE
00002656  4EF8 1222               1775      JMP     PRINT_LOGIC 
0000265A                          1776  DECODE_MOVEM_EA_WORD_LHS
0000265A  4EB8 15CC               1777      JSR     PRINT_DOLLAR
0000265E  4EB9 00003C0E           1778      JSR     CLR_DATAREG_D6      Clear all registers before calculation
00002664  3C1D                    1779      MOVE.W  (A5)+,D6            Put current addr into D6, to hold addr value
00002666  0C39 0001 00006076      1780      CMP.B   #1,IS_MEM_TO_REG    If MOVEM <EA>,<LIST>
0000266E  6600 0004               1781      BNE     DONT_ADD_ADDRESS_W  Add one address forward
00002672  3C1D                    1782      MOVE.W  (A5)+,D6            MOVEM structure need one more adding of address
00002674                          1783      
00002674                          1784  DONT_ADD_ADDRESS_W
00002674  143C 0001               1785      MOVE.B  #1, D2              Counter Variable
00002678  163C 0004               1786      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
0000267C  323C F000               1787      MOVE.W  #$F000, D1          Move the masking value to D1
00002680                          1788      
00002680                          1789  EA_MOVEM_WORD_LOOP_LHS
00002680  3A06                    1790      MOVE.W  D6, D5              D5 will hold addr for manipulation
00002682  CA41                    1791      AND.W   D1, D5              Mask D5 with mask value
00002684  E849                    1792      LSR.W   #4, D1              Update the mask to next digit, by shifting 4
00002686  E77D                    1793      ROL.W   D3, D5              ROL once to bring MSB to LSB
00002688  1805                    1794      MOVE.B  D5, D4              Extract the digit
0000268A  4EB8 16D8               1795      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
0000268E  33FC 0000 00006022      1796      MOVE.W  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
00002696  13C4 00006022           1797      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
0000269C  43F9 00006022           1798      LEA     PRINT_ADDR_CHAR,A1  |
000026A2  103C 000E               1799      MOVE.B  #14,D0              |
000026A6  4E4F                    1800      TRAP    #15                 V
000026A8  0C02 0004               1801      CMPI.B  #4, D2              IF counter equals terminal value
000026AC  6700 0008               1802      BEQ     EXIT_EA_MOVEM_WORD_LOOP_LHS     Exit the loop
000026B0  5803                    1803      ADDQ.B  #4, D3              Else update shift value to next digit
000026B2  5202                    1804      ADDQ.B  #1, D2              Counter++
000026B4  60CA                    1805      BRA     EA_MOVEM_WORD_LOOP_LHS    Loop to start of loop
000026B6                          1806      
000026B6                          1807  EXIT_EA_MOVEM_WORD_LOOP_LHS
000026B6  0C39 0001 00006076      1808      CMP.B   #1, IS_MEM_TO_REG
000026BE  6600 0006               1809      BNE     DONT_MINUS_ADDRESS_W    If MOVEM <EA>,<LIST>
000026C2  3C25                    1810      MOVE.W  -(A5),D6                Subtract 2 addresses backword,
000026C4  3C25                    1811      MOVE.W  -(A5),D6                in oderd to place correct address.
000026C6                          1812     
000026C6                          1813  DONT_MINUS_ADDRESS_W
000026C6  0C39 0000 00006076      1814      CMP.B   #0, IS_MEM_TO_REG   Case of MOVEM.W <LIST>,<EA> need to exit
000026CE  6782                    1815      BEQ     SKIP_TO_PRINT_LOGIC
000026D0  4EB8 15BE               1816      JSR     PRINT_COMMA
000026D4  4EF8 250C               1817      JMP     DECODE_MOVEM_REGISTERS_RHS
000026D8  4EF8 1222               1818      JMP     PRINT_LOGIC
000026DC                          1819  DECODE_MOVEM_EA_LONG_LHS
000026DC  13FC 0001 00006036      1820      MOVE.B  #1, IS_LONG         Flag long address   
000026E4  4EB8 15CC               1821      JSR     PRINT_DOLLAR
000026E8  4EB9 00003C0E           1822      JSR     CLR_DATAREG_D6      Clear all registers before calculation
000026EE  0C39 0001 00006076      1823      CMP.B   #1, IS_MEM_TO_REG   If MOVEM <EA>,<LIST>
000026F6  6700 000A               1824      BEQ     STEP_FOR_MEM_TO_REG
000026FA  2C1D                    1825      MOVE.L  (A5)+, D6
000026FC  4EF9 00002706           1826      JMP     DONT_ADD_ADDRESS_L
00002702                          1827      
00002702                          1828  STEP_FOR_MEM_TO_REG
00002702  3C1D                    1829      MOVE.W  (A5)+,D6            Move up word value in memory
00002704  2C1D                    1830      MOVE.L  (A5)+,D6            Grab EA long value
00002706                          1831      
00002706                          1832  DONT_ADD_ADDRESS_L
00002706  143C 0001               1833      MOVE.B  #1, D2              Counter Variable
0000270A  163C 0004               1834      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
0000270E  223C F0000000           1835      MOVE.L  #$F0000000, D1      Move the masking value to D1
00002714                          1836      
00002714                          1837  EA_MOVEM_LONG_LOOP_LHS
00002714  2A06                    1838      MOVE.L  D6, D5              D5 will hold addr for manipulation
00002716  CA81                    1839      AND.L   D1, D5              Mask D5 with mask value
00002718  E889                    1840      LSR.L   #4, D1              Update the mask to next digit, by shifting 4
0000271A  E7BD                    1841      ROL.L   D3, D5              ROL once to bring MSB to LSB
0000271C  1805                    1842      MOVE.B  D5, D4              Extract the digit
0000271E  4EB8 16D8               1843      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
00002722  23FC 00000000 00006022  1844      MOVE.L  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
0000272C  13C4 00006022           1845      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
00002732  43F9 00006022           1846      LEA     PRINT_ADDR_CHAR,A1  |
00002738  103C 000E               1847      MOVE.B  #14,D0              |
0000273C  4E4F                    1848      TRAP    #15                 V
0000273E  0C02 0008               1849      CMPI.B  #8, D2              IF counter equals terminal value
00002742  6700 0008               1850      BEQ     EXIT_EA_MOVEM_LONG_LOOP_LHS     Exit the loop
00002746  5803                    1851      ADDQ.B  #4, D3              Else update shift value to next digit
00002748  5202                    1852      ADDQ.B  #1, D2              Counter++
0000274A  60C8                    1853      BRA     EA_MOVEM_LONG_LOOP_LHS  Loop to start of loop
0000274C                          1854      
0000274C                          1855  EXIT_EA_MOVEM_LONG_LOOP_LHS
0000274C  0C39 0001 00006076      1856      CMP.B   #1,  IS_MEM_TO_REG
00002754  6600 0006               1857      BNE     DONT_MINUS_ADDRESS_L    If MOVEM EA REGISTER MODE,
00002758  2C25                    1858      MOVE.L  -(A5),D6                ADD 2 addresses backword,
0000275A  3C25                    1859      MOVE.W  -(A5),D6                in oderd to place correct address.   
0000275C                          1860      
0000275C                          1861  DONT_MINUS_ADDRESS_L
0000275C  0C39 0000 00006076      1862      CMP.B   #0, IS_MEM_TO_REG       Case of MOVEM.W <LIST>,<EA> need to exit
00002764  6700 FEEC               1863      BEQ     SKIP_TO_PRINT_LOGIC     Exit for MOVEM.W <LIST>,<EA>
00002768  4EB8 15BE               1864      JSR     PRINT_COMMA
0000276C  4EF8 250C               1865      JMP     DECODE_MOVEM_REGISTERS_RHS
00002770  4EF8 1222               1866      JMP     PRINT_LOGIC
00002774                          1867  DECODE_MOVEB
00002774  43F9 0000401B           1868      LEA     DISPLAY_MOVEB, A1
0000277A  103C 000E               1869      MOVE.B  #14, D0
0000277E  4E4F                    1870      TRAP    #15
00002780  6000 0026               1871      BRA     DECODE_MOVE_DISPLAY
00002784                          1872  
00002784                          1873  DECODE_MOVEW
00002784  43F9 00004029           1874      LEA     DISPLAY_MOVEW, A1
0000278A  103C 000E               1875      MOVE.B  #14, D0
0000278E  4E4F                    1876      TRAP    #15
00002790  6000 0016               1877      BRA     DECODE_MOVE_DISPLAY
00002794                          1878      
00002794                          1879  DECODE_MOVEL
00002794  43F9 00004037           1880      LEA     DISPLAY_MOVEL, A1
0000279A  103C 000E               1881      MOVE.B  #14, D0
0000279E  4E4F                    1882      TRAP    #15
000027A0  13FC 0001 00006036      1883      MOVE.B  #1, IS_LONG         Flag set to true for when decoding IMDATA_L
000027A8                          1884  
000027A8                          1885  DECODE_MOVE_DISPLAY
000027A8  13FC 0001 00006040      1886      MOVE.B  #1, IS_MOVE         Flag set to true for when decoding RHS
000027B0  4EB8 21BE               1887      JSR     GET_EAMODE_BITS     
000027B4  B43C 0000               1888      CMP.B   #0, D2
000027B8  6700 0B80               1889      BEQ     DECODE_DATA_REG_LHS
000027BC  B43C 0001               1890      CMP.B   #1, D2
000027C0  6700 0BC0               1891      BEQ     DECODE_ADDR_REG_LHS
000027C4  B43C 0002               1892      CMP.B   #2, D2
000027C8  6700 0C00               1893      BEQ     DECODE_ADDRP_REG_LHS
000027CC  B43C 0003               1894      CMP.B   #3, D2
000027D0  6700 0C40               1895      BEQ     DECODE_ADDRPLUS_REG_LHS
000027D4  B43C 0004               1896      CMP.B   #4, D2
000027D8  6700 0C80               1897      BEQ     DECODE_MINUSADDR_REG_LHS
000027DC  B43C 0007               1898      CMP.B   #7, D2
000027E0  6700 0CC0               1899      BEQ     DECODE_EA_REG_LHS
000027E4  4EF8 1222               1900      JMP     PRINT_LOGIC
000027E8                          1901  DECODE_MOVEQ
000027E8  13FC 0001 00006046      1902      MOVE.B  #1, IS_MOVEQ    
000027F0  43F9 00004045           1903      LEA     DISPLAY_MOVEQL, A1
000027F6  103C 000E               1904      MOVE.B  #14, D0
000027FA  4E4F                    1905      TRAP    #15
000027FC  4EB8 15DA               1906      JSR     PRINT_IMDATA
00002800  4EB8 2246               1907      JSR     GET_DATA_8BITS
00002804  4EF9 0000324A           1908      JMP     SET_MOVEQ_IMDATA
0000280A                          1909  DECODE_ROTATIONS_MS
0000280A  4EB8 218E               1910      JSR     GET_REGISTER_BITS       Get 9th - 11th bit, find out AS(L/R), LS(L/R), or RO(L/R)
0000280E  B43C 0000               1911      CMP.B   #0,D2
00002812  6700 001E               1912      BEQ     DECODE_AS_MS
00002816  4EB8 218E               1913      JSR     GET_REGISTER_BITS
0000281A  B43C 0001               1914      CMP.B   #1,D2
0000281E  6700 001C               1915      BEQ     DECODE_LS_MS
00002822  4EB8 218E               1916      JSR     GET_REGISTER_BITS
00002826  B43C 0003               1917      CMP.B   #3,D2
0000282A  6700 001A               1918      BEQ     DECODE_RO_MS
0000282E  6000 ED74               1919      BRA     INVALID_ROTATIONS_MS
00002832                          1920  
00002832                          1921  DECODE_AS_MS
00002832  43F9 00004130           1922      LEA     DISPLAY_AS, A1
00002838  6000 0012               1923      BRA     SHIFT_DIRECTION_MS
0000283C                          1924      
0000283C                          1925  DECODE_LS_MS
0000283C  43F9 00004144           1926      LEA     DISPLAY_LS, A1
00002842  6000 0008               1927      BRA     SHIFT_DIRECTION_MS
00002846                          1928      
00002846                          1929  DECODE_RO_MS
00002846  43F9 00004158           1930      LEA     DISPLAY_RO, A1
0000284C                          1931  
0000284C                          1932  SHIFT_DIRECTION_MS
0000284C  103C 000E               1933      MOVE.B  #14, D0
00002850  4E4F                    1934      TRAP    #15
00002852                          1935  
00002852  4EB8 2286               1936      JSR     GET_SHIFT_DIRECTION_BITS
00002856  B43C 0000               1937      CMP.B   #0,D2
0000285A  6700 000C               1938      BEQ     PRINT_SHIFT_EA
0000285E  43F9 00003FA2           1939      LEA     DISPLAY_L,A1
00002864  6000 0008               1940      BRA     GO_TO_EA
00002868                          1941      
00002868                          1942  PRINT_SHIFT_EA
00002868  43F9 00003F9C           1943      LEA     DISPLAY_R,A1
0000286E                          1944  
0000286E                          1945  GO_TO_EA
0000286E  103C 000E               1946      MOVE.B  #14, D0
00002872  4E4F                    1947      TRAP    #15 
00002874  43F9 00003F90           1948      LEA     DISPLAY_SPACE,A1
0000287A  103C 000E               1949      MOVE.B  #14, D0
0000287E  4E4F                    1950      TRAP    #15
00002880                          1951       
00002880  4EB8 21BE               1952      JSR     GET_EAMODE_BITS
00002884  B43C 0002               1953      CMP.B   #2, D2
00002888  6700 0D84               1954      BEQ     DECODE_ADDRP_REG_ONE_OPERAND
0000288C  B43C 0003               1955      CMP.B   #3, D2
00002890  6700 0DC4               1956      BEQ     DECODE_ADDRPLUS_REG_ONE_OPERAND
00002894  B43C 0004               1957      CMP.B   #4, D2
00002898  6700 0E04               1958      BEQ     DECODE_MINUSADDR_REG_ONE_OPERAND
0000289C  B43C 0007               1959      CMP.B   #7, D2
000028A0  6700 0E44               1960      BEQ     DECODE_EA_REG_ONE_OPERAND
000028A4  4EF8 1222               1961      JMP     PRINT_LOGIC 
000028A8                          1962  
000028A8                          1963  DECODE_ROTATIONS_BYTE_RS
000028A8  13FC 0001 00006032      1964      MOVE.B  #1,IS_BYTE
000028B0  6000 0016               1965      BRA     DECODE_SHIFT_RS_BITS
000028B4                          1966      
000028B4                          1967  DECODE_ROTATIONS_WORD_RS
000028B4  13FC 0001 00006034      1968      MOVE.B  #1, IS_WORD
000028BC  6000 000A               1969      BRA     DECODE_SHIFT_RS_BITS    
000028C0                          1970  
000028C0                          1971  DECODE_ROTATIONS_LONG_RS
000028C0  13FC 0001 00006036      1972      MOVE.B  #1, IS_LONG 
000028C8                          1973  
000028C8                          1974  DECODE_SHIFT_RS_BITS
000028C8  4EB8 2276               1975      JSR     GET_SHIFT_RS_BITS
000028CC  B43C 0000               1976      CMP.B   #0,D2               ASL/R
000028D0  6700 0016               1977      BEQ     DECODE_AS
000028D4                          1978  
000028D4  B43C 0001               1979      CMP.B   #1,D2               LSL/R
000028D8  6700 0018               1980      BEQ     DECODE_LS
000028DC                          1981  
000028DC  B43C 0003               1982      CMP.B   #3,D2               ROL/R
000028E0  6700 001A               1983      BEQ     DECODE_RO
000028E4  6000 ECC4               1984      BRA     INVALID_OP
000028E8                          1985  
000028E8                          1986  DECODE_AS
000028E8  43F9 00004130           1987      LEA     DISPLAY_AS, A1
000028EE  6000 0012               1988      BRA     SHIFT_DIRECTION_BYTE
000028F2                          1989      
000028F2                          1990  DECODE_LS
000028F2  43F9 00004144           1991      LEA     DISPLAY_LS, A1
000028F8  6000 0008               1992      BRA     SHIFT_DIRECTION_BYTE
000028FC                          1993      
000028FC                          1994  DECODE_RO
000028FC  43F9 00004158           1995      LEA     DISPLAY_RO, A1
00002902                          1996      
00002902                          1997  SHIFT_DIRECTION_BYTE
00002902  103C 000E               1998      MOVE.B  #14, D0
00002906  4E4F                    1999      TRAP    #15
00002908                          2000  
00002908  4EB8 2286               2001      JSR     GET_SHIFT_DIRECTION_BITS
0000290C  B43C 0000               2002      CMP.B   #0,D2
00002910  6700 000C               2003      BEQ     PRINT_SHIFT_RIGHT_BYTE
00002914  43F9 00003FA2           2004      LEA     DISPLAY_L,A1
0000291A  6000 0008               2005      BRA     CHECK_SHIFT_SIZE_RS
0000291E                          2006      
0000291E                          2007  PRINT_SHIFT_RIGHT_BYTE
0000291E  43F9 00003F9C           2008      LEA     DISPLAY_R,A1
00002924                          2009  
00002924                          2010  CHECK_SHIFT_SIZE_RS
00002924  103C 000E               2011      MOVE.B  #14, D0
00002928  4E4F                    2012      TRAP    #15 
0000292A                          2013      
0000292A  0C39 0001 00006032      2014      CMP.B   #1,IS_BYTE
00002932  6700 001E               2015      BEQ     SHIFT_PRINT_DOT_B
00002936  0C39 0001 00006034      2016      CMP.B   #1,IS_WORD
0000293E  6700 001A               2017      BEQ     SHIFT_PRINT_DOT_W
00002942  43F9 00003FAC           2018      LEA     DISPLAY_DOT_L,A1
00002948                          2019      
00002948                          2020  DECODE_IR
00002948  103C 000E               2021      MOVE.B  #14, D0
0000294C  4E4F                    2022      TRAP    #15 
0000294E  6000 F966               2023      BRA     GET_IR_BITS 
00002952                          2024      
00002952                          2025  SHIFT_PRINT_DOT_B
00002952  43F9 00003FA4           2026      LEA     DISPLAY_DOT_B,A1
00002958  60EE                    2027      BRA     DECODE_IR
0000295A                          2028      
0000295A                          2029  SHIFT_PRINT_DOT_W
0000295A  43F9 00003FA8           2030      LEA     DISPLAY_DOT_W,A1
00002960  60E6                    2031      BRA     DECODE_IR
00002962                          2032  DECODE_IMMEDIATE_NUM
00002962  4EB8 15DA               2033      JSR     PRINT_IMDATA
00002966  13FC 0001 00006082      2034      MOVE.B  #1, IS_IMMEDIATE_DATA
0000296E  4EF9 00002986           2035      JMP     PRINT_CR_NUM
00002974                          2036      
00002974                          2037  DECODE_REGISTER_NUM
00002974  43F9 00003F9A           2038      LEA     DISPLAY_D, A1
0000297A  103C 000E               2039      MOVE.B  #14, D0
0000297E  4E4F                    2040      TRAP    #15
00002980  4EF9 00002986           2041      JMP     PRINT_CR_NUM    
00002986                          2042      
00002986                          2043  PRINT_CR_NUM
00002986  4EB8 22A6               2044      JSR     GET_SHIFT_CR_NUM_BITS
0000298A  0C39 0001 00006082      2045      CMP.B   #1, IS_IMMEDIATE_DATA
00002992  6700 000A               2046      BEQ     REPRESENT_1_TO_8
00002996                          2047      
00002996  B43C 0000               2048      CMP.B   #0, D2          Case for Dn, An related
0000299A  6700 F4E2               2049      BEQ     PRINT_0_LHS
0000299E                          2050      
0000299E                          2051  REPRESENT_1_TO_8            *In Immedate data, 0 represent 8. 
0000299E  B43C 0001               2052      CMP.B   #1, D2
000029A2  6700 F4F4               2053      BEQ     PRINT_1_LHS
000029A6  B43C 0002               2054      CMP.B   #2, D2
000029AA  6700 F506               2055      BEQ     PRINT_2_LHS
000029AE  B43C 0003               2056      CMP.B   #3, D2
000029B2  6700 F518               2057      BEQ     PRINT_3_LHS
000029B6  B43C 0004               2058      CMP.B   #4, D2
000029BA  6700 F52A               2059      BEQ     PRINT_4_LHS
000029BE  B43C 0005               2060      CMP.B   #5, D2
000029C2  6700 F53C               2061      BEQ     PRINT_5_LHS
000029C6  B43C 0006               2062      CMP.B   #6, D2
000029CA  6700 F554               2063      BEQ     PRINT_6_LHS
000029CE  B43C 0007               2064      CMP.B   #7, D2
000029D2  6700 F566               2065      BEQ     PRINT_7_LHS
000029D6  B43C 0000               2066      CMP.B   #0, D2
000029DA  6700 F578               2067      BEQ     PRINT_8_LHS
000029DE  4EF8 1222               2068      JMP     PRINT_LOGIC
000029E2                          2069  DECODE_MULS 
000029E2  43F9 000041BA           2070      LEA     DISPLAY_MULS, A1
000029E8  13FC 0001 00006042      2071      MOVE.B  #1, IS_MULS
000029F0  6000 0010               2072      BRA     DECODE_MULS_DIVU_DISPLAY
000029F4                          2073      
000029F4                          2074  DECODE_DIVU 
000029F4  43F9 000041C8           2075      LEA     DISPLAY_DIVU, A1
000029FA  13FC 0001 00006044      2076      MOVE.B  #1, IS_DIVU
00002A02                          2077  
00002A02                          2078  DECODE_MULS_DIVU_DISPLAY
00002A02  103C 000E               2079      MOVE.B  #14, D0
00002A06  4E4F                    2080      TRAP    #15
00002A08  4EB8 21BE               2081      JSR     GET_EAMODE_BITS
00002A0C  B43C 0000               2082      CMP.B   #0, D2
00002A10  6700 0928               2083      BEQ     DECODE_DATA_REG_LHS
00002A14  B43C 0002               2084      CMP.B   #2, D2
00002A18  6700 09B0               2085      BEQ     DECODE_ADDRP_REG_LHS
00002A1C  B43C 0003               2086      CMP.B   #3, D2
00002A20  6700 09F0               2087      BEQ     DECODE_ADDRPLUS_REG_LHS
00002A24  B43C 0004               2088      CMP.B   #4, D2
00002A28  6700 0A30               2089      BEQ     DECODE_MINUSADDR_REG_LHS
00002A2C  B43C 0007               2090      CMP.B   #7, D2
00002A30  6700 0A70               2091      BEQ     DECODE_EA_REG_LHS
00002A34  4EF8 1222               2092      JMP     PRINT_LOGIC
00002A38                          2093  DECODE_BCC
00002A38  43F9 000041D6           2094      LEA     DISPLAY_BCC, A1
00002A3E  103C 000E               2095      MOVE.B  #14, D0
00002A42  4E4F                    2096      TRAP    #15
00002A44  6000 001E               2097      BRA     DECODE_Bcc_DISPLAY
00002A48                          2098      
00002A48                          2099  DECODE_BGT
00002A48  43F9 000041E1           2100      LEA     DISPLAY_BGT, A1
00002A4E  103C 000E               2101      MOVE.B  #14, D0
00002A52  4E4F                    2102      TRAP    #15
00002A54  6000 000E               2103      BRA     DECODE_Bcc_DISPLAY
00002A58                          2104      
00002A58                          2105  DECODE_BLE
00002A58  43F9 000041EC           2106      LEA     DISPLAY_BLE, A1
00002A5E  103C 000E               2107      MOVE.B  #14, D0
00002A62  4E4F                    2108      TRAP    #15
00002A64                          2109  
00002A64                          2110  DECODE_Bcc_DISPLAY
00002A64  4EF9 00002A6E           2111      JMP     DECODE_DISPLACEMENT
00002A6A  4EF8 1222               2112      JMP     PRINT_LOGIC
00002A6E                          2113  DECODE_DISPLACEMENT
00002A6E  4286                    2114      CLR.L   D6                  Clear D6
00002A70  1C07                    2115      MOVE.B  D7, D6              Move opword BYTE value into D6 for calculation
00002A72  BC3C 0000               2116      CMP.B   #0, D6              Compare if it is word displacement as in '00'
00002A76  6700 0014               2117      BEQ     WORD_DISPLACEMENT   IF not word, fall through to '01' to 'FE' logic
00002A7A                          2118      
00002A7A  3A0D                    2119      MOVE.W  A5, D5              Move addr value into D5 for calculation
00002A7C  DA06                    2120      ADD.B   D6, D5              Add the BYTE displacement value. 
00002A7E                          2121                                  *NOTE: JMP TBL already auto increments add by 2
00002A7E  3E05                    2122      MOVE.W  D5, D7              Store displacement address in D7
00002A80  4EB8 166E               2123      JSR     PRINT_DISP_ADDR     JSR to print displacement address logic
00002A84  4EB8 15F4               2124      JSR     CLEAR_NEXT_LINE
00002A88  4EF8 1222               2125      JMP     PRINT_LOGIC
00002A8C                          2126      
00002A8C                          2127  WORD_DISPLACEMENT    
00002A8C  3A15                    2128      MOVE.W  (A5),D5             Move DISPLACEMENT value into D5 for calculation  
00002A8E  380D                    2129      MOVE.W  A5, D4              Move the current addr into D4 for calculation
00002A90  DA44                    2130      ADD.W   D4, D5              Add the current Addr with DISPLACEMENT value
00002A92  3E05                    2131      MOVE.W  D5, D7              Store displacement address in D7
00002A94  544D                    2132      ADDA.W  #2, A5              Increment the current addr reg by 2(word value)
00002A96  4EB8 166E               2133      JSR     PRINT_DISP_ADDR     JSR to print displacement address logic
00002A9A  4EB8 15F4               2134      JSR     CLEAR_NEXT_LINE
00002A9E  4EF8 1222               2135      JMP     PRINT_LOGIC
00002AA2                          2136  DECODE_ADDB_EATODN
00002AA2  43F9 00004072           2137      LEA     DISPLAY_ADDB, A1
00002AA8  103C 000E               2138      MOVE.B  #14, D0
00002AAC  4E4F                    2139      TRAP    #15
00002AAE  13FC 0001 00006052      2140      MOVE.B  #1, IS_ADDB         Flag set to true for when decoding RHS
00002AB6  13FC 0001 00006102      2141      MOVE.B  #1, IS_EATODN
00002ABE                          2142      
00002ABE  4EB8 21BE               2143      JSR     GET_EAMODE_BITS     
00002AC2  B43C 0000               2144      CMP.B   #0, D2
00002AC6  6700 0872               2145      BEQ     DECODE_DATA_REG_LHS
00002ACA  B43C 0002               2146      CMP.B   #2, D2
00002ACE  6700 08FA               2147      BEQ     DECODE_ADDRP_REG_LHS
00002AD2  B43C 0003               2148      CMP.B   #3, D2
00002AD6  6700 093A               2149      BEQ     DECODE_ADDRPLUS_REG_LHS
00002ADA  B43C 0004               2150      CMP.B   #4, D2
00002ADE  6700 097A               2151      BEQ     DECODE_MINUSADDR_REG_LHS
00002AE2  B43C 0007               2152      CMP.B   #7, D2
00002AE6  6700 09BA               2153      BEQ     DECODE_EA_REG_LHS
00002AEA  4EF8 1222               2154      JMP     PRINT_LOGIC
00002AEE                          2155  DECODE_ADDW_EATODN
00002AEE  43F9 0000407F           2156      LEA     DISPLAY_ADDW, A1
00002AF4  103C 000E               2157      MOVE.B  #14, D0
00002AF8  4E4F                    2158      TRAP    #15
00002AFA  13FC 0001 00006058      2159      MOVE.B  #1, IS_ADDW        ADD.W flag set to true for when decoding RHS
00002B02  13FC 0001 00006102      2160      MOVE.B  #1, IS_EATODN      EA->DN flag set to true for when decoding RHS
00002B0A  6000 0026               2161      BRA     DECODE_ADDWL_DISP
00002B0E                          2162      
00002B0E                          2163  DECODE_ADDL_EATODN
00002B0E  43F9 0000408C           2164      LEA     DISPLAY_ADDL, A1
00002B14  103C 000E               2165      MOVE.B  #14, D0
00002B18  4E4F                    2166      TRAP    #15
00002B1A  13FC 0001 00006060      2167      MOVE.B  #1, IS_ADDL        ADD.L flag set to true for when decoding RHS
00002B22  13FC 0001 00006036      2168      MOVE.B  #1, IS_LONG        Flag set to true for when decoding IMDATA_L
00002B2A  13FC 0001 00006102      2169      MOVE.B  #1, IS_EATODN      EA->DN flag set to true for when decoding RHS
00002B32                          2170      
00002B32                          2171  DECODE_ADDWL_DISP
00002B32  4EB8 21BE               2172      JSR     GET_EAMODE_BITS     
00002B36  B43C 0000               2173      CMP.B   #0, D2
00002B3A  6700 07FE               2174      BEQ     DECODE_DATA_REG_LHS
00002B3E  B43C 0001               2175      CMP.B   #1, D2
00002B42  6700 083E               2176      BEQ     DECODE_ADDR_REG_LHS
00002B46  B43C 0002               2177      CMP.B   #2, D2
00002B4A  6700 087E               2178      BEQ     DECODE_ADDRP_REG_LHS
00002B4E  B43C 0003               2179      CMP.B   #3, D2
00002B52  6700 08BE               2180      BEQ     DECODE_ADDRPLUS_REG_LHS
00002B56  B43C 0004               2181      CMP.B   #4, D2
00002B5A  6700 08FE               2182      BEQ     DECODE_MINUSADDR_REG_LHS
00002B5E  B43C 0007               2183      CMP.B   #7, D2
00002B62  6700 093E               2184      BEQ     DECODE_EA_REG_LHS
00002B66  4EF8 1222               2185      JMP     PRINT_LOGIC
00002B6A                          2186  DECODE_ADDB_DNTOEA
00002B6A  43F9 00004072           2187      LEA     DISPLAY_ADDB, A1
00002B70  103C 000E               2188      MOVE.B  #14, D0
00002B74  4E4F                    2189      TRAP    #15
00002B76  13FC 0001 00006052      2190      MOVE.B  #1, IS_ADDB         Flag set to true for when decoding RHS
00002B7E  6000 0036               2191      BRA     ADD_DNTOEA_DISP
00002B82                          2192      
00002B82                          2193  DECODE_ADDW_DNTOEA
00002B82  43F9 0000407F           2194      LEA     DISPLAY_ADDW, A1
00002B88  103C 000E               2195      MOVE.B  #14, D0
00002B8C  4E4F                    2196      TRAP    #15
00002B8E  13FC 0001 00006058      2197      MOVE.B  #1, IS_ADDW         Flag set to true for when decoding RHS
00002B96  6000 001E               2198      BRA     ADD_DNTOEA_DISP 
00002B9A                          2199      
00002B9A                          2200  DECODE_ADDL_DNTOEA
00002B9A  43F9 0000408C           2201      LEA     DISPLAY_ADDL, A1
00002BA0  103C 000E               2202      MOVE.B  #14, D0
00002BA4  4E4F                    2203      TRAP    #15
00002BA6  13FC 0001 00006060      2204      MOVE.B  #1, IS_ADDL         Flag set to true for when decoding RHS
00002BAE  13FC 0001 00006036      2205      MOVE.B  #1, IS_LONG         Flag set to true for when decoding IMDATA_L 
00002BB6                          2206  
00002BB6                          2207  ADD_DNTOEA_DISP     
00002BB6  13FC 0001 00006100      2208      MOVE.B  #1, IS_DNTOEA
00002BBE  4EF9 000032F2           2209      JMP     DECODE_ADD_DATA_REG_LHS
00002BC4  4EF8 1222               2210      JMP     PRINT_LOGIC
00002BC8                          2211  DECODE_ADDIB
00002BC8  43F9 000040B5           2212      LEA     DISPLAY_ADDIB, A1
00002BCE  103C 000E               2213      MOVE.B  #14, D0
00002BD2  4E4F                    2214      TRAP    #15
00002BD4  13FC 0001 00006034      2215      MOVE.B  #1, IS_WORD
00002BDC  6000 002E               2216      BRA     ADDI_DISP   
00002BE0                          2217      
00002BE0                          2218  DECODE_ADDIW
00002BE0  43F9 000040C3           2219      LEA     DISPLAY_ADDIW, A1
00002BE6  103C 000E               2220      MOVE.B  #14, D0
00002BEA  4E4F                    2221      TRAP    #15
00002BEC  13FC 0001 00006034      2222      MOVE.B  #1, IS_WORD         Flag set to true for when decoding IMDATA_W
00002BF4  6000 0016               2223      BRA     ADDI_DISP   
00002BF8                          2224      
00002BF8                          2225  DECODE_ADDIL
00002BF8  43F9 000040D1           2226      LEA     DISPLAY_ADDIL, A1
00002BFE  103C 000E               2227      MOVE.B  #14, D0
00002C02  4E4F                    2228      TRAP    #15
00002C04  13FC 0001 00006036      2229      MOVE.B  #1, IS_LONG         Flag set to true for when decoding IMDATA_L
00002C0C                          2230      
00002C0C                          2231  ADDI_DISP   
00002C0C  13FC 0001 00006056      2232      MOVE.B  #1, IS_ADDI         Flag set to true for when decoding RHS
00002C14  4EF9 00003222           2233      JMP     DECODE_IMDATA_LHS
00002C1A  4EF8 1222               2234      JMP     PRINT_LOGIC
00002C1E                          2235  DECODE_ADDAW
00002C1E  43F9 00004099           2236      LEA     DISPLAY_ADDAW, A1
00002C24  103C 000E               2237      MOVE.B  #14, D0
00002C28  4E4F                    2238      TRAP    #15
00002C2A  6000 0016               2239      BRA     DECODE_ADDA
00002C2E                          2240      
00002C2E                          2241  DECODE_ADDAL
00002C2E  43F9 000040A7           2242      LEA     DISPLAY_ADDAL, A1
00002C34  103C 000E               2243      MOVE.B  #14, D0
00002C38  4E4F                    2244      TRAP    #15
00002C3A  13FC 0001 00006036      2245      MOVE.B  #1, IS_LONG
00002C42                          2246  
00002C42                          2247  DECODE_ADDA 
00002C42  13FC 0001 00006054      2248      MOVE.B  #1, IS_ADDA
00002C4A  4EB8 21BE               2249      JSR     GET_EAMODE_BITS
00002C4E  B43C 0000               2250      CMP.B   #0, D2
00002C52  6700 06E6               2251      BEQ     DECODE_DATA_REG_LHS
00002C56  B43C 0001               2252      CMP.B   #1, D2
00002C5A  6700 0726               2253      BEQ     DECODE_ADDR_REG_LHS
00002C5E  B43C 0002               2254      CMP.B   #2, D2
00002C62  6700 0766               2255      BEQ     DECODE_ADDRP_REG_LHS
00002C66  B43C 0003               2256      CMP.B   #3, D2
00002C6A  6700 07A6               2257      BEQ     DECODE_ADDRPLUS_REG_LHS
00002C6E  B43C 0004               2258      CMP.B   #4, D2
00002C72  6700 07E6               2259      BEQ     DECODE_MINUSADDR_REG_LHS
00002C76  B43C 0007               2260      CMP.B   #7, D2
00002C7A  6700 0826               2261      BEQ     DECODE_EA_REG_LHS   
00002C7E  4EF8 1222               2262      JMP     PRINT_LOGIC
00002C82                          2263  DECODE_ANDB_EATODN
00002C82  43F9 00004109           2264      LEA     DISPLAY_ANDB, A1
00002C88  103C 000E               2265      MOVE.B  #14, D0
00002C8C  4E4F                    2266      TRAP    #15
00002C8E  13FC 0001 00006062      2267      MOVE.B  #1, IS_ANDB
00002C96  13FC 0001 00006034      2268      MOVE.B  #1, IS_WORD
00002C9E  6000 003E               2269      BRA     DECODE_AND_EATODN
00002CA2                          2270  
00002CA2                          2271  DECODE_ANDW_EATODN
00002CA2  43F9 00004116           2272      LEA     DISPLAY_ANDW, A1
00002CA8  103C 000E               2273      MOVE.B  #14, D0
00002CAC  4E4F                    2274      TRAP    #15
00002CAE  13FC 0001 00006064      2275      MOVE.B  #1, IS_ANDW
00002CB6  13FC 0001 00006034      2276      MOVE.B  #1, IS_WORD
00002CBE  6000 001E               2277      BRA     DECODE_AND_EATODN
00002CC2                          2278  
00002CC2                          2279  DECODE_ANDL_EATODN
00002CC2  43F9 00004123           2280      LEA     DISPLAY_ANDL, A1
00002CC8  103C 000E               2281      MOVE.B  #14, D0
00002CCC  4E4F                    2282      TRAP    #15
00002CCE  13FC 0001 00006066      2283      MOVE.B  #1, IS_ANDL
00002CD6  13FC 0001 00006036      2284      MOVE.B  #1, IS_LONG
00002CDE                          2285      
00002CDE                          2286  DECODE_AND_EATODN   
00002CDE  13FC 0001 00006102      2287      MOVE.B  #1, IS_EATODN
00002CE6  4EB8 21BE               2288      JSR     GET_EAMODE_BITS
00002CEA  B43C 0000               2289      CMP.B   #0, D2
00002CEE  6700 064A               2290      BEQ     DECODE_DATA_REG_LHS
00002CF2  B43C 0002               2291      CMP.B   #2, D2
00002CF6  6700 06D2               2292      BEQ     DECODE_ADDRP_REG_LHS
00002CFA  B43C 0003               2293      CMP.B   #3, D2
00002CFE  6700 0712               2294      BEQ     DECODE_ADDRPLUS_REG_LHS
00002D02  B43C 0004               2295      CMP.B   #4, D2
00002D06  6700 0752               2296      BEQ     DECODE_MINUSADDR_REG_LHS
00002D0A  B43C 0007               2297      CMP.B   #7, D2
00002D0E  6700 0792               2298      BEQ     DECODE_EA_REG_LHS 
00002D12  4EF8 1222               2299      JMP     PRINT_LOGIC
00002D16                          2300  DECODE_ANDB_DNTOEA
00002D16  43F9 00004109           2301      LEA     DISPLAY_ANDB, A1
00002D1C  103C 000E               2302      MOVE.B  #14, D0
00002D20  4E4F                    2303      TRAP    #15
00002D22  13FC 0001 00006062      2304      MOVE.B  #1, IS_ANDB         Flag set to true for when decoding RHS
00002D2A  13FC 0001 00006034      2305      MOVE.B  #1, IS_WORD
00002D32  6000 003E               2306      BRA     DECODE_AND_DNTOEA
00002D36                          2307  
00002D36                          2308  DECODE_ANDW_DNTOEA
00002D36  43F9 00004116           2309      LEA     DISPLAY_ANDW, A1
00002D3C  103C 000E               2310      MOVE.B  #14, D0
00002D40  4E4F                    2311      TRAP    #15
00002D42  13FC 0001 00006064      2312      MOVE.B  #1, IS_ANDW         Flag set to true for when decoding RHS
00002D4A  13FC 0001 00006034      2313      MOVE.B  #1, IS_WORD
00002D52  6000 001E               2314      BRA     DECODE_AND_DNTOEA
00002D56                          2315      
00002D56                          2316  DECODE_ANDL_DNTOEA
00002D56  43F9 00004123           2317      LEA     DISPLAY_ANDL, A1
00002D5C  103C 000E               2318      MOVE.B  #14, D0
00002D60  4E4F                    2319      TRAP    #15
00002D62  13FC 0001 00006066      2320      MOVE.B  #1, IS_ANDL         Flag set to true for when decoding RHS
00002D6A  13FC 0001 00006036      2321      MOVE.B  #1, IS_LONG
00002D72                          2322      
00002D72                          2323  DECODE_AND_DNTOEA   
00002D72  13FC 0001 00006100      2324      MOVE.B  #1, IS_DNTOEA
00002D7A  4EF9 000032F2           2325      JMP     DECODE_ADD_DATA_REG_LHS
00002D80  4EF8 1222               2326      JMP     PRINT_LOGIC
00002D84                          2327  DECODE_SUBIB
00002D84  43F9 000040DF           2328      LEA     DISPLAY_SUBIB, A1
00002D8A  103C 000E               2329      MOVE.B  #14, D0
00002D8E  4E4F                    2330      TRAP    #15
00002D90  13FC 0001 00006034      2331      MOVE.B  #1, IS_WORD
00002D98  6000 002E               2332      BRA     DECODE_SUBI
00002D9C                          2333  
00002D9C                          2334  DECODE_SUBIW
00002D9C  43F9 000040ED           2335      LEA     DISPLAY_SUBIW, A1
00002DA2  103C 000E               2336      MOVE.B  #14, D0
00002DA6  4E4F                    2337      TRAP    #15
00002DA8  13FC 0001 00006034      2338      MOVE.B  #1, IS_WORD         Flag set to true for when decoding IMDATA_W
00002DB0  6000 0016               2339      BRA     DECODE_SUBI
00002DB4                          2340      
00002DB4                          2341  DECODE_SUBIL
00002DB4  43F9 000040FB           2342      LEA     DISPLAY_SUBIL, A1
00002DBA  103C 000E               2343      MOVE.B  #14, D0
00002DBE  4E4F                    2344      TRAP    #15
00002DC0  13FC 0001 00006036      2345      MOVE.B  #1, IS_LONG         Flag set to true for when decoding IMDATA_L
00002DC8                          2346  
00002DC8                          2347  DECODE_SUBI 
00002DC8  13FC 0001 00006068      2348      MOVE.B  #1, IS_SUBI         Flag set to true for when decoding RHS
00002DD0  4EF9 00003222           2349      JMP     DECODE_IMDATA_LHS
00002DD6  4EF8 1222               2350      JMP     PRINT_LOGIC
00002DDA                          2351  DECODE_SUBB_DNTOEA 
00002DDA  43F9 00004193           2352      LEA     DISPLAY_SUBB, A1
00002DE0  103C 000E               2353      MOVE.B  #14, D0
00002DE4  4E4F                    2354      TRAP    #15
00002DE6  13FC 0001 00006070      2355      MOVE.B  #1, IS_SUBB
00002DEE  13FC 0001 00006032      2356      MOVE.B  #1, IS_BYTE
00002DF6  13FC 0001 00006034      2357      MOVE.B  #1, IS_WORD
00002DFE  6000 003E               2358      BRA     DECODE_SUB_DNTOEA 
00002E02                          2359      
00002E02                          2360  DECODE_SUBW_DNTOEA 
00002E02  43F9 000041A0           2361      LEA     DISPLAY_SUBW, A1
00002E08  103C 000E               2362      MOVE.B  #14, D0
00002E0C  4E4F                    2363      TRAP    #15
00002E0E  13FC 0001 00006072      2364      MOVE.B  #1, IS_SUBW
00002E16  13FC 0001 00006034      2365      MOVE.B  #1, IS_WORD
00002E1E  6000 001E               2366      BRA     DECODE_SUB_DNTOEA 
00002E22                          2367      
00002E22                          2368  DECODE_SUBL_DNTOEA 
00002E22  43F9 000041AD           2369      LEA     DISPLAY_SUBL, A1
00002E28  103C 000E               2370      MOVE.B  #14, D0
00002E2C  4E4F                    2371      TRAP    #15
00002E2E  13FC 0001 00006074      2372      MOVE.B  #1, IS_SUBL
00002E36  13FC 0001 00006036      2373      MOVE.B  #1, IS_LONG 
00002E3E                          2374      
00002E3E                          2375  DECODE_SUB_DNTOEA
00002E3E  13FC 0001 00006100      2376      MOVE.B  #1, IS_DNTOEA
00002E46  4EF9 000032F2           2377      JMP     DECODE_ADD_DATA_REG_LHS
00002E4C  4EF8 1222               2378      JMP     PRINT_LOGIC
00002E50                          2379  DECODE_SUBB_EATODN
00002E50  43F9 00004193           2380      LEA     DISPLAY_SUBB, A1
00002E56  103C 000E               2381      MOVE.B  #14, D0
00002E5A  4E4F                    2382      TRAP    #15
00002E5C  13FC 0001 00006070      2383      MOVE.B  #1, IS_SUBB             Flag set to true for when decoding RHS
00002E64  13FC 0001 00006032      2384      MOVE.B  #1, IS_BYTE
00002E6C  13FC 0001 00006034      2385      MOVE.B  #1, IS_WORD
00002E74  6000 003E               2386      BRA     DECODE_SUB_EATODN
00002E78                          2387      
00002E78                          2388  DECODE_SUBW_EATODN
00002E78  43F9 000041A0           2389      LEA     DISPLAY_SUBW, A1
00002E7E  103C 000E               2390      MOVE.B  #14, D0
00002E82  4E4F                    2391      TRAP    #15
00002E84  13FC 0001 00006072      2392      MOVE.B  #1, IS_SUBW             Flag set to true for when decoding RHS
00002E8C  13FC 0001 00006034      2393      MOVE.B  #1, IS_WORD
00002E94  6000 001E               2394      BRA     DECODE_SUB_EATODN
00002E98                          2395      
00002E98                          2396  DECODE_SUBL_EATODN
00002E98  43F9 000041AD           2397      LEA     DISPLAY_SUBL, A1
00002E9E  103C 000E               2398      MOVE.B  #14, D0
00002EA2  4E4F                    2399      TRAP    #15
00002EA4  13FC 0001 00006074      2400      MOVE.B  #1, IS_SUBL             Flag set to true for when decoding RHS
00002EAC  13FC 0001 00006036      2401      MOVE.B  #1, IS_LONG
00002EB4                          2402      
00002EB4                          2403  DECODE_SUB_EATODN   
00002EB4  13FC 0001 00006102      2404      MOVE.B  #1, IS_EATODN
00002EBC  4EB8 21BE               2405      JSR     GET_EAMODE_BITS
00002EC0  B43C 0000               2406      CMP.B   #0, D2
00002EC4  6700 0474               2407      BEQ     DECODE_DATA_REG_LHS
00002EC8  0C39 0001 00006032      2408      CMP.B   #1, IS_BYTE
00002ED0  6700 000A               2409      BEQ     SKIP_AN_SUB             Addr register not allowed for byte-ops
00002ED4  B43C 0001               2410      CMP.B   #1, D2
00002ED8  6700 04A8               2411      BEQ     DECODE_ADDR_REG_LHS
00002EDC                          2412      
00002EDC                          2413  SKIP_AN_SUB
00002EDC  B43C 0002               2414      CMP.B   #2, D2
00002EE0  6700 04E8               2415      BEQ     DECODE_ADDRP_REG_LHS
00002EE4  B43C 0003               2416      CMP.B   #3, D2
00002EE8  6700 0528               2417      BEQ     DECODE_ADDRPLUS_REG_LHS
00002EEC  B43C 0004               2418      CMP.B   #4, D2
00002EF0  6700 0568               2419      BEQ     DECODE_MINUSADDR_REG_LHS
00002EF4  B43C 0007               2420      CMP.B   #7, D2
00002EF8  6700 05A8               2421      BEQ     DECODE_EA_REG_LHS
00002EFC                          2422   
00002EFC  4EF8 1222               2423      JMP     PRINT_LOGIC
00002F00                          2424  DECODE_DATA_REG_RHS
00002F00  4EB8 218E               2425      JSR     GET_REGISTER_BITS
00002F04  B43C 0000               2426      CMP.B   #0, D2
00002F08  6700 E844               2427      BEQ     PRINT_D0_RHS
00002F0C  B43C 0001               2428      CMP.B   #1, D2
00002F10  6700 E850               2429      BEQ     PRINT_D1_RHS
00002F14  B43C 0002               2430      CMP.B   #2, D2
00002F18  6700 E85C               2431      BEQ     PRINT_D2_RHS
00002F1C  B43C 0003               2432      CMP.B   #3, D2
00002F20  6700 E868               2433      BEQ     PRINT_D3_RHS
00002F24  B43C 0004               2434      CMP.B   #4, D2
00002F28  6700 E874               2435      BEQ     PRINT_D4_RHS
00002F2C  B43C 0005               2436      CMP.B   #5, D2
00002F30  6700 E880               2437      BEQ     PRINT_D5_RHS
00002F34  B43C 0006               2438      CMP.B   #6, D2
00002F38  6700 E88C               2439      BEQ     PRINT_D6_RHS
00002F3C  B43C 0007               2440      CMP.B   #7, D2
00002F40  6700 E898               2441      BEQ     PRINT_D7_RHS
00002F44  4EF8 1222               2442      JMP     PRINT_LOGIC 
00002F48                          2443  DECODE_DATA_REG_RHS_BITS_0TO2
00002F48  4EB8 219E               2444      JSR     GET_REGISTER_BITS_0TO2
00002F4C  B43C 0000               2445      CMP.B   #0, D2
00002F50  6700 E7FC               2446      BEQ     PRINT_D0_RHS
00002F54  B43C 0001               2447      CMP.B   #1, D2
00002F58  6700 E808               2448      BEQ     PRINT_D1_RHS
00002F5C  B43C 0002               2449      CMP.B   #2, D2
00002F60  6700 E814               2450      BEQ     PRINT_D2_RHS
00002F64  B43C 0003               2451      CMP.B   #3, D2
00002F68  6700 E820               2452      BEQ     PRINT_D3_RHS
00002F6C  B43C 0004               2453      CMP.B   #4, D2
00002F70  6700 E82C               2454      BEQ     PRINT_D4_RHS
00002F74  B43C 0005               2455      CMP.B   #5, D2
00002F78  6700 E838               2456      BEQ     PRINT_D5_RHS
00002F7C  B43C 0006               2457      CMP.B   #6, D2
00002F80  6700 E844               2458      BEQ     PRINT_D6_RHS
00002F84  B43C 0007               2459      CMP.B   #7, D2
00002F88  6700 E850               2460      BEQ     PRINT_D7_RHS
00002F8C  4EF8 1222               2461      JMP     PRINT_LOGIC 
00002F90                          2462  DECODE_ADDR_REG_RHS
00002F90  4EB8 218E               2463      JSR     GET_REGISTER_BITS
00002F94  B43C 0000               2464      CMP.B   #0, D2
00002F98  6700 E854               2465      BEQ     PRINT_A0_RHS
00002F9C  B43C 0001               2466      CMP.B   #1, D2
00002FA0  6700 E860               2467      BEQ     PRINT_A1_RHS
00002FA4  B43C 0002               2468      CMP.B   #2, D2
00002FA8  6700 E86C               2469      BEQ     PRINT_A2_RHS
00002FAC  B43C 0003               2470      CMP.B   #3, D2
00002FB0  6700 E878               2471      BEQ     PRINT_A3_RHS
00002FB4  B43C 0004               2472      CMP.B   #4, D2
00002FB8  6700 E884               2473      BEQ     PRINT_A4_RHS
00002FBC  B43C 0005               2474      CMP.B   #5, D2
00002FC0  6700 E890               2475      BEQ     PRINT_A5_RHS
00002FC4  B43C 0006               2476      CMP.B   #6, D2
00002FC8  6700 E89C               2477      BEQ     PRINT_A6_RHS
00002FCC  B43C 0007               2478      CMP.B   #7, D2
00002FD0  6700 E8A8               2479      BEQ     PRINT_A7_RHS
00002FD4  4EF8 1222               2480      JMP     PRINT_LOGIC 
00002FD8                          2481      *END:   DECODE_ADDR_REG_RHS Logic
00002FD8                          2482  DECODE_ADDRP_REG_RHS
00002FD8  4EB8 218E               2483      JSR     GET_REGISTER_BITS
00002FDC  B43C 0000               2484      CMP.B   #0, D2
00002FE0  6700 E8AC               2485      BEQ     PRINT_A0_P_RHS
00002FE4  B43C 0001               2486      CMP.B   #1, D2
00002FE8  6700 E8B8               2487      BEQ     PRINT_A1_P_RHS
00002FEC  B43C 0002               2488      CMP.B   #2, D2
00002FF0  6700 E8C4               2489      BEQ     PRINT_A2_P_RHS
00002FF4  B43C 0003               2490      CMP.B   #3, D2
00002FF8  6700 E8D0               2491      BEQ     PRINT_A3_P_RHS
00002FFC  B43C 0004               2492      CMP.B   #4, D2
00003000  6700 E8DC               2493      BEQ     PRINT_A4_P_RHS
00003004  B43C 0005               2494      CMP.B   #5, D2
00003008  6700 E8E8               2495      BEQ     PRINT_A5_P_RHS
0000300C  B43C 0006               2496      CMP.B   #6, D2
00003010  6700 E8F4               2497      BEQ     PRINT_A6_P_RHS
00003014  B43C 0007               2498      CMP.B   #7, D2
00003018  6700 E900               2499      BEQ     PRINT_A7_P_RHS
0000301C                          2500  ADDRP_REG_END
0000301C  4EF8 1222               2501      JMP     PRINT_LOGIC 
00003020                          2502  DECODE_ADDRPLUS_REG_RHS
00003020  4EB8 218E               2503      JSR     GET_REGISTER_BITS
00003024  B43C 0000               2504      CMP.B   #0, D2
00003028  6700 E904               2505      BEQ     PRINT_A0_PP_RHS
0000302C  B43C 0001               2506      CMP.B   #1, D2
00003030  6700 E910               2507      BEQ     PRINT_A1_PP_RHS
00003034  B43C 0002               2508      CMP.B   #2, D2
00003038  6700 E91C               2509      BEQ     PRINT_A2_PP_RHS
0000303C  B43C 0003               2510      CMP.B   #3, D2
00003040  6700 E928               2511      BEQ     PRINT_A3_PP_RHS
00003044  B43C 0004               2512      CMP.B   #4, D2
00003048  6700 E934               2513      BEQ     PRINT_A4_PP_RHS
0000304C  B43C 0005               2514      CMP.B   #5, D2
00003050  6700 E940               2515      BEQ     PRINT_A5_PP_RHS
00003054  B43C 0006               2516      CMP.B   #6, D2
00003058  6700 E94C               2517      BEQ     PRINT_A6_PP_RHS
0000305C  B43C 0007               2518      CMP.B   #7, D2
00003060  6700 E958               2519      BEQ     PRINT_A7_PP_RHS
00003064                          2520  DECODE_ADDRPLUS_END
00003064  4EF8 1222               2521      JMP     PRINT_LOGIC 
00003068                          2522  DECODE_MINUSADDR_REG_RHS
00003068  4EB8 218E               2523      JSR     GET_REGISTER_BITS
0000306C  B43C 0000               2524      CMP.B   #0, D2
00003070  6700 E95C               2525      BEQ     PRINT_A0_PM_RHS
00003074  B43C 0001               2526      CMP.B   #1, D2
00003078  6700 E968               2527      BEQ     PRINT_A1_PM_RHS
0000307C  B43C 0002               2528      CMP.B   #2, D2
00003080  6700 E974               2529      BEQ     PRINT_A2_PM_RHS
00003084  B43C 0003               2530      CMP.B   #3, D2
00003088  6700 E980               2531      BEQ     PRINT_A3_PM_RHS
0000308C  B43C 0004               2532      CMP.B   #4, D2
00003090  6700 E98C               2533      BEQ     PRINT_A4_PM_RHS
00003094  B43C 0005               2534      CMP.B   #5, D2
00003098  6700 E998               2535      BEQ     PRINT_A5_PM_RHS
0000309C  B43C 0006               2536      CMP.B   #6, D2
000030A0  6700 E9A4               2537      BEQ     PRINT_A6_PM_RHS
000030A4  B43C 0007               2538      CMP.B   #7, D2
000030A8  6700 E9B0               2539      BEQ     PRINT_A7_PM_RHS
000030AC                          2540  MINUSADDR_REG_END
000030AC  4EF8 1222               2541      JMP     PRINT_LOGIC 
000030B0                          2542  DECODE_EA_REG_RHS
000030B0  4EB8 218E               2543      JSR     GET_REGISTER_BITS
000030B4  B43C 0000               2544      CMP.B   #0, D2              (xxxx).W
000030B8  6700 000E               2545      BEQ     DECODE_EA_WORD_RHS
000030BC  B43C 0001               2546      CMP.B   #1, D2              (xxxx).L
000030C0  6700 005C               2547      BEQ     DECODE_EA_LONG_RHS
000030C4                          2548  DECODE_EA_REG_END
000030C4  4EF8 1222               2549      JMP     PRINT_LOGIC
000030C8                          2550  DECODE_EA_WORD_RHS
000030C8  4EB8 15CC               2551      JSR     PRINT_DOLLAR
000030CC  4EB9 00003C0E           2552      JSR     CLR_DATAREG_D6      Clear all registers before calculation
000030D2  3C1D                    2553      MOVE.W  (A5)+,D6            Put addr1's addr into D6, to hold addr value
000030D4  143C 0001               2554      MOVE.B  #1, D2              Counter Variable
000030D8  163C 0004               2555      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
000030DC  323C F000               2556      MOVE.W  #$F000, D1          Move the masking value to D1
000030E0                          2557      
000030E0                          2558  EA_WORD_LOOP_RHS
000030E0  3A06                    2559      MOVE.W  D6, D5              D5 will hold addr for manipulation
000030E2  CA41                    2560      AND.W   D1, D5              Mask D5 with mask value
000030E4  E849                    2561      LSR.W   #4, D1              Update the mask to next digit, by shifting 4
000030E6  E77D                    2562      ROL.W   D3, D5              ROL once to bring MSB to LSB
000030E8  1805                    2563      MOVE.B  D5, D4              Extract the digit
000030EA  4EB8 16D8               2564      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
000030EE  33FC 0000 00006022      2565      MOVE.W  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
000030F6  13C4 00006022           2566      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
000030FC  43F9 00006022           2567      LEA     PRINT_ADDR_CHAR,A1  |
00003102  103C 000E               2568      MOVE.B  #14,D0              |
00003106  4E4F                    2569      TRAP    #15                 V
00003108  0C02 0004               2570      CMPI.B  #4, D2              IF counter equals terminal value
0000310C  6700 0008               2571      BEQ     EXIT_EA_WORD_LOOP_RHS   Exit the loop
00003110  5803                    2572      ADDQ.B  #4, D3              Else update shift value to next digit
00003112  5202                    2573      ADDQ.B  #1, D2              Counter++
00003114  60CA                    2574      BRA     EA_WORD_LOOP_RHS    Loop to start of loop
00003116                          2575  EXIT_EA_WORD_LOOP_RHS
00003116  4EB8 15F4               2576      JSR     CLEAR_NEXT_LINE
0000311A  4EF8 1222               2577      JMP     PRINT_LOGIC
0000311E                          2578  DECODE_EA_LONG_RHS
0000311E  4EB8 15CC               2579      JSR     PRINT_DOLLAR
00003122  4EB9 00003C0E           2580      JSR     CLR_DATAREG_D6      Clear all registers before calculation
00003128  2C1D                    2581      MOVE.L  (A5)+, D6           Put addr1's addr into D6, to hold addr value
0000312A  143C 0001               2582      MOVE.B  #1, D2              Counter Variable
0000312E  163C 0004               2583      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
00003132  223C F0000000           2584      MOVE.L  #$F0000000, D1      Move the masking value to D1
00003138                          2585      
00003138                          2586  EA_LONG_LOOP_RHS
00003138  2A06                    2587      MOVE.L  D6, D5              D5 will hold addr for manipulation
0000313A  CA81                    2588      AND.L   D1, D5              Mask D5 with mask value
0000313C  E889                    2589      LSR.L   #4, D1              Update the mask to next digit, by shifting 4
0000313E  E7BD                    2590      ROL.L   D3, D5              ROL once to bring MSB to LSB
00003140  1805                    2591      MOVE.B  D5, D4              Extract the digit
00003142  4EB8 16D8               2592      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
00003146  23FC 00000000 00006022  2593      MOVE.L  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
00003150  13C4 00006022           2594      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
00003156  43F9 00006022           2595      LEA     PRINT_ADDR_CHAR,A1  |
0000315C  103C 000E               2596      MOVE.B  #14,D0              |
00003160  4E4F                    2597      TRAP    #15                 V
00003162  0C02 0008               2598      CMPI.B  #8, D2              IF counter equals terminal value
00003166  6700 0008               2599      BEQ     EXIT_EA_LONG_LOOP_RHS   Exit the loop
0000316A  5803                    2600      ADDQ.B  #4, D3              Else update shift value to next digit
0000316C  5202                    2601      ADDQ.B  #1, D2              Counter++
0000316E  60C8                    2602      BRA     EA_LONG_LOOP_RHS    Loop to start of loop
00003170                          2603  EXIT_EA_LONG_LOOP_RHS
00003170  4EB8 15F4               2604      JSR     CLEAR_NEXT_LINE
00003174  4EF8 1222               2605      JMP     PRINT_LOGIC
00003178                          2606  DECODE_IMDATA_RHS
00003178  4EB8 15DA               2607      JSR     PRINT_IMDATA
0000317C  4EB9 00003C0E           2608      JSR     CLR_DATAREG_D6      Clear all registers before calculation
00003182                          2609      
00003182  143C 0001               2610      MOVE.B  #1, D2              Counter Variable
00003186  163C 0004               2611      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
0000318A                          2612      
0000318A  0C39 0001 00006036      2613      CMP.B   #1, IS_LONG         Check to see if it is LONG IM_DATA
00003192  6700 0110               2614      BEQ     IS_LONG_IMDATA  
00003196                          2615      
00003196                          2616      *For when word
00003196  323C F000               2617      MOVE.W  #$F000, D1          Move the masking value to D1
0000319A  3C1D                    2618      MOVE.W  (A5)+, D6           Put current addr into D6, to hold addr value
0000319C                          2619      
0000319C                          2620  IMDATA_LOOP_W_RHS
0000319C  3A06                    2621      MOVE.W  D6, D5              D5 will hold addr for manipulation
0000319E  CA41                    2622      AND.W   D1, D5              Mask D5 with mask value
000031A0  E849                    2623      LSR.W   #4, D1              Update the mask to next digit, by shifting 4
000031A2  E77D                    2624      ROL.W   D3, D5              ROL once to bring MSB to LSB
000031A4  1805                    2625      MOVE.B  D5, D4              Extract the digit
000031A6  4EB8 16D8               2626      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
000031AA  33FC 0000 00006022      2627      MOVE.W  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
000031B2  13C4 00006022           2628      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
000031B8  43F9 00006022           2629      LEA     PRINT_ADDR_CHAR,A1  |
000031BE  103C 000E               2630      MOVE.B  #14,D0              |
000031C2  4E4F                    2631      TRAP    #15                 V
000031C4  0C02 0004               2632      CMPI.B  #4,D2               IF counter equals terminal value
000031C8  6700 0008               2633      BEQ     EXIT_IMDATA_LOOP_W_RHS Exit the loop
000031CC  5803                    2634      ADDQ.B  #4, D3              Else update shift value to next digit
000031CE  5202                    2635      ADDQ.B  #1, D2              Counter++
000031D0  60CA                    2636      BRA     IMDATA_LOOP_W_RHS   Loop to start of loop
000031D2                          2637  EXIT_IMDATA_LOOP_W_RHS
000031D2  4EB8 15F4               2638      JSR     CLEAR_NEXT_LINE
000031D6  4EF8 1222               2639      JMP     PRINT_LOGIC
000031DA                          2640      
000031DA                          2641  IS_LONG_IMDATA_R
000031DA  223C F0000000           2642      MOVE.L  #$F0000000, D1      Move the masking value to D1
000031E0  2C1D                    2643      MOVE.L  (A5)+, D6           Put current addr into D6, to hold addr value
000031E2                          2644      
000031E2                          2645  IMDATA_LOOP_L_RHS
000031E2  2A06                    2646      MOVE.L  D6, D5              D5 will hold addr for manipulation
000031E4  CA81                    2647      AND.L   D1, D5              Mask D5 with mask value
000031E6  E889                    2648      LSR.L   #4, D1              Update the mask to next digit, by shifting 4
000031E8  E7BD                    2649      ROL.L   D3, D5              ROL once to bring MSB to LSB
000031EA  1805                    2650      MOVE.B  D5, D4              Extract the digit
000031EC  4EB8 16D8               2651      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
000031F0  23FC 00000000 00006022  2652      MOVE.L  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
000031FA  13C4 00006022           2653      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
00003200  43F9 00006022           2654      LEA     PRINT_ADDR_CHAR,A1  |
00003206  103C 000E               2655      MOVE.B  #14,D0              |
0000320A  4E4F                    2656      TRAP    #15                 V
0000320C  0C02 0008               2657      CMPI.B  #8, D2              IF counter equals terminal value
00003210  6700 0008               2658      BEQ     EXIT_IMDATA_LOOP_L_RHS Exit the loop
00003214  5803                    2659      ADDQ.B  #4, D3              Else update shift value to next digit
00003216  5202                    2660      ADDQ.B  #1, D2              Counter++
00003218  60C8                    2661      BRA     IMDATA_LOOP_L_RHS   Loop to start of loop
0000321A                          2662  EXIT_IMDATA_LOOP_L_RHS
0000321A  4EB8 15F4               2663      JSR     CLEAR_NEXT_LINE
0000321E  4EF8 1222               2664      JMP     PRINT_LOGIC
00003222                          2665  DECODE_IMDATA_LHS
00003222  4EB8 15DA               2666      JSR     PRINT_IMDATA
00003226  4EB9 00003C0E           2667      JSR     CLR_DATAREG_D6      Clear all registers before calculation
0000322C  143C 0001               2668      MOVE.B  #1, D2              Counter Variable
00003230  163C 0004               2669      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
00003234                          2670      
00003234  0C39 0001 00006036      2671      CMP.B   #1, IS_LONG         Check to see if it is LONG IM_DATA
0000323C  6700 0066               2672      BEQ     IS_LONG_IMDATA  
00003240                          2673      
00003240                          2674      *For when word
00003240  323C F000               2675      MOVE.W  #$F000, D1          Move the masking value to D1
00003244  3C1D                    2676      MOVE.W  (A5)+, D6           Put current addr into D6, to hold addr value
00003246  6000 0018               2677      BRA     IMDATA_LOOP_W_LHS
0000324A                          2678  
0000324A                          2679  SET_MOVEQ_IMDATA        
0000324A  0C39 0001 00006046      2680      CMP.B   #1, IS_MOVEQ        IF we get here, we are trying to print
00003252  3C02                    2681      MOVE.W  D2, D6              8BIT DATA for MOVEQ, so we reinitialize
00003254  143C 0001               2682      MOVE.B  #1, D2              Counter Variable
00003258  163C 0004               2683      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
0000325C  323C F000               2684      MOVE.W  #$F000, D1          Move the masking value to D1
00003260                          2685      
00003260                          2686  IMDATA_LOOP_W_LHS
00003260  3A06                    2687      MOVE.W  D6, D5              D5 will hold addr for manipulation
00003262  CA41                    2688      AND.W   D1, D5              Mask D5 with mask value
00003264  E849                    2689      LSR.W   #4, D1              Update the mask to next digit, by shifting 4
00003266  E77D                    2690      ROL.W   D3, D5              ROL once to bring MSB to LSB
00003268  1805                    2691      MOVE.B  D5, D4              Extract the digit
0000326A  4EB8 16D8               2692      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
0000326E  33FC 0000 00006022      2693      MOVE.W  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
00003276  13C4 00006022           2694      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
0000327C  43F9 00006022           2695      LEA     PRINT_ADDR_CHAR,A1  |
00003282  103C 000E               2696      MOVE.B  #14,D0              |
00003286  4E4F                    2697      TRAP    #15                 V
00003288  0C02 0004               2698      CMPI.B  #4,D2               IF counter equals terminal value
0000328C  6700 0008               2699      BEQ     EXIT_IMDATA_LOOP_W_LHS Exit the loop
00003290  5803                    2700      ADDQ.B  #4, D3              Else update shift value to next digit
00003292  5202                    2701      ADDQ.B  #1, D2              Counter++
00003294  60CA                    2702      BRA     IMDATA_LOOP_W_LHS   Loop to start of loop
00003296                          2703  EXIT_IMDATA_LOOP_W_LHS
00003296  4EB8 15BE               2704      JSR     PRINT_COMMA
0000329A  4EF9 000037B0           2705      JMP     CHECK_DECODE_RHS
000032A0  4EF8 1222               2706      JMP     PRINT_LOGIC 
000032A4                          2707      
000032A4                          2708  IS_LONG_IMDATA
000032A4  223C F0000000           2709      MOVE.L  #$F0000000, D1      Move the masking value to D1
000032AA  2C1D                    2710      MOVE.L  (A5)+, D6           Put current addr into D6, to hold addr value
000032AC                          2711      
000032AC                          2712  IMDATA_LOOP_L_LHS
000032AC  2A06                    2713      MOVE.L  D6, D5              D5 will hold addr for manipulation
000032AE  CA81                    2714      AND.L   D1, D5              Mask D5 with mask value
000032B0  E889                    2715      LSR.L   #4, D1              Update the mask to next digit, by shifting 4
000032B2  E7BD                    2716      ROL.L   D3, D5              ROL once to bring MSB to LSB
000032B4  1805                    2717      MOVE.B  D5, D4              Extract the digit
000032B6  4EB8 16D8               2718      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
000032BA  23FC 00000000 00006022  2719      MOVE.L  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
000032C4  13C4 00006022           2720      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
000032CA  43F9 00006022           2721      LEA     PRINT_ADDR_CHAR,A1  |
000032D0  103C 000E               2722      MOVE.B  #14,D0              |
000032D4  4E4F                    2723      TRAP    #15                 V
000032D6  0C02 0008               2724      CMPI.B  #8, D2              IF counter equals terminal value
000032DA  6700 0008               2725      BEQ     EXIT_IMDATA_LOOP_L_LHS Exit the loop
000032DE  5803                    2726      ADDQ.B  #4, D3              Else update shift value to next digit
000032E0  5202                    2727      ADDQ.B  #1, D2              Counter++
000032E2  60C8                    2728      BRA     IMDATA_LOOP_L_LHS   Loop to start of loop
000032E4                          2729  
000032E4                          2730  EXIT_IMDATA_LOOP_L_LHS
000032E4  4EB8 15BE               2731      JSR     PRINT_COMMA
000032E8  4EF9 000037B0           2732      JMP     CHECK_DECODE_RHS
000032EE  4EF8 1222               2733      JMP     PRINT_LOGIC
000032F2                          2734  DECODE_ADD_DATA_REG_LHS
000032F2  4EB8 218E               2735      JSR     GET_REGISTER_BITS
000032F6  B43C 0000               2736      CMP.B   #0, D2
000032FA  6700 E772               2737      BEQ     PRINT_D0_LHS
000032FE  B43C 0001               2738      CMP.B   #1, D2
00003302  6700 E784               2739      BEQ     PRINT_D1_LHS
00003306  B43C 0002               2740      CMP.B   #2, D2
0000330A  6700 E796               2741      BEQ     PRINT_D2_LHS
0000330E  B43C 0003               2742      CMP.B   #3, D2
00003312  6700 E7A8               2743      BEQ     PRINT_D3_LHS
00003316  B43C 0004               2744      CMP.B   #4, D2
0000331A  6700 E7BA               2745      BEQ     PRINT_D4_LHS
0000331E  B43C 0005               2746      CMP.B   #5, D2
00003322  6700 E7CC               2747      BEQ     PRINT_D5_LHS
00003326  B43C 0006               2748      CMP.B   #6, D2
0000332A  6700 E7DE               2749      BEQ     PRINT_D6_LHS
0000332E  B43C 0007               2750      CMP.B   #7, D2
00003332  6700 E7F0               2751      BEQ     PRINT_D7_LHS
00003336  4EF8 1222               2752      JMP     PRINT_LOGIC 
0000333A                          2753  DECODE_DATA_REG_LHS
0000333A  4EB8 21CE               2754      JSR     GET_EAREG_BITS
0000333E  B43C 0000               2755      CMP.B   #0, D2
00003342  6700 E72A               2756      BEQ     PRINT_D0_LHS
00003346  B43C 0001               2757      CMP.B   #1, D2
0000334A  6700 E73C               2758      BEQ     PRINT_D1_LHS
0000334E  B43C 0002               2759      CMP.B   #2, D2
00003352  6700 E74E               2760      BEQ     PRINT_D2_LHS
00003356  B43C 0003               2761      CMP.B   #3, D2
0000335A  6700 E760               2762      BEQ     PRINT_D3_LHS
0000335E  B43C 0004               2763      CMP.B   #4, D2
00003362  6700 E772               2764      BEQ     PRINT_D4_LHS
00003366  B43C 0005               2765      CMP.B   #5, D2
0000336A  6700 E784               2766      BEQ     PRINT_D5_LHS
0000336E  B43C 0006               2767      CMP.B   #6, D2
00003372  6700 E796               2768      BEQ     PRINT_D6_LHS
00003376  B43C 0007               2769      CMP.B   #7, D2
0000337A  6700 E7A8               2770      BEQ     PRINT_D7_LHS
0000337E  4EF8 1222               2771      JMP     PRINT_LOGIC 
00003382                          2772  DECODE_ADDR_REG_LHS
00003382  4EB8 21CE               2773      JSR     GET_EAREG_BITS
00003386  B43C 0000               2774      CMP.B   #0, D2
0000338A  6700 E7B2               2775      BEQ     PRINT_A0_LHS
0000338E  B43C 0001               2776      CMP.B   #1, D2
00003392  6700 E7C4               2777      BEQ     PRINT_A1_LHS
00003396  B43C 0002               2778      CMP.B   #2, D2
0000339A  6700 E7D6               2779      BEQ     PRINT_A2_LHS
0000339E  B43C 0003               2780      CMP.B   #3, D2
000033A2  6700 E7E8               2781      BEQ     PRINT_A3_LHS
000033A6  B43C 0004               2782      CMP.B   #4, D2
000033AA  6700 E7FA               2783      BEQ     PRINT_A4_LHS
000033AE  B43C 0005               2784      CMP.B   #5, D2
000033B2  6700 E80C               2785      BEQ     PRINT_A5_LHS
000033B6  B43C 0006               2786      CMP.B   #6, D2
000033BA  6700 E81E               2787      BEQ     PRINT_A6_LHS
000033BE  B43C 0007               2788      CMP.B   #7, D2
000033C2  6700 E830               2789      BEQ     PRINT_A7_LHS
000033C6  4EF8 1222               2790      JMP     PRINT_LOGIC 
000033CA                          2791  DECODE_ADDRP_REG_LHS
000033CA  4EB8 21CE               2792      JSR     GET_EAREG_BITS
000033CE  B43C 0000               2793      CMP.B   #0, D2
000033D2  6700 E83A               2794      BEQ     PRINT_A0_P_LHS
000033D6  B43C 0001               2795      CMP.B   #1, D2
000033DA  6700 E84C               2796      BEQ     PRINT_A1_P_LHS
000033DE  B43C 0002               2797      CMP.B   #2, D2
000033E2  6700 E85E               2798      BEQ     PRINT_A2_P_LHS
000033E6  B43C 0003               2799      CMP.B   #3, D2
000033EA  6700 E870               2800      BEQ     PRINT_A3_P_LHS
000033EE  B43C 0004               2801      CMP.B   #4, D2
000033F2  6700 E882               2802      BEQ     PRINT_A4_P_LHS
000033F6  B43C 0005               2803      CMP.B   #5, D2
000033FA  6700 E894               2804      BEQ     PRINT_A5_P_LHS
000033FE  B43C 0006               2805      CMP.B   #6, D2
00003402  6700 E8A6               2806      BEQ     PRINT_A6_P_LHS
00003406  B43C 0007               2807      CMP.B   #7, D2
0000340A  6700 E8B8               2808      BEQ     PRINT_A7_P_LHS
0000340E  4EF8 1222               2809      JMP     PRINT_LOGIC 
00003412                          2810  DECODE_ADDRPLUS_REG_LHS
00003412  4EB8 21CE               2811      JSR     GET_EAREG_BITS
00003416  B43C 0000               2812      CMP.B   #0, D2
0000341A  6700 E8C2               2813      BEQ     PRINT_A0_PP_LHS
0000341E  B43C 0001               2814      CMP.B   #1, D2
00003422  6700 E8D4               2815      BEQ     PRINT_A1_PP_LHS
00003426  B43C 0002               2816      CMP.B   #2, D2
0000342A  6700 E8E6               2817      BEQ     PRINT_A2_PP_LHS
0000342E  B43C 0003               2818      CMP.B   #3, D2
00003432  6700 E8F8               2819      BEQ     PRINT_A3_PP_LHS
00003436  B43C 0004               2820      CMP.B   #4, D2
0000343A  6700 E90A               2821      BEQ     PRINT_A4_PP_LHS
0000343E  B43C 0005               2822      CMP.B   #5, D2
00003442  6700 E91C               2823      BEQ     PRINT_A5_PP_LHS
00003446  B43C 0006               2824      CMP.B   #6, D2
0000344A  6700 E92E               2825      BEQ     PRINT_A6_PP_LHS
0000344E  B43C 0007               2826      CMP.B   #7, D2
00003452  6700 E940               2827      BEQ     PRINT_A7_PP_LHS
00003456  4EF8 1222               2828      JMP     PRINT_LOGIC 
0000345A                          2829  DECODE_MINUSADDR_REG_LHS
0000345A  4EB8 21CE               2830      JSR     GET_EAREG_BITS
0000345E  B43C 0000               2831      CMP.B   #0, D2
00003462  6700 E94A               2832      BEQ     PRINT_A0_PM_LHS
00003466  B43C 0001               2833      CMP.B   #1, D2
0000346A  6700 E95C               2834      BEQ     PRINT_A1_PM_LHS
0000346E  B43C 0002               2835      CMP.B   #2, D2
00003472  6700 E96E               2836      BEQ     PRINT_A2_PM_LHS
00003476  B43C 0003               2837      CMP.B   #3, D2
0000347A  6700 E980               2838      BEQ     PRINT_A3_PM_LHS
0000347E  B43C 0004               2839      CMP.B   #4, D2
00003482  6700 E992               2840      BEQ     PRINT_A4_PM_LHS
00003486  B43C 0005               2841      CMP.B   #5, D2
0000348A  6700 E9A4               2842      BEQ     PRINT_A5_PM_LHS
0000348E  B43C 0006               2843      CMP.B   #6, D2
00003492  6700 E9B6               2844      BEQ     PRINT_A6_PM_LHS
00003496  B43C 0007               2845      CMP.B   #7, D2
0000349A  6700 E9C8               2846      BEQ     PRINT_A7_PM_LHS
0000349E  4EF8 1222               2847      JMP     PRINT_LOGIC 
000034A2                          2848  DECODE_EA_REG_LHS
000034A2  4EB8 21CE               2849      JSR     GET_EAREG_BITS
000034A6  B43C 0000               2850      CMP.B   #0, D2              (xxxx).W
000034AA  6700 0016               2851      BEQ     DECODE_EA_WORD_LHS
000034AE  B43C 0001               2852      CMP.B   #1, D2              (xxxx).L
000034B2  6700 006A               2853      BEQ     DECODE_EA_LONG_LHS
000034B6  B43C 0004               2854      CMP.B   #4, D2              #DATA
000034BA  6700 FD66               2855      BEQ     DECODE_IMDATA_LHS
000034BE  4EF8 1222               2856      JMP     PRINT_LOGIC
000034C2                          2857  DECODE_EA_WORD_LHS
000034C2  4EB8 15CC               2858      JSR     PRINT_DOLLAR
000034C6  4EB9 00003C0E           2859      JSR     CLR_DATAREG_D6      Clear all registers before calculation
000034CC  3C1D                    2860      MOVE.W  (A5)+,D6            Put addr1's addr into D6, to hold addr value
000034CE  143C 0001               2861      MOVE.B  #1, D2              Counter Variable
000034D2  163C 0004               2862      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
000034D6  323C F000               2863      MOVE.W  #$F000, D1          Move the masking value to D1
000034DA                          2864      
000034DA                          2865  EA_WORD_LOOP_LHS
000034DA  3A06                    2866      MOVE.W  D6, D5              D5 will hold addr for manipulation
000034DC  CA41                    2867      AND.W   D1, D5              Mask D5 with mask value
000034DE  E849                    2868      LSR.W   #4, D1              Update the mask to next digit, by shifting 4
000034E0  E77D                    2869      ROL.W   D3, D5              ROL once to bring MSB to LSB
000034E2  1805                    2870      MOVE.B  D5, D4              Extract the digit
000034E4  4EB8 16D8               2871      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
000034E8  33FC 0000 00006022      2872      MOVE.W  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
000034F0  13C4 00006022           2873      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
000034F6  43F9 00006022           2874      LEA     PRINT_ADDR_CHAR,A1  |
000034FC  103C 000E               2875      MOVE.B  #14,D0              |
00003500  4E4F                    2876      TRAP    #15                 V
00003502  0C02 0004               2877      CMPI.B  #4, D2              IF counter equals terminal value
00003506  6700 0008               2878      BEQ     EXIT_EA_WORD_LOOP_LHS   Exit the loop
0000350A  5803                    2879      ADDQ.B  #4, D3              Else update shift value to next digit
0000350C  5202                    2880      ADDQ.B  #1, D2              Counter++
0000350E  60CA                    2881      BRA     EA_WORD_LOOP_LHS    Loop to start of loop
00003510                          2882  EXIT_EA_WORD_LOOP_LHS
00003510  4EB8 15BE               2883      JSR     PRINT_COMMA
00003514  4EF9 000037B0           2884      JMP     CHECK_DECODE_RHS
0000351A  4EF8 1222               2885      JMP     PRINT_LOGIC
0000351E                          2886  DECODE_EA_LONG_LHS
0000351E  4EB8 15CC               2887      JSR     PRINT_DOLLAR
00003522  4EB9 00003C0E           2888      JSR     CLR_DATAREG_D6      Clear all registers before calculation
00003528  2C1D                    2889      MOVE.L  (A5)+, D6           Put addr1's addr into D6, to hold addr value
0000352A  143C 0001               2890      MOVE.B  #1, D2              Counter Variable
0000352E  163C 0004               2891      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
00003532  223C F0000000           2892      MOVE.L  #$F0000000, D1      Move the masking value to D1
00003538                          2893      
00003538                          2894  EA_LONG_LOOP_LHS
00003538  2A06                    2895      MOVE.L  D6, D5              D5 will hold addr for manipulation
0000353A  CA81                    2896      AND.L   D1, D5              Mask D5 with mask value
0000353C  E889                    2897      LSR.L   #4, D1              Update the mask to next digit, by shifting 4
0000353E  E7BD                    2898      ROL.L   D3, D5              ROL once to bring MSB to LSB
00003540  1805                    2899      MOVE.B  D5, D4              Extract the digit
00003542  4EB8 16D8               2900      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
00003546  23FC 00000000 00006022  2901      MOVE.L  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
00003550  13C4 00006022           2902      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
00003556  43F9 00006022           2903      LEA     PRINT_ADDR_CHAR,A1  |
0000355C  103C 000E               2904      MOVE.B  #14,D0              |
00003560  4E4F                    2905      TRAP    #15                 V
00003562  0C02 0008               2906      CMPI.B  #8, D2              IF counter equals terminal value
00003566  6700 0008               2907      BEQ     EXIT_EA_LONG_LOOP_LHS   Exit the loop
0000356A  5803                    2908      ADDQ.B  #4, D3              Else update shift value to next digit
0000356C  5202                    2909      ADDQ.B  #1, D2              Counter++
0000356E  60C8                    2910      BRA     EA_LONG_LOOP_LHS    Loop to start of loop
00003570                          2911  EXIT_EA_LONG_LOOP_LHS
00003570  4EB8 15BE               2912      JSR     PRINT_COMMA
00003574  4EF9 000037B0           2913      JMP     CHECK_DECODE_RHS
0000357A  4EF8 1222               2914      JMP     PRINT_LOGIC
0000357E                          2915  DECODE_DATA_REG_ONE_OPERAND
0000357E  4EB8 21CE               2916      JSR GET_EAREG_BITS
00003582  B43C 0000               2917      CMP.B   #0, D2
00003586  6700 E1C6               2918      BEQ     PRINT_D0_RHS
0000358A  B43C 0001               2919      CMP.B   #1, D2
0000358E  6700 E1D2               2920      BEQ     PRINT_D1_RHS
00003592  B43C 0002               2921      CMP.B   #2, D2
00003596  6700 E1DE               2922      BEQ     PRINT_D2_RHS
0000359A  B43C 0003               2923      CMP.B   #3, D2
0000359E  6700 E1EA               2924      BEQ     PRINT_D3_RHS
000035A2  B43C 0004               2925      CMP.B   #4, D2
000035A6  6700 E1F6               2926      BEQ     PRINT_D4_RHS
000035AA  B43C 0005               2927      CMP.B   #5, D2
000035AE  6700 E202               2928      BEQ     PRINT_D5_RHS
000035B2  B43C 0006               2929      CMP.B   #6, D2
000035B6  6700 E20E               2930      BEQ     PRINT_D6_RHS
000035BA  B43C 0007               2931      CMP.B   #7, D2
000035BE  6700 E21A               2932      BEQ     PRINT_D7_RHS
000035C2  4EF8 1222               2933      JMP     PRINT_LOGIC 
000035C6                          2934  DECODE_ADDR_REG_ONE_OPERAND
000035C6  4EB8 21CE               2935      JSR     GET_EAREG_BITS
000035CA  B43C 0000               2936      CMP.B   #0, D2
000035CE  6700 E21E               2937      BEQ     PRINT_A0_RHS
000035D2  B43C 0001               2938      CMP.B   #1, D2
000035D6  6700 E22A               2939      BEQ     PRINT_A1_RHS
000035DA  B43C 0002               2940      CMP.B   #2, D2
000035DE  6700 E236               2941      BEQ     PRINT_A2_RHS
000035E2  B43C 0003               2942      CMP.B   #3, D2
000035E6  6700 E242               2943      BEQ     PRINT_A3_RHS
000035EA  B43C 0004               2944      CMP.B   #4, D2
000035EE  6700 E24E               2945      BEQ     PRINT_A4_RHS
000035F2  B43C 0005               2946      CMP.B   #5, D2
000035F6  6700 E25A               2947      BEQ     PRINT_A5_RHS
000035FA  B43C 0006               2948      CMP.B   #6, D2
000035FE  6700 E266               2949      BEQ     PRINT_A6_RHS
00003602  B43C 0007               2950      CMP.B   #7, D2
00003606  6700 E272               2951      BEQ     PRINT_A7_RHS
0000360A  4EF8 1222               2952      JMP     PRINT_LOGIC 
0000360E                          2953  DECODE_ADDRP_REG_ONE_OPERAND
0000360E  4EB8 21CE               2954      JSR     GET_EAREG_BITS
00003612  B43C 0000               2955      CMP.B   #0, D2
00003616  6700 E276               2956      BEQ     PRINT_A0_P_RHS
0000361A  B43C 0001               2957      CMP.B   #1, D2
0000361E  6700 E282               2958      BEQ     PRINT_A1_P_RHS
00003622  B43C 0002               2959      CMP.B   #2, D2
00003626  6700 E28E               2960      BEQ     PRINT_A2_P_RHS
0000362A  B43C 0003               2961      CMP.B   #3, D2
0000362E  6700 E29A               2962      BEQ     PRINT_A3_P_RHS
00003632  B43C 0004               2963      CMP.B   #4, D2
00003636  6700 E2A6               2964      BEQ     PRINT_A4_P_RHS
0000363A  B43C 0005               2965      CMP.B   #5, D2
0000363E  6700 E2B2               2966      BEQ     PRINT_A5_P_RHS
00003642  B43C 0006               2967      CMP.B   #6, D2
00003646  6700 E2BE               2968      BEQ     PRINT_A6_P_RHS
0000364A  B43C 0007               2969      CMP.B   #7, D2
0000364E  6700 E2CA               2970      BEQ     PRINT_A7_P_RHS
00003652  4EF8 1222               2971      JMP     PRINT_LOGIC 
00003656                          2972  DECODE_ADDRPLUS_REG_ONE_OPERAND
00003656  4EB8 21CE               2973      JSR     GET_EAREG_BITS
0000365A  B43C 0000               2974      CMP.B   #0, D2
0000365E  6700 E2CE               2975      BEQ     PRINT_A0_PP_RHS
00003662  B43C 0001               2976      CMP.B   #1, D2
00003666  6700 E2DA               2977      BEQ     PRINT_A1_PP_RHS
0000366A  B43C 0002               2978      CMP.B   #2, D2
0000366E  6700 E2E6               2979      BEQ     PRINT_A2_PP_RHS
00003672  B43C 0003               2980      CMP.B   #3, D2
00003676  6700 E2F2               2981      BEQ     PRINT_A3_PP_RHS
0000367A  B43C 0004               2982      CMP.B   #4, D2
0000367E  6700 E2FE               2983      BEQ     PRINT_A4_PP_RHS
00003682  B43C 0005               2984      CMP.B   #5, D2
00003686  6700 E30A               2985      BEQ     PRINT_A5_PP_RHS
0000368A  B43C 0006               2986      CMP.B   #6, D2
0000368E  6700 E316               2987      BEQ     PRINT_A6_PP_RHS
00003692  B43C 0007               2988      CMP.B   #7, D2
00003696  6700 E322               2989      BEQ     PRINT_A7_PP_RHS
0000369A  4EF8 1222               2990      JMP     PRINT_LOGIC 
0000369E                          2991  DECODE_MINUSADDR_REG_ONE_OPERAND
0000369E  4EB8 21CE               2992      JSR     GET_EAREG_BITS
000036A2  B43C 0000               2993      CMP.B   #0, D2
000036A6  6700 E326               2994      BEQ     PRINT_A0_PM_RHS
000036AA  B43C 0001               2995      CMP.B   #1, D2
000036AE  6700 E332               2996      BEQ     PRINT_A1_PM_RHS
000036B2  B43C 0002               2997      CMP.B   #2, D2
000036B6  6700 E33E               2998      BEQ     PRINT_A2_PM_RHS
000036BA  B43C 0003               2999      CMP.B   #3, D2
000036BE  6700 E34A               3000      BEQ     PRINT_A3_PM_RHS
000036C2  B43C 0004               3001      CMP.B   #4, D2
000036C6  6700 E356               3002      BEQ     PRINT_A4_PM_RHS
000036CA  B43C 0005               3003      CMP.B   #5, D2
000036CE  6700 E362               3004      BEQ     PRINT_A5_PM_RHS
000036D2  B43C 0006               3005      CMP.B   #6, D2
000036D6  6700 E36E               3006      BEQ     PRINT_A6_PM_RHS
000036DA  B43C 0007               3007      CMP.B   #7, D2
000036DE  6700 E37A               3008      BEQ     PRINT_A7_PM_RHS
000036E2  4EF8 1222               3009      JMP     PRINT_LOGIC 
000036E6                          3010  DECODE_EA_REG_ONE_OPERAND
000036E6  4EB8 21CE               3011      JSR     GET_EAREG_BITS
000036EA  B43C 0000               3012      CMP.B   #0, D2              (xxxx).W
000036EE  6700 F9D8               3013      BEQ     DECODE_EA_WORD_RHS
000036F2  B43C 0001               3014      CMP.B   #1, D2              (xxxx).L
000036F6  6700 FA26               3015      BEQ     DECODE_EA_LONG_RHS
000036FA  4EF8 1222               3016      JMP     PRINT_LOGIC
000036FE                          3017  DECODE_EA_WORD_ONE_OPERAND
000036FE  4EB8 15CC               3018      JSR     PRINT_DOLLAR
00003702  4EB9 00003C0E           3019      JSR     CLR_DATAREG_D6      Clear all registers before calculation
00003708  3C1D                    3020      MOVE.W  (A5)+,D6            Put addr1's addr into D6, to hold addr value
0000370A  143C 0001               3021      MOVE.B  #1, D2              Counter Variable
0000370E  163C 0004               3022      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
00003712  323C F000               3023      MOVE.W  #$F000, D1          Move the masking value to D1
00003716                          3024      
00003716                          3025  EA_WORD_LOOP_ONE_OPERAND
00003716  3A06                    3026      MOVE.W  D6, D5              D5 will hold addr for manipulation
00003718  CA41                    3027      AND.W   D1, D5              Mask D5 with mask value
0000371A  E849                    3028      LSR.W   #4, D1              Update the mask to next digit, by shifting 4
0000371C  E77D                    3029      ROL.W   D3, D5              ROL once to bring MSB to LSB
0000371E  1805                    3030      MOVE.B  D5, D4              Extract the digit
00003720  4EB8 16D8               3031      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
00003724  33FC 0000 00006022      3032      MOVE.W  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
0000372C  13C4 00006022           3033      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
00003732  43F9 00006022           3034      LEA     PRINT_ADDR_CHAR,A1  |
00003738  103C 000E               3035      MOVE.B  #14,D0              |
0000373C  4E4F                    3036      TRAP    #15                 V
0000373E  0C02 0004               3037      CMPI.B  #4, D2              IF counter equals terminal value
00003742  6700 000A               3038      BEQ     EXIT_EA_WORD_LOOP_ONE_OPERAND   Exit the loop
00003746  5803                    3039      ADDQ.B  #4, D3              Else update shift value to next digit
00003748  5202                    3040      ADDQ.B  #1, D2              Counter++
0000374A  6000 F994               3041      BRA     EA_WORD_LOOP_RHS    Loop to start of loop
0000374E                          3042  EXIT_EA_WORD_LOOP_ONE_OPERAND
0000374E  4EB8 15F4               3043      JSR     CLEAR_NEXT_LINE
00003752  4EF8 1222               3044      JMP     PRINT_LOGIC
00003756                          3045  DECODE_EA_LONG_ONE_OPERAND
00003756  4EB8 15CC               3046      JSR     PRINT_DOLLAR
0000375A  4EB9 00003C0E           3047      JSR     CLR_DATAREG_D6      Clear all registers before calculation
00003760  2C1D                    3048      MOVE.L  (A5)+, D6           Put addr1's addr into D6, to hold addr value
00003762  143C 0001               3049      MOVE.B  #1, D2              Counter Variable
00003766  163C 0004               3050      MOVE.B  #4, D3              D3 will hold starting shift value, as 4
0000376A  223C F0000000           3051      MOVE.L  #$F0000000, D1      Move the masking value to D1
00003770                          3052      
00003770                          3053  EA_LONG_LOOP_ONE_OPERAND
00003770  2A06                    3054      MOVE.L  D6, D5              D5 will hold addr for manipulation
00003772  CA81                    3055      AND.L   D1, D5              Mask D5 with mask value
00003774  E889                    3056      LSR.L   #4, D1              Update the mask to next digit, by shifting 4
00003776  E7BD                    3057      ROL.L   D3, D5              ROL once to bring MSB to LSB
00003778  1805                    3058      MOVE.B  D5, D4              Extract the digit
0000377A  4EB8 16D8               3059      JSR     CHECK_CONVERSION    Send the extracted digit for conversion
0000377E  23FC 00000000 00006022  3060      MOVE.L  #0,(PRINT_ADDR_CHAR) Initialize addr with a 0 for null termination
00003788  13C4 00006022           3061      MOVE.B  D4,(PRINT_ADDR_CHAR) Print the converted digit
0000378E  43F9 00006022           3062      LEA     PRINT_ADDR_CHAR,A1  |
00003794  103C 000E               3063      MOVE.B  #14,D0              |
00003798  4E4F                    3064      TRAP    #15                 V
0000379A  0C02 0008               3065      CMPI.B  #8, D2              IF counter equals terminal value
0000379E  6700 0008               3066      BEQ     EXIT_EA_LONG_LOOP_ONE_OPERAND   Exit the loop
000037A2  5803                    3067      ADDQ.B  #4, D3              Else update shift value to next digit
000037A4  5202                    3068      ADDQ.B  #1, D2              Counter++
000037A6  60C8                    3069      BRA     EA_LONG_LOOP_ONE_OPERAND    Loop to start of loop
000037A8                          3070  EXIT_EA_LONG_LOOP_ONE_OPERAND
000037A8  4EB8 15F4               3071      JSR     CLEAR_NEXT_LINE
000037AC  4EF8 1222               3072      JMP     PRINT_LOGIC
000037B0                          3073  CHECK_DECODE_RHS
000037B0  0C39 0001 00006030      3074      CMP.B   #1, IS_CMP          Decode RHS for CMP
000037B8  6700 00EA               3075      BEQ     CMP_RHS
000037BC  0C39 0001 00006038      3076      CMP.B   #1, IS_LEA          Decode RHS for LEA
000037C4  6700 00E2               3077      BEQ     LEA_RHS
000037C8  0C39 0001 00006040      3078      CMP.B   #1, IS_MOVE         Decode RHS for MOVE
000037D0  6700 00EE               3079      BEQ     MOVE_RHS            
000037D4  0C39 0001 00006046      3080      CMP.B   #1, IS_MOVEQ        Decode RHS for MOVEQ
000037DC  6700 00D6               3081      BEQ     MOVEQ_RHS
000037E0  0C39 0001 00006048      3082      CMP.B   #1, IS_MOVEM        Decode RHS for MOVEM ONLY for Mem to Reg 
000037E8  6700 00CE               3083      BEQ     MOVEM_RHS 
000037EC  0C39 0001 00006042      3084      CMP.B   #1, IS_MULS         Decode RHS for MULS
000037F4  6700 00B6               3085      BEQ     MULS_RHS
000037F8  0C39 0001 00006052      3086      CMP.B   #1, IS_ADDB         DST for ADD excludes An, #<data>
00003800  6700 00EA               3087      BEQ     ADDB_RHS
00003804  0C39 0001 00006058      3088      CMP.B   #1, IS_ADDW         DST for ADD excludes #<data>
0000380C  6700 0126               3089      BEQ     ADD_W_L_RHS 
00003810  0C39 0001 00006060      3090      CMP.B   #1, IS_ADDL
00003818  6700 011A               3091      BEQ     ADD_W_L_RHS 
0000381C  0C39 0001 00006044      3092      CMP.B   #1, IS_DIVU         Decode RHS for DIVS
00003824  6700 008A               3093      BEQ     DIVU_RHS
00003828  0C39 0001 00006056      3094      CMP.B   #1, IS_ADDI         DST for ADD excludes An, #<data>
00003830  6700 0152               3095      BEQ     ADDI_RHS
00003834  0C39 0001 00006054      3096      CMP.B   #1, IS_ADDA         DST for ADD excludes An, #<data>
0000383C  6700 0176               3097      BEQ     ADDA_RHS
00003840  0C39 0001 00006062      3098      CMP.B   #1, IS_ANDB         DST for ADD excludes An, #<data>
00003848  6700 0172               3099      BEQ     ANDB_RHS
0000384C  0C39 0001 00006064      3100      CMP.B   #1, IS_ANDW         DST for ADD excludes #<data>
00003854  6700 01AE               3101      BEQ     AND_W_L_RHS
00003858  0C39 0001 00006066      3102      CMP.B   #1, IS_ANDL
00003860  6700 01A2               3103      BEQ     AND_W_L_RHS
00003864  0C39 0001 00006068      3104      CMP.B   #1, IS_SUBI         DST for ADD excludes An, #<data>
0000386C  6700 01E6               3105      BEQ     SUBI_RHS
00003870  0C39 0001 00006070      3106      CMP.B   #1, IS_SUBB         DST for ADD excludes An, #<data>
00003878  6700 020A               3107      BEQ     SUBB_RHS
0000387C  0C39 0001 00006072      3108      CMP.B   #1, IS_SUBW         DST for ADD excludes #<data>
00003884  6700 0246               3109      BEQ     SUB_W_L_RHS
00003888  0C39 0001 00006074      3110      CMP.B   #1, IS_SUBL
00003890  6700 023A               3111      BEQ     SUB_W_L_RHS
00003894  0C39 0001 00006050      3112      CMP.B   #1, IS_STOP         Decode RHS for STOP    
0000389C  6700 001E               3113      BEQ     STOP_RHS
000038A0  4EF8 1222               3114      JMP     PRINT_LOGIC
000038A4                          3115  DECODE_RHS
000038A4                          3116      
000038A4                          3117  CMP_RHS
000038A4  4EF8 2F00               3118      JMP     DECODE_DATA_REG_RHS         DST for CMP is only Dn
000038A8                          3119  LEA_RHS        
000038A8  4EF8 2F90               3120      JMP     DECODE_ADDR_REG_RHS         DST for LEA is only An
000038AC                          3121  MULS_RHS
000038AC  4EF8 2F00               3122      JMP     DECODE_DATA_REG_RHS         DST for MULS is only Dn
000038B0                          3123  DIVU_RHS
000038B0  4EF8 2F00               3124      JMP     DECODE_DATA_REG_RHS         DST for DIVU is only Dn
000038B4                          3125  MOVEQ_RHS
000038B4  4EF8 2F00               3126      JMP     DECODE_DATA_REG_RHS         DST for MOVEQ is only Dn
000038B8                          3127  MOVEM_RHS   
000038B8  4EF8 250C               3128      JMP     DECODE_MOVEM_REGISTERS_RHS  DST for MOVEM (Mem to Reg)
000038BC                          3129  STOP_RHS
000038BC  4EF8 3178               3130      JMP     DECODE_IMDATA_RHS           STOP has only IM_DATA.W
000038C0                          3131  MOVE_RHS    
000038C0  4EB8 21AE               3132      JSR     GET_OPMODE_BITS             DST for MOVE is Dn/(An)/(An)+/-(An)/EA_W/L/IM_DATA
000038C4  B43C 0000               3133      CMP.B   #0, D2
000038C8  6700 F636               3134      BEQ     DECODE_DATA_REG_RHS
000038CC  B43C 0002               3135      CMP.B   #2, D2
000038D0  6700 F706               3136      BEQ     DECODE_ADDRP_REG_RHS
000038D4  B43C 0003               3137      CMP.B   #3, D2
000038D8  6700 F746               3138      BEQ     DECODE_ADDRPLUS_REG_RHS
000038DC  B43C 0004               3139      CMP.B   #4, D2
000038E0  6700 F786               3140      BEQ     DECODE_MINUSADDR_REG_RHS
000038E4  B43C 0007               3141      CMP.B   #7, D2
000038E8  6700 F7C6               3142      BEQ     DECODE_EA_REG_RHS
000038EC                          3143  
000038EC                          3144  ADDB_RHS                         
000038EC  0C39 0001 00006102      3145      CMP.B   #1, IS_EATODN
000038F4  6700 F60A               3146      BEQ     DECODE_DATA_REG_RHS
000038F8                          3147      
000038F8  4EB8 21BE               3148      JSR     GET_EAMODE_BITS             DST for ADDB is (An)/(An)+/-(An)/EA_W/EA_L
000038FC  B43C 0000               3149      CMP.B   #0, D2
00003900  6700 F5FE               3150      BEQ     DECODE_DATA_REG_RHS
00003904  B43C 0002               3151      CMP.B   #2, D2
00003908  6700 F6CE               3152      BEQ     DECODE_ADDRP_REG_RHS
0000390C  B43C 0003               3153      CMP.B   #3, D2
00003910  6700 F70E               3154      BEQ     DECODE_ADDRPLUS_REG_RHS
00003914  B43C 0004               3155      CMP.B   #4, D2
00003918  6700 F74E               3156      BEQ     DECODE_MINUSADDR_REG_RHS
0000391C  0C39 0001 00006100      3157      CMP.B   #1, IS_DNTOEA
00003924  6700 FDC0               3158      BEQ     DECODE_EA_REG_ONE_OPERAND
00003928  B43C 0007               3159      CMP.B   #7, D2
0000392C  6700 F782               3160      BEQ     DECODE_EA_REG_RHS           
00003930  4EF8 1222               3161      JMP     PRINT_LOGIC 
00003934                          3162  
00003934                          3163  ADD_W_L_RHS 
00003934  0C39 0001 00006102      3164      CMP.B   #1, IS_EATODN
0000393C  6700 F5C2               3165      BEQ     DECODE_DATA_REG_RHS
00003940                          3166      
00003940  4EB8 21BE               3167      JSR     GET_EAMODE_BITS             DST for ADD.W/ADD.L is same 
00003944  B43C 0000               3168      CMP.B   #0, D2
00003948  6700 F5B6               3169      BEQ     DECODE_DATA_REG_RHS
0000394C  B43C 0001               3170      CMP.B   #1, D2
00003950  6700 F63E               3171      BEQ     DECODE_ADDR_REG_RHS
00003954  B43C 0002               3172      CMP.B   #2, D2
00003958  6700 F67E               3173      BEQ     DECODE_ADDRP_REG_RHS
0000395C  B43C 0003               3174      CMP.B   #3, D2
00003960  6700 F6BE               3175      BEQ     DECODE_ADDRPLUS_REG_RHS
00003964  B43C 0004               3176      CMP.B   #4, D2
00003968  6700 F6FE               3177      BEQ     DECODE_MINUSADDR_REG_RHS
0000396C  0C39 0001 00006100      3178      CMP.B   #1, IS_DNTOEA
00003974  6700 FD70               3179      BEQ     DECODE_EA_REG_ONE_OPERAND
00003978  B43C 0007               3180      CMP.B   #7, D2
0000397C  6700 F732               3181      BEQ     DECODE_EA_REG_RHS           
00003980  4EF8 1222               3182      JMP     PRINT_LOGIC
00003984                          3183      
00003984                          3184  ADDI_RHS
00003984  4EB8 21BE               3185      JSR     GET_EAMODE_BITS             DST for ADDI is Dn/(An)/(An)+/-(An)/EA_W/EA_L
00003988  B43C 0000               3186      CMP.B   #0, D2
0000398C  6700 FBF0               3187      BEQ     DECODE_DATA_REG_ONE_OPERAND
00003990  B43C 0002               3188      CMP.B   #2, D2
00003994  6700 FC78               3189      BEQ     DECODE_ADDRP_REG_ONE_OPERAND
00003998  B43C 0003               3190      CMP.B   #3, D2
0000399C  6700 FCB8               3191      BEQ     DECODE_ADDRPLUS_REG_ONE_OPERAND
000039A0  B43C 0004               3192      CMP.B   #4, D2
000039A4  6700 FCF8               3193      BEQ     DECODE_MINUSADDR_REG_ONE_OPERAND
000039A8  B43C 0007               3194      CMP.B   #7, D2
000039AC  6700 FD38               3195      BEQ     DECODE_EA_REG_ONE_OPERAND
000039B0  4EF8 1222               3196      JMP     PRINT_LOGIC
000039B4                          3197  
000039B4                          3198  ADDA_RHS
000039B4  4EF8 2F90               3199      JMP     DECODE_ADDR_REG_RHS
000039B8  4EF8 1222               3200      JMP     PRINT_LOGIC
000039BC                          3201      
000039BC                          3202  ANDB_RHS                         
000039BC  0C39 0001 00006102      3203      CMP.B   #1, IS_EATODN
000039C4  6700 F53A               3204      BEQ     DECODE_DATA_REG_RHS
000039C8                          3205      
000039C8  4EB8 21BE               3206      JSR     GET_EAMODE_BITS             DST for ANDB is (An)/(An)+/-(An)/EA_W/EA_L
000039CC  B43C 0000               3207      CMP.B   #0, D2
000039D0  6700 F52E               3208      BEQ     DECODE_DATA_REG_RHS
000039D4  B43C 0002               3209      CMP.B   #2, D2
000039D8  6700 F5FE               3210      BEQ     DECODE_ADDRP_REG_RHS
000039DC  B43C 0003               3211      CMP.B   #3, D2
000039E0  6700 F63E               3212      BEQ     DECODE_ADDRPLUS_REG_RHS
000039E4  B43C 0004               3213      CMP.B   #4, D2
000039E8  6700 F67E               3214      BEQ     DECODE_MINUSADDR_REG_RHS
000039EC  0C39 0001 00006100      3215      CMP.B   #1, IS_DNTOEA
000039F4  6700 FCF0               3216      BEQ     DECODE_EA_REG_ONE_OPERAND
000039F8  B43C 0007               3217      CMP.B   #7, D2
000039FC  6700 F6B2               3218      BEQ     DECODE_EA_REG_RHS           
00003A00  4EF8 1222               3219      JMP     PRINT_LOGIC
00003A04                          3220  
00003A04                          3221  AND_W_L_RHS
00003A04  0C39 0001 00006102      3222      CMP.B   #1, IS_EATODN
00003A0C  6700 F4F2               3223      BEQ     DECODE_DATA_REG_RHS
00003A10                          3224      
00003A10  4EB8 21BE               3225      JSR     GET_EAMODE_BITS             DST for AND.W/AND.L is the same
00003A14  B43C 0000               3226      CMP.B   #0, D2
00003A18  6700 F4E6               3227      BEQ     DECODE_DATA_REG_RHS
00003A1C  B43C 0001               3228      CMP.B   #1, D2
00003A20  6700 F56E               3229      BEQ     DECODE_ADDR_REG_RHS
00003A24  B43C 0002               3230      CMP.B   #2, D2
00003A28  6700 F5AE               3231      BEQ     DECODE_ADDRP_REG_RHS
00003A2C  B43C 0003               3232      CMP.B   #3, D2
00003A30  6700 F5EE               3233      BEQ     DECODE_ADDRPLUS_REG_RHS
00003A34  B43C 0004               3234      CMP.B   #4, D2
00003A38  6700 F62E               3235      BEQ     DECODE_MINUSADDR_REG_RHS
00003A3C  0C39 0001 00006100      3236      CMP.B   #1, IS_DNTOEA
00003A44  6700 FCA0               3237      BEQ     DECODE_EA_REG_ONE_OPERAND
00003A48  B43C 0007               3238      CMP.B   #7, D2
00003A4C  6700 F662               3239      BEQ     DECODE_EA_REG_RHS           
00003A50  4EF8 1222               3240      JMP     PRINT_LOGIC
00003A54                          3241  
00003A54                          3242  SUBI_RHS
00003A54  4EB8 21BE               3243      JSR     GET_EAMODE_BITS             DST for ADDI is Dn/(An)/(An)+/-(An)/EA_W/EA_L
00003A58  B43C 0000               3244      CMP.B   #0, D2
00003A5C  6700 FB20               3245      BEQ     DECODE_DATA_REG_ONE_OPERAND
00003A60  B43C 0002               3246      CMP.B   #2, D2
00003A64  6700 FBA8               3247      BEQ     DECODE_ADDRP_REG_ONE_OPERAND
00003A68  B43C 0003               3248      CMP.B   #3, D2
00003A6C  6700 FBE8               3249      BEQ     DECODE_ADDRPLUS_REG_ONE_OPERAND
00003A70  B43C 0004               3250      CMP.B   #4, D2
00003A74  6700 FC28               3251      BEQ     DECODE_MINUSADDR_REG_ONE_OPERAND
00003A78  B43C 0007               3252      CMP.B   #7, D2
00003A7C  6700 FC68               3253      BEQ     DECODE_EA_REG_ONE_OPERAND
00003A80  4EF8 1222               3254      JMP     PRINT_LOGIC
00003A84                          3255  
00003A84                          3256  SUBB_RHS                         
00003A84  0C39 0001 00006102      3257      CMP.B   #1, IS_EATODN
00003A8C  6700 F472               3258      BEQ     DECODE_DATA_REG_RHS
00003A90                          3259      
00003A90  4EB8 21BE               3260      JSR     GET_EAMODE_BITS             DST for ADDB is (An)/(An)+/-(An)/EA_W/EA_L
00003A94  B43C 0000               3261      CMP.B   #0, D2
00003A98  6700 F466               3262      BEQ     DECODE_DATA_REG_RHS
00003A9C  B43C 0002               3263      CMP.B   #2, D2
00003AA0  6700 F536               3264      BEQ     DECODE_ADDRP_REG_RHS
00003AA4  B43C 0003               3265      CMP.B   #3, D2
00003AA8  6700 F576               3266      BEQ     DECODE_ADDRPLUS_REG_RHS
00003AAC  B43C 0004               3267      CMP.B   #4, D2
00003AB0  6700 F5B6               3268      BEQ     DECODE_MINUSADDR_REG_RHS
00003AB4  0C39 0001 00006100      3269      CMP.B   #1, IS_DNTOEA
00003ABC  6700 FC28               3270      BEQ     DECODE_EA_REG_ONE_OPERAND
00003AC0  B43C 0007               3271      CMP.B   #7, D2
00003AC4  6700 F5EA               3272      BEQ     DECODE_EA_REG_RHS           
00003AC8  4EF8 1222               3273      JMP     PRINT_LOGIC
00003ACC                          3274      
00003ACC                          3275  SUB_W_L_RHS
00003ACC  0C39 0001 00006102      3276      CMP.B   #1, IS_EATODN
00003AD4  6700 F42A               3277      BEQ     DECODE_DATA_REG_RHS
00003AD8                          3278      
00003AD8  4EB8 21BE               3279      JSR     GET_EAMODE_BITS             DST for SUB.W/SUB.L is the same
00003ADC  B43C 0000               3280      CMP.B   #0, D2
00003AE0  6700 F41E               3281      BEQ     DECODE_DATA_REG_RHS
00003AE4  B43C 0001               3282      CMP.B   #1, D2
00003AE8  6700 F4A6               3283      BEQ     DECODE_ADDR_REG_RHS
00003AEC  B43C 0002               3284      CMP.B   #2, D2
00003AF0  6700 F4E6               3285      BEQ     DECODE_ADDRP_REG_RHS
00003AF4  B43C 0003               3286      CMP.B   #3, D2
00003AF8  6700 F526               3287      BEQ     DECODE_ADDRPLUS_REG_RHS
00003AFC  B43C 0004               3288      CMP.B   #4, D2
00003B00  6700 F566               3289      BEQ     DECODE_MINUSADDR_REG_RHS
00003B04  0C39 0001 00006100      3290      CMP.B   #1, IS_DNTOEA
00003B0C  6700 FBD8               3291      BEQ     DECODE_EA_REG_ONE_OPERAND
00003B10  B43C 0007               3292      CMP.B   #7, D2
00003B14  6700 F59A               3293      BEQ     DECODE_EA_REG_RHS           
00003B18  4EF8 1222               3294      JMP     PRINT_LOGIC
00003B1C                          3295  INITIALIZE_VARIABLES
00003B1C  13FC 0000 00006030      3296      MOVE.B  #0, IS_CMP
00003B24  13FC 0000 00006032      3297      MOVE.B  #0, IS_BYTE
00003B2C  13FC 0000 00006034      3298      MOVE.B  #0, IS_WORD
00003B34  13FC 0000 00006036      3299      MOVE.B  #0, IS_LONG
00003B3C  13FC 0000 00006038      3300      MOVE.B  #0, IS_LEA
00003B44  13FC 0000 00006040      3301      MOVE.B  #0, IS_MOVE
00003B4C  13FC 0000 00006042      3302      MOVE.B  #0, IS_MULS 
00003B54  13FC 0000 00006044      3303      MOVE.B  #0, IS_DIVU
00003B5C  13FC 0000 00006046      3304      MOVE.B  #0, IS_MOVEQ
00003B64  13FC 0000 00006048      3305      MOVE.B  #0, IS_MOVEM
00003B6C  13FC 0000 00006050      3306      MOVE.B  #0, IS_STOP
00003B74  13FC 0000 00006052      3307      MOVE.B  #0, IS_ADDB
00003B7C  13FC 0000 00006058      3308      MOVE.B  #0, IS_ADDW
00003B84  13FC 0000 00006060      3309      MOVE.B  #0, IS_ADDL
00003B8C  13FC 0000 00006056      3310      MOVE.B  #0, IS_ADDI
00003B94  13FC 0000 00006054      3311      MOVE.B  #0, IS_ADDA
00003B9C  13FC 0000 00006062      3312      MOVE.B  #0, IS_ANDB
00003BA4  13FC 0000 00006064      3313      MOVE.B  #0, IS_ANDW
00003BAC  13FC 0000 00006066      3314      MOVE.B  #0, IS_ANDL
00003BB4  13FC 0000 00006068      3315      MOVE.B  #0, IS_SUBI
00003BBC  13FC 0000 00006070      3316      MOVE.B  #0, IS_SUBB
00003BC4  13FC 0000 00006072      3317      MOVE.B  #0, IS_SUBW
00003BCC  13FC 0000 00006074      3318      MOVE.B  #0, IS_SUBL
00003BD4  13FC 0000 00006102      3319      MOVE.B  #0, IS_EATODN
00003BDC  13FC 0000 00006100      3320      MOVE.B  #0, IS_DNTOEA
00003BE4  13FC 0000 00006076      3321      MOVE.B  #0, IS_MEM_TO_REG
00003BEC  13FC 0000 00006078      3322      MOVE.B  #0, IS_MOVEM_EA_REG
00003BF4  13FC 0000 00006080      3323      MOVE.B  #0, IS_MINUSADDR
00003BFC  13FC 0000 00006082      3324      MOVE.B  #0, IS_IMMEDIATE_DATA
00003C04  13FC 0000 00006084      3325      MOVE.B  #0, IS_LEFT
00003C0C  4E75                    3326      RTS
00003C0E                          3327  CLR_DATAREG_D6                    
00003C0E  4280                    3328      CLR.L   D0
00003C10  4281                    3329      CLR.L   D1
00003C12  4282                    3330      CLR.L   D2
00003C14  4283                    3331      CLR.L   D3
00003C16  4284                    3332      CLR.L   D4
00003C18  4285                    3333      CLR.L   D5
00003C1A  4286                    3334      CLR.L   D6
00003C1C  4E75                    3335      RTS
00003C1E                          3336  CLR_ALL
00003C1E  4280                    3337      CLR.L   D0
00003C20  4281                    3338      CLR.L   D1
00003C22  4282                    3339      CLR.L   D2
00003C24  4283                    3340      CLR.L   D3
00003C26  4284                    3341      CLR.L   D4
00003C28  4285                    3342      CLR.L   D5
00003C2A  4286                    3343      CLR.L   D6
00003C2C  4287                    3344      CLR.L   D7
00003C2E  207C 00000000           3345      MOVEA.L #0, A0
00003C34  227C 00000000           3346      MOVEA.L #0, A1
00003C3A  247C 00000000           3347      MOVEA.L #0, A2
00003C40  267C 00000000           3348      MOVEA.L #0, A3
00003C46  287C 00000000           3349      MOVEA.L #0, A4
00003C4C  2A7C 00000000           3350      MOVEA.L #0, A5
00003C52  2C7C 00000000           3351      MOVEA.L #0, A6
00003C58  4E75                    3352      RTS
00003C5A                          3353  CHECK_MODE
00003C5A  BE7C 4E71               3354      CMP.W   #$4E71,D7           NOP pass by
00003C5E  6700 00AA               3355      BEQ     END_OF_CHECK
00003C62  BE7C 4E72               3356      CMP.W   #$4E72,D7           STOP pass by
00003C66  6700 00A2               3357      BEQ     END_OF_CHECK
00003C6A  BE7C 4E75               3358      CMP.W   #$4E75,D7           RTS pass by
00003C6E  6700 009A               3359      BEQ     END_OF_CHECK
00003C72  B03C 0006               3360      CMP.B   #6,D0               BCC pass by
00003C76  6700 0092               3361      BEQ     END_OF_CHECK
00003C7A  B03C 0007               3362      CMP.B   #7,D0               MOVEQ pass by
00003C7E  6700 008A               3363      BEQ     END_OF_CHECK
00003C82  B03C 000E               3364      CMP.B   #14,D0              ROL/LSL/ASR pass by for now check later because of RS mode
00003C86  6700 0082               3365      BEQ     END_OF_CHECK
00003C8A                          3366      
00003C8A  B03C 0001               3367      CMP.B   #1, D0              MOVE.B LHS check
00003C8E  6700 0012               3368      BEQ     CHECK_EA_LHS
00003C92  B03C 0002               3369      CMP.B   #2, D0              MOVE.W LHS check
00003C96  6700 000A               3370      BEQ     CHECK_EA_LHS
00003C9A  B03C 0003               3371      CMP.B   #3, D0              MOVE.L LHS check
00003C9E  6600 003A               3372      BNE     CHECK_EA_RHS
00003CA2                          3373  
00003CA2                          3374  CHECK_EA_LHS
00003CA2  4EB8 21AE               3375      JSR     GET_OPMODE_BITS     Check 6th - 8th bit additional check for MOVE
00003CA6  B43C 0001               3376      CMP.B   #1, D2
00003CAA  6700 D8FE               3377      BEQ     INVALID_OP
00003CAE  B43C 0005               3378      CMP.B   #5, D2
00003CB2  6700 D8F6               3379      BEQ     INVALID_OP
00003CB6  B43C 0006               3380      CMP.B   #6, D2
00003CBA  6700 D8EE               3381      BEQ     INVALID_OP
00003CBE  B43C 0007               3382      CMP.B   #7, D2
00003CC2  6600 0016               3383      BNE     CHECK_EA_RHS
00003CC6  4EB8 218E               3384      JSR     GET_REGISTER_BITS   Check Mode %111, Reg %010 and %011
00003CCA  B43C 0002               3385      CMP.B   #2, D2
00003CCE  6700 D8DA               3386      BEQ     INVALID_OP
00003CD2  B43C 0003               3387      CMP.B   #3, D2
00003CD6  6700 D8D2               3388      BEQ     INVALID_OP      
00003CDA                          3389  
00003CDA                          3390  CHECK_EA_RHS
00003CDA  4EB8 21BE               3391      JSR     GET_EAMODE_BITS     Check 3rd - 5th bit EA MODE
00003CDE  B43C 0005               3392      CMP.B   #5, D2
00003CE2  6700 D8C6               3393      BEQ     INVALID_OP
00003CE6  B43C 0006               3394      CMP.B   #6, D2
00003CEA  6700 D8BE               3395      BEQ     INVALID_OP
00003CEE  B43C 0007               3396      CMP.B   #7, D2
00003CF2  6600 0016               3397      BNE     END_OF_CHECK
00003CF6  4EB8 21CE               3398      JSR     GET_EAREG_BITS      Check Mode %111, Reg %010 and %011
00003CFA  B43C 0002               3399      CMP.B   #2, D2
00003CFE  6700 D8AA               3400      BEQ     INVALID_OP
00003D02  B43C 0003               3401      CMP.B   #3, D2
00003D06  6700 D8A2               3402      BEQ     INVALID_OP
00003D0A                          3403      
00003D0A                          3404  END_OF_CHECK
00003D0A  6000 D57E               3405      BRA     SAFE    
00003D0E                          3406  CHECK_ROTATIONS_OPMODE_LHS
00003D0E  4EB8 21BE               3407      JSR     GET_EAMODE_BITS                 Check 3rd - 5th bit EA MODE
00003D12  B43C 0005               3408      CMP.B   #5, D2
00003D16  6700 D88C               3409      BEQ     INVALID_ROTATIONS_MS
00003D1A  B43C 0006               3410      CMP.B   #6, D2
00003D1E  6700 D884               3411      BEQ     INVALID_ROTATIONS_MS
00003D22  6000 D872               3412      BRA     VALID_ROTATIONS_MS
00003D22  6000 D872               3413  -------------------- end include --------------------
00003D26                          3414      INCLUDE         'JKR_FINAL_LOGIC_W16.X68'
00003D26                          3415  FINAL
00003D26  4EB8 15F4               3416      JSR     CLEAR_NEXT_LINE
00003D2A  43F9 00003EFD           3417      LEA     MSG_FINAL_PROMPT, A1    Load "FINAL_PROMPT" message and display
00003D30  103C 000E               3418      MOVE.B  #14,D0                  |
00003D34  4E4F                    3419      TRAP    #15                     |
00003D36  103C 0005               3420      MOVE.B  #5,D0                   V
00003D3A  4E4F                    3421      TRAP    #15                     Read a char from the keyboard into D1.B.
00003D3C                          3422      
00003D3C  B23C 000D               3423      CMP.B   #13,D1                  Checking for "ENTER" as an input,
00003D40  6700 0022               3424      BEQ     BAD_SELECTION           which is a bad selection
00003D44                          3425      
00003D44  B23C 0059               3426      CMP.B   #YES_U, D1              IF equal to 'Y',
00003D48  6700 D2B6               3427      BEQ     INTRO                   Start new session
00003D4C  B23C 0079               3428      CMP.B   #YES_L, D1              IF equal to 'y',
00003D50  6700 D2AE               3429      BEQ     INTRO                   Start new session
00003D54                          3430      
00003D54  B23C 004E               3431      CMP.B   #NO_U, D1               IF equal to 'N',  
00003D58  6700 001C               3432      BEQ     END_MSG                 Display End Message                             
00003D5C  B23C 006E               3433      CMP.B   #NO_L, D1               IF equal to 'n',
00003D60  6700 0014               3434      BEQ     END_MSG                 Display End Message  
00003D64                          3435  
00003D64                          3436  BAD_SELECTION
00003D64  4EB8 15F4               3437      JSR     CLEAR_NEXT_LINE
00003D68  43F9 00003F38           3438      LEA     MSG_INVALID_PROMPT, A1  Load and display invalid prompt message
00003D6E  103C 000E               3439      MOVE.B  #14,D0                  |
00003D72  4E4F                    3440      TRAP    #15                     V
00003D74  60B0                    3441      BRA     FINAL                   Loop back to FINAL
00003D76                          3442      
00003D76                          3443  END_MSG
00003D76  4EB8 15F4               3444      JSR     CLEAR_NEXT_LINE         
00003D7A  43F9 00003F22           3445      LEA     MSG_ENDPROGRAM, A1      Display End program msg
00003D80  103C 000E               3446      MOVE.B  #14,D0                  |
00003D84  4E4F                    3447      TRAP    #15                     V
00003D86  4EF9 000042C4           3448      JMP     END_PROGRAM             Terminate program                   
00003D8C                          3449  
00003D8C                          3450  
00003D8C                          3451  
00003D8C                          3452  -------------------- end include --------------------
00003D8C                          3453      INCLUDE         'JKR_VARS_AND_CHARS_W16.X68'
00003D8C  =0000000D               3454  CR                  EQU     $0D     ASCII code for Carriage Return
00003D8C  =0000000A               3455  LF                  EQU     $0A     ASCII code for Line Feed   
00003D8C  =00000059               3456  YES_U               EQU     $59     ASCII code for 'Y' 
00003D8C  =00000079               3457  YES_L               EQU     $79     ASCII code for 'y'
00003D8C  =0000004E               3458  NO_U                EQU     $4E     ASCII code for 'N'  
00003D8C  =0000006E               3459  NO_L                EQU     $6E     ASCII code for 'n'
00003D8C  =00006000               3460  START_ADDRESS       EQU     $6000   Store start addr at this memory addr
00003D8C  =00006010               3461  END_ADDRESS         EQU     $6010   Store end addr at this memory addr
00003D8C  =00006020               3462  PRINT_COUNTER       EQU     $6020   Stores the print count
00003D8C  =00006022               3463  PRINT_ADDR_CHAR     EQU     $6022   Used for displaying address 1 char at a time
00003D8C  =00000001               3464  SHIFT_1_BITS        EQU     1       # bits to shift
00003D8C  =00000004               3465  SHIFT_4_BITS        EQU     4       # bits to shift
00003D8C  =00000005               3466  SHIFT_5_BITS        EQU     5       # bits to shift
00003D8C  =00000006               3467  SHIFT_6_BITS        EQU     6       # bits to shift
00003D8C  =00000007               3468  SHIFT_7_BITS        EQU     7       # bits to shift
00003D8C  =00000008               3469  SHIFT_8_BITS        EQU     8       # bits to shift
00003D8C  =0000000A               3470  SHIFT_10_BITS       EQU     10      # bits to shift
00003D8C  =0000000B               3471  SHIFT_11_BITS       EQU     11      # bits to shift
00003D8C  =0000000C               3472  SHIFT_12_BITS       EQU     12      # bits to shift
00003D8C  =0000000D               3473  SHIFT_13_BITS       EQU     13      # bits to shift
00003D8C  =0000000E               3474  SHIFT_14_BITS       EQU     14      # bits to shift
00003D8C  =0000000F               3475  SHIFT_15_BITS       EQU     15      # bits to shift
00003D8C  =00000010               3476  SHIFT_16_BITS       EQU     16      # bits to shift
00003D8C  =00000004               3477  VAR_BCC             EQU     %00000100
00003D8C  =0000000E               3478  VAR_BGT             EQU     %00001110
00003D8C  =0000000F               3479  VAR_BLE             EQU     %00001111
00003D8C  =00000008               3480  VAR_CLRB            EQU     %00001000
00003D8C  =00000009               3481  VAR_CLRW            EQU     %00001001
00003D8C  =0000000A               3482  VAR_CLRL            EQU     %00001010
00003D8C  =00000000               3483  VAR_CMPB            EQU     %00000000
00003D8C  =00000001               3484  VAR_CMPW            EQU     %00000001
00003D8C  =00000002               3485  VAR_CMPL            EQU     %00000010
00003D8C  =0000003A               3486  VAR_JSR             EQU     %00111010
00003D8C  =00000007               3487  VAR_LEA             EQU     %00000111
00003D8C  =00000002               3488  VAR_MOVEMW          EQU     %0010
00003D8C  =00000003               3489  VAR_MOVEML          EQU     %0011
00003D8C  =00000000               3490  VAR_ASR_RS_BITS     EQU     %0000
00003D8C  =00000001               3491  VAR_LSL_RS_BITS     EQU     %0001
00003D8C  =00000003               3492  VAR_ROL_RS_BITS     EQU     %0011
00003D8C  =00000007               3493  VAR_MULS            EQU     %0111
00003D8C  =00000003               3494  VAR_DIVU            EQU     %0011
00003D8C  =00000000               3495  VAR_MOVEQ           EQU     %0000
00003D8C  =00006026               3496  LOOP_COUNTER        EQU     $6026
00003D8C  =00006100               3497  IS_DNTOEA           EQU     $6100
00003D8C  =00006102               3498  IS_EATODN           EQU     $6102
00003D8C  =00006030               3499  IS_CMP              EQU     $6030
00003D8C  =00006032               3500  IS_BYTE             EQU     $6032
00003D8C  =00006034               3501  IS_WORD             EQU     $6034
00003D8C  =00006036               3502  IS_LONG             EQU     $6036
00003D8C  =00006038               3503  IS_LEA              EQU     $6038
00003D8C  =00006040               3504  IS_MOVE             EQU     $6040
00003D8C  =00006042               3505  IS_MULS             EQU     $6042
00003D8C  =00006044               3506  IS_DIVU             EQU     $6044
00003D8C  =00006046               3507  IS_MOVEQ            EQU     $6046
00003D8C  =00006048               3508  IS_MOVEM            EQU     $6048
00003D8C  =00006050               3509  IS_STOP             EQU     $6050
00003D8C  =00006052               3510  IS_ADDB             EQU     $6052
00003D8C  =00006054               3511  IS_ADDA             EQU     $6054
00003D8C  =00006056               3512  IS_ADDI             EQU     $6056
00003D8C  =00006058               3513  IS_ADDW             EQU     $6058
00003D8C  =00006060               3514  IS_ADDL             EQU     $6060
00003D8C  =00006062               3515  IS_ANDB             EQU     $6062
00003D8C  =00006064               3516  IS_ANDW             EQU     $6064
00003D8C  =00006066               3517  IS_ANDL             EQU     $6066
00003D8C  =00006068               3518  IS_SUBI             EQU     $6068
00003D8C  =00006070               3519  IS_SUBB             EQU     $6070
00003D8C  =00006072               3520  IS_SUBW             EQU     $6072
00003D8C  =00006074               3521  IS_SUBL             EQU     $6074
00003D8C  =00006076               3522  IS_MEM_TO_REG       EQU     $6076
00003D8C  =00006078               3523  IS_MOVEM_EA_REG     EQU     $6078
00003D8C  =00006080               3524  IS_MINUSADDR        EQU     $6080
00003D8C  =00006082               3525  IS_IMMEDIATE_DATA   EQU     $6082
00003D8C  =00006084               3526  IS_LEFT             EQU     $6084
00003D8C                          3527  
00003D8C  =000060A0               3528  DATA_8BITS          EQU     $60A0
00003D8C                          3529  
00003D8C= 20 45 6E 74 65 72 ...   3530  STARTADDRESS_PROMPT DC.B ' Enter START Address in Hex: ',0
00003DAA= 20 45 6E 74 65 72 ...   3531  ENDADDRESS_PROMPT   DC.B ' Enter END Address in Hex: ',0
00003DC6= 20 57 45 4C 43 4F ...   3532  MSG_WELCOME         DC.B ' WELCOME TO TEAM JKR PROJECT ',CR,LF,0
00003DE6= 20 49 6E 76 61 6C ...   3533  MSG_INVALID_ENTRY   DC.B ' Invalid Entry: Inupt 0-9, A-F, a-f only.',CR,LF,0
00003E12= 20 49 6E 76 61 6C ...   3534  MSG_INVALID_LENGTH  DC.B ' Invalid Length: Address length must be between 1~8 chars long. ',CR,LF,0
00003E55= 20 49 6E 76 61 6C ...   3535  MSG_INVALID_ADDRESS DC.B ' Invalid Address: END Address can not be <= to the START address! ',CR,LF,0
00003E9A= 20 49 6E 76 61 6C ...   3536  MSG_INVALID_ODDADDR DC.B ' Invalid Address: START Adress can not be ODD! ',CR,LF,0
00003ECC= 20 56 61 6C 69 64 ...   3537  MSG_DECODE          DC.B ' Valid Addresses received, begin decompiling! ',CR,LF,0   
00003EFD= 20 57 6F 75 6C 64 ...   3538  MSG_FINAL_PROMPT    DC.B ' Would you like to continue? (Y/N): ',0
00003F22= 20 50 72 6F 67 72 ...   3539  MSG_ENDPROGRAM      DC.B ' Program Terminated! ',0
00003F38= 20 49 6E 76 61 6C ...   3540  MSG_INVALID_PROMPT  DC.B ' Invalid Selection: Enter (Y,y || N,n) only. ',CR,LF,0
00003F68= 20 50 72 65 73 73 ...   3541  PRESS_ENTER_PROMPT  DC.B ' Press Enter to continue printing: ',0
00003F8C= 20 0D 0A 00             3542  CLEAR_LINE          DC.B ' ',CR,LF,0
00003F90= 20 00                   3543  DISPLAY_SPACE       DC.B ' ',0
00003F92                          3544  
00003F92= 24 00                   3545  DISPLAY_DOLLAR      DC.B '$',0
00003F94= 23 00                   3546  DISPLAY_HASH        DC.B '#',0
00003F96= 2C 00                   3547  DISPLAY_COMMA       DC.B ',',0
00003F98= 2F 00                   3548  DISPLAY_SLASH       DC.B '/',0
00003F9A                          3549  
00003F9A= 44 00                   3550  DISPLAY_D           DC.B 'D',0
00003F9C= 52 00                   3551  DISPLAY_R           DC.B 'R',0
00003F9E= 42 00                   3552  DISPLAY_B           DC.B 'B',0
00003FA0= 57 00                   3553  DISPLAY_W           DC.B 'W',0
00003FA2= 4C 00                   3554  DISPLAY_L           DC.B 'L',0
00003FA4= 2E 42 20 00             3555  DISPLAY_DOT_B       DC.B '.B ',0
00003FA8= 2E 57 20 00             3556  DISPLAY_DOT_W       DC.B '.W ',0
00003FAC= 2E 4C 20 00             3557  DISPLAY_DOT_L       DC.B '.L ',0
00003FB0                          3558  
00003FB0= 20 20 20 20 20 20 ...   3559  DISPLAY_LEA         DC.B '      LEA ',0
00003FBB= 20 20 20 20 20 20 ...   3560  DISPLAY_RTS         DC.B '      RTS ',0
00003FC6= 20 20 20 20 20 20 ...   3561  DISPLAY_JSR         DC.B '      JSR ',0
00003FD1= 20 20 20 20 20 20 ...   3562  DISPLAY_NOP         DC.B '      NOP ',0
00003FDC= 20 20 20 20 20 20 ...   3563  DISPLAY_STOP        DC.B '      STOP ',0
00003FE8= 20 20 20 20 20 20 ...   3564  DISPLAY_DATA        DC.B '      DATA ',0
00003FF4                          3565  
00003FF4= 20 20 20 20 20 20 ...   3566  DISPLAY_CLRB        DC.B '      CLR.B ',0
00004001= 20 20 20 20 20 20 ...   3567  DISPLAY_CLRW        DC.B '      CLR.W ',0
0000400E= 20 20 20 20 20 20 ...   3568  DISPLAY_CLRL        DC.B '      CLR.L ',0
0000401B                          3569  
0000401B= 20 20 20 20 20 20 ...   3570  DISPLAY_MOVEB       DC.B '      MOVE.B ',0
00004029= 20 20 20 20 20 20 ...   3571  DISPLAY_MOVEW       DC.B '      MOVE.W ',0
00004037= 20 20 20 20 20 20 ...   3572  DISPLAY_MOVEL       DC.B '      MOVE.L ',0
00004045= 20 20 20 20 20 20 ...   3573  DISPLAY_MOVEQL      DC.B '      MOVEQ.L ',0
00004054= 20 20 20 20 20 20 ...   3574  DISPLAY_MOVEMW      DC.B '      MOVEM.W ',0
00004063= 20 20 20 20 20 20 ...   3575  DISPLAY_MOVEML      DC.B '      MOVEM.L ',0
00004072                          3576  
00004072= 20 20 20 20 20 20 ...   3577  DISPLAY_ADDB        DC.B '      ADD.B ',0
0000407F= 20 20 20 20 20 20 ...   3578  DISPLAY_ADDW        DC.B '      ADD.W ',0
0000408C= 20 20 20 20 20 20 ...   3579  DISPLAY_ADDL        DC.B '      ADD.L ',0
00004099                          3580  
00004099= 20 20 20 20 20 20 ...   3581  DISPLAY_ADDAW       DC.B '      ADDA.W ',0
000040A7= 20 20 20 20 20 20 ...   3582  DISPLAY_ADDAL       DC.B '      ADDA.L ',0
000040B5                          3583  
000040B5= 20 20 20 20 20 20 ...   3584  DISPLAY_ADDIB       DC.B '      ADDI.B ',0
000040C3= 20 20 20 20 20 20 ...   3585  DISPLAY_ADDIW       DC.B '      ADDI.W ',0
000040D1= 20 20 20 20 20 20 ...   3586  DISPLAY_ADDIL       DC.B '      ADDI.L ',0
000040DF                          3587  
000040DF= 20 20 20 20 20 20 ...   3588  DISPLAY_SUBIB       DC.B '      SUBI.B ',0
000040ED= 20 20 20 20 20 20 ...   3589  DISPLAY_SUBIW       DC.B '      SUBI.W ',0
000040FB= 20 20 20 20 20 20 ...   3590  DISPLAY_SUBIL       DC.B '      SUBI.L ',0
00004109                          3591  
00004109= 20 20 20 20 20 20 ...   3592  DISPLAY_ANDB        DC.B '      AND.B ',0
00004116= 20 20 20 20 20 20 ...   3593  DISPLAY_ANDW        DC.B '      AND.W ',0
00004123= 20 20 20 20 20 20 ...   3594  DISPLAY_ANDL        DC.B '      AND.L ',0
00004130                          3595  
00004130= 20 20 20 20 20 20 ...   3596  DISPLAY_AS          DC.B '      AS',0
00004139= 20 20 20 20 20 20 ...   3597  DISPLAY_ASR         DC.B '      ASR ',0
00004144                          3598  
00004144= 20 20 20 20 20 20 ...   3599  DISPLAY_LS          DC.B '      LS',0
0000414D= 20 20 20 20 20 20 ...   3600  DISPLAY_LSL         DC.B '      LSL ',0
00004158                          3601  
00004158= 20 20 20 20 20 20 ...   3602  DISPLAY_RO          DC.B '      RO',0
00004161= 20 20 20 20 20 20 ...   3603  DISPLAY_ROL         DC.B '      ROL ',0
0000416C                          3604  
0000416C= 20 20 20 20 20 20 ...   3605  DISPLAY_CMPB        DC.B '      CMP.B ',0
00004179= 20 20 20 20 20 20 ...   3606  DISPLAY_CMPW        DC.B '      CMP.W ',0
00004186= 20 20 20 20 20 20 ...   3607  DISPLAY_CMPL        DC.B '      CMP.L ',0
00004193                          3608  
00004193= 20 20 20 20 20 20 ...   3609  DISPLAY_SUBB        DC.B '      SUB.B ',0
000041A0= 20 20 20 20 20 20 ...   3610  DISPLAY_SUBW        DC.B '      SUB.W ',0
000041AD= 20 20 20 20 20 20 ...   3611  DISPLAY_SUBL        DC.B '      SUB.L ',0
000041BA                          3612  
000041BA= 20 20 20 20 20 20 ...   3613  DISPLAY_MULS        DC.B '      MULS.W ',0
000041C8= 20 20 20 20 20 20 ...   3614  DISPLAY_DIVU        DC.B '      DIVU.W ',0
000041D6                          3615  
000041D6= 20 20 20 20 20 20 ...   3616  DISPLAY_BCC         DC.B '      BCC ',0
000041E1= 20 20 20 20 20 20 ...   3617  DISPLAY_BGT         DC.B '      BGT ',0
000041EC= 20 20 20 20 20 20 ...   3618  DISPLAY_BLE         DC.B '      BLE ',0
000041F7                          3619  
000041F7= 44 30 00                3620  DISPLAY_D0          DC.B 'D0',0
000041FA= 44 31 00                3621  DISPLAY_D1          DC.B 'D1',0
000041FD= 44 32 00                3622  DISPLAY_D2          DC.B 'D2',0
00004200= 44 33 00                3623  DISPLAY_D3          DC.B 'D3',0
00004203= 44 34 00                3624  DISPLAY_D4          DC.B 'D4',0
00004206= 44 35 00                3625  DISPLAY_D5          DC.B 'D5',0
00004209= 44 36 00                3626  DISPLAY_D6          DC.B 'D6',0
0000420C= 44 37 00                3627  DISPLAY_D7          DC.B 'D7',0
0000420F                          3628  
0000420F= 41 30 00                3629  DISPLAY_A0          DC.B 'A0',0
00004212= 41 31 00                3630  DISPLAY_A1          DC.B 'A1',0
00004215= 41 32 00                3631  DISPLAY_A2          DC.B 'A2',0
00004218= 41 33 00                3632  DISPLAY_A3          DC.B 'A3',0
0000421B= 41 34 00                3633  DISPLAY_A4          DC.B 'A4',0
0000421E= 41 35 00                3634  DISPLAY_A5          DC.B 'A5',0
00004221= 41 36 00                3635  DISPLAY_A6          DC.B 'A6',0
00004224= 41 37 00                3636  DISPLAY_A7          DC.B 'A7',0
00004227                          3637  
00004227= 28 41 30 29 00          3638  DISPLAY_A0_P        DC.B '(A0)',0
0000422C= 28 41 31 29 00          3639  DISPLAY_A1_P        DC.B '(A1)',0
00004231= 28 41 32 29 00          3640  DISPLAY_A2_P        DC.B '(A2)',0
00004236= 28 41 33 29 00          3641  DISPLAY_A3_P        DC.B '(A3)',0
0000423B= 28 41 34 29 00          3642  DISPLAY_A4_P        DC.B '(A4)',0
00004240= 28 41 35 29 00          3643  DISPLAY_A5_P        DC.B '(A5)',0
00004245= 28 41 36 29 00          3644  DISPLAY_A6_P        DC.B '(A6)',0
0000424A= 28 41 37 29 00          3645  DISPLAY_A7_P        DC.B '(A7)',0
0000424F                          3646  
0000424F= 28 41 30 29 2B 00       3647  DISPLAY_A0_PP       DC.B '(A0)+',0
00004255= 28 41 31 29 2B 00       3648  DISPLAY_A1_PP       DC.B '(A1)+',0
0000425B= 28 41 32 29 2B 00       3649  DISPLAY_A2_PP       DC.B '(A2)+',0
00004261= 28 41 33 29 2B 00       3650  DISPLAY_A3_PP       DC.B '(A3)+',0
00004267= 28 41 34 29 2B 00       3651  DISPLAY_A4_PP       DC.B '(A4)+',0
0000426D= 28 41 35 29 2B 00       3652  DISPLAY_A5_PP       DC.B '(A5)+',0
00004273= 28 41 36 29 2B 00       3653  DISPLAY_A6_PP       DC.B '(A6)+',0
00004279= 28 41 37 29 2B 00       3654  DISPLAY_A7_PP       DC.B '(A7)+',0
0000427F                          3655  
0000427F= 2D 28 41 30 29 00       3656  DISPLAY_A0_PM       DC.B '-(A0)',0
00004285= 2D 28 41 31 29 00       3657  DISPLAY_A1_PM       DC.B '-(A1)',0
0000428B= 2D 28 41 32 29 00       3658  DISPLAY_A2_PM       DC.B '-(A2)',0
00004291= 2D 28 41 33 29 00       3659  DISPLAY_A3_PM       DC.B '-(A3)',0
00004297= 2D 28 41 34 29 00       3660  DISPLAY_A4_PM       DC.B '-(A4)',0
0000429D= 2D 28 41 35 29 00       3661  DISPLAY_A5_PM       DC.B '-(A5)',0
000042A3= 2D 28 41 36 29 00       3662  DISPLAY_A6_PM       DC.B '-(A6)',0
000042A9= 2D 28 41 37 29 00       3663  DISPLAY_A7_PM       DC.B '-(A7)',0
000042AF                          3664  
000042AF= 30 00                   3665  DISPLAY_0           DC.B '0',0
000042B1= 31 00                   3666  DISPLAY_1           DC.B '1',0
000042B3= 32 00                   3667  DISPLAY_2           DC.B '2',0
000042B5= 33 00                   3668  DISPLAY_3           DC.B '3',0
000042B7= 34 00                   3669  DISPLAY_4           DC.B '4',0
000042B9= 35 00                   3670  DISPLAY_5           DC.B '5',0
000042BB= 36 00                   3671  DISPLAY_6           DC.B '6',0
000042BD= 37 00                   3672  DISPLAY_7           DC.B '7',0
000042BF= 38 00                   3673  DISPLAY_8           DC.B '8',0
000042C2                          3674  BUFFER              DS.W  1   *Buffer to ensure last line of code is even
000042C2                          3675  -------------------- end include --------------------
000042C4                          3676  END_PROGRAM
000042C4  103C 0009               3677      MOVE.B  #9,D0
000042C8  4E4F                    3678      TRAP    #15
000042CA                          3679      END     START    Final line of source code

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_RHS            39B4
ADDB_RHS            38EC
ADDI_DISP           2C0C
ADDI_RHS            3984
ADDRP_REG_END       301C
ADD_DNTOEA_DISP     2BB6
ADD_W_L_RHS         3934
AFTER_SLASH_SPECIAL_CASE  2578
ANDB_RHS            39BC
AND_W_L_RHS         3A04
ASCII_TO_HEX_E      10DE
ASCII_TO_HEX_S      10D0
BAD_SELECTION       3D64
BUFFER              42C2
CHECK_ADDRESS_VALUE  10A2
CHECK_CONVERSION    16D8
CHECK_DECODE_RHS    37B0
CHECK_EA_LHS        3CA2
CHECK_EA_RHS        3CDA
CHECK_LCHAR_E       115A
CHECK_LCHAR_S       1118
CHECK_LEN_E         11EC
CHECK_LEN_S         11DE
CHECK_LETTER        16E6
CHECK_MODE          3C5A
CHECK_NUM_E         112E
CHECK_NUM_S         10EC
CHECK_ODD_ADDR      1206
CHECK_ROTATIONS_OPMODE_LHS  3D0E
CHECK_SHIFT_SIZE_RS  2924
CHECK_SLASH_CONDITION  2598
CHECK_SLASH_CONDITION_REG_TO_MEM  254A
CHECK_UCHAR_E       1144
CHECK_UCHAR_S       1102
CLEAR_LINE          3F8C
CLEAR_NEXT_LINE     15F4
CLR_ALL             3C1E
CLR_DATAREG         11FA
CLR_DATAREG_D6      3C0E
CMP_RHS             38A4
CONTINUE_DISPLAY    166C
CONVERSION_LOOP     1632
CR                  D
DATA_8BITS          60A0
DECIPHER            1210
DECODE_ADDA         2C42
DECODE_ADDAL        2C2E
DECODE_ADDAW        2C1E
DECODE_ADDB_DNTOEA  2B6A
DECODE_ADDB_EATODN  2AA2
DECODE_ADDIB        2BC8
DECODE_ADDIL        2BF8
DECODE_ADDIW        2BE0
DECODE_ADDL_DNTOEA  2B9A
DECODE_ADDL_EATODN  2B0E
DECODE_ADDRPLUS_END  3064
DECODE_ADDRPLUS_REG_LHS  3412
DECODE_ADDRPLUS_REG_ONE_OPERAND  3656
DECODE_ADDRPLUS_REG_RHS  3020
DECODE_ADDRP_REG_LHS  33CA
DECODE_ADDRP_REG_ONE_OPERAND  360E
DECODE_ADDRP_REG_RHS  2FD8
DECODE_ADDR_REG_LHS  3382
DECODE_ADDR_REG_ONE_OPERAND  35C6
DECODE_ADDR_REG_RHS  2F90
DECODE_ADDWL_DISP   2B32
DECODE_ADDW_DNTOEA  2B82
DECODE_ADDW_EATODN  2AEE
DECODE_ADD_DATA_REG_LHS  32F2
DECODE_ANDB_DNTOEA  2D16
DECODE_ANDB_EATODN  2C82
DECODE_ANDL_DNTOEA  2D56
DECODE_ANDL_EATODN  2CC2
DECODE_ANDW_DNTOEA  2D36
DECODE_ANDW_EATODN  2CA2
DECODE_AND_DNTOEA   2D72
DECODE_AND_EATODN   2CDE
DECODE_AS           28E8
DECODE_AS_MS        2832
DECODE_BCC          2A38
DECODE_BCC_DISPLAY  2A64
DECODE_BGT          2A48
DECODE_BLE          2A58
DECODE_CLRB         235C
DECODE_CLRL         2370
DECODE_CLRW         2366
DECODE_CLR_DISPLAY  2376
DECODE_CMPB         23AC
DECODE_CMPL         23FA
DECODE_CMPW         23F0
DECODE_CMP_W_L_DISPLAY  2408
DECODE_DATA_REG_LHS  333A
DECODE_DATA_REG_ONE_OPERAND  357E
DECODE_DATA_REG_RHS  2F00
DECODE_DATA_REG_RHS_BITS_0TO2  2F48
DECODE_DISPLACEMENT  2A6E
DECODE_DIVU         29F4
DECODE_EA_LONG_LHS  351E
DECODE_EA_LONG_ONE_OPERAND  3756
DECODE_EA_LONG_RHS  311E
DECODE_EA_REG_END   30C4
DECODE_EA_REG_LHS   34A2
DECODE_EA_REG_ONE_OPERAND  36E6
DECODE_EA_REG_RHS   30B0
DECODE_EA_WORD_LHS  34C2
DECODE_EA_WORD_ONE_OPERAND  36FE
DECODE_EA_WORD_RHS  30C8
DECODE_IMDATA_LHS   3222
DECODE_IMDATA_RHS   3178
DECODE_IMMEDIATE_NUM  2962
DECODE_IR           2948
DECODE_JSR          22FC
DECODE_LEA          2320
DECODE_LS           28F2
DECODE_LS_MS        283C
DECODE_MINUSADDR_REG_LHS  345A
DECODE_MINUSADDR_REG_ONE_OPERAND  369E
DECODE_MINUSADDR_REG_RHS  3068
DECODE_MOVEB        2774
DECODE_MOVEL        2794
DECODE_MOVEML       2460
DECODE_MOVEMW       244E
DECODE_MOVEM_EA_LONG_LHS  26DC
DECODE_MOVEM_EA_REG  24F0
DECODE_MOVEM_EA_REG_RHS  24A4
DECODE_MOVEM_EA_WORD_LHS  265A
DECODE_MOVEM_MEM_TO_REG  24C8
DECODE_MOVEM_REGISTERS_LHS  250C
DECODE_MOVEM_REGISTERS_RHS  250C
DECODE_MOVEM_REG_TO_MEM  2480
DECODE_MOVEQ        27E8
DECODE_MOVEW        2784
DECODE_MOVE_DISPLAY  27A8
DECODE_MULS         29E2
DECODE_MULS_DIVU_DISPLAY  2A02
DECODE_NOP          22CE
DECODE_REGISTER_NUM  2974
DECODE_RHS          38A4
DECODE_RO           28FC
DECODE_ROTATIONS_BYTE_RS  28A8
DECODE_ROTATIONS_LONG_RS  28C0
DECODE_ROTATIONS_MS  280A
DECODE_ROTATIONS_WORD_RS  28B4
DECODE_RO_MS        2846
DECODE_RTS          234C
DECODE_SHIFT_RS_BITS  28C8
DECODE_STOP         22DE
DECODE_SUBB_DNTOEA  2DDA
DECODE_SUBB_EATODN  2E50
DECODE_SUBI         2DC8
DECODE_SUBIB        2D84
DECODE_SUBIL        2DB4
DECODE_SUBIW        2D9C
DECODE_SUBL_DNTOEA  2E22
DECODE_SUBL_EATODN  2E98
DECODE_SUBW_DNTOEA  2E02
DECODE_SUBW_EATODN  2E78
DECODE_SUB_DNTOEA   2E3E
DECODE_SUB_EATODN   2EB4
DISPLACEMENT_LOOP   169C
DISPLAY_0           42AF
DISPLAY_1           42B1
DISPLAY_2           42B3
DISPLAY_3           42B5
DISPLAY_4           42B7
DISPLAY_5           42B9
DISPLAY_6           42BB
DISPLAY_7           42BD
DISPLAY_8           42BF
DISPLAY_A0          420F
DISPLAY_A0_P        4227
DISPLAY_A0_PM       427F
DISPLAY_A0_PP       424F
DISPLAY_A1          4212
DISPLAY_A1_P        422C
DISPLAY_A1_PM       4285
DISPLAY_A1_PP       4255
DISPLAY_A2          4215
DISPLAY_A2_P        4231
DISPLAY_A2_PM       428B
DISPLAY_A2_PP       425B
DISPLAY_A3          4218
DISPLAY_A3_P        4236
DISPLAY_A3_PM       4291
DISPLAY_A3_PP       4261
DISPLAY_A4          421B
DISPLAY_A4_P        423B
DISPLAY_A4_PM       4297
DISPLAY_A4_PP       4267
DISPLAY_A5          421E
DISPLAY_A5_P        4240
DISPLAY_A5_PM       429D
DISPLAY_A5_PP       426D
DISPLAY_A6          4221
DISPLAY_A6_P        4245
DISPLAY_A6_PM       42A3
DISPLAY_A6_PP       4273
DISPLAY_A7          4224
DISPLAY_A7_P        424A
DISPLAY_A7_PM       42A9
DISPLAY_A7_PP       4279
DISPLAY_ADDAL       40A7
DISPLAY_ADDAW       4099
DISPLAY_ADDB        4072
DISPLAY_ADDIB       40B5
DISPLAY_ADDIL       40D1
DISPLAY_ADDIW       40C3
DISPLAY_ADDL        408C
DISPLAY_ADDRESS     1602
DISPLAY_ADDW        407F
DISPLAY_ANDB        4109
DISPLAY_ANDL        4123
DISPLAY_ANDW        4116
DISPLAY_AS          4130
DISPLAY_ASR         4139
DISPLAY_B           3F9E
DISPLAY_BCC         41D6
DISPLAY_BGT         41E1
DISPLAY_BLE         41EC
DISPLAY_CLRB        3FF4
DISPLAY_CLRL        400E
DISPLAY_CLRW        4001
DISPLAY_CMPB        416C
DISPLAY_CMPL        4186
DISPLAY_CMPW        4179
DISPLAY_COMMA       3F96
DISPLAY_D           3F9A
DISPLAY_D0          41F7
DISPLAY_D1          41FA
DISPLAY_D2          41FD
DISPLAY_D3          4200
DISPLAY_D4          4203
DISPLAY_D5          4206
DISPLAY_D6          4209
DISPLAY_D7          420C
DISPLAY_DATA        3FE8
DISPLAY_DIVU        41C8
DISPLAY_DOLLAR      3F92
DISPLAY_DOT_B       3FA4
DISPLAY_DOT_L       3FAC
DISPLAY_DOT_W       3FA8
DISPLAY_HASH        3F94
DISPLAY_INVALID_ADDRESS  10AE
DISPLAY_JSR         3FC6
DISPLAY_L           3FA2
DISPLAY_LEA         3FB0
DISPLAY_LS          4144
DISPLAY_LSL         414D
DISPLAY_MOVEB       401B
DISPLAY_MOVEL       4037
DISPLAY_MOVEML      4063
DISPLAY_MOVEMW      4054
DISPLAY_MOVEM_REGISTER  25B2
DISPLAY_MOVEQL      4045
DISPLAY_MOVEW       4029
DISPLAY_MULS        41BA
DISPLAY_NOP         3FD1
DISPLAY_R           3F9C
DISPLAY_RO          4158
DISPLAY_ROL         4161
DISPLAY_RTS         3FBB
DISPLAY_SLASH       3F98
DISPLAY_SPACE       3F90
DISPLAY_STOP        3FDC
DISPLAY_SUBB        4193
DISPLAY_SUBIB       40DF
DISPLAY_SUBIL       40FB
DISPLAY_SUBIW       40ED
DISPLAY_SUBL        41AD
DISPLAY_SUBW        41A0
DISPLAY_W           3FA0
DIVU_RHS            38B0
DONT_ADD_ADDRESS_L  2706
DONT_ADD_ADDRESS_W  2674
DONT_MINUS_ADDRESS_L  275C
DONT_MINUS_ADDRESS_W  26C6
EA_LONG_LOOP_LHS    3538
EA_LONG_LOOP_ONE_OPERAND  3770
EA_LONG_LOOP_RHS    3138
EA_MOVEM_LONG_LOOP_LHS  2714
EA_MOVEM_WORD_LOOP_LHS  2680
EA_WORD_LOOP_LHS    34DA
EA_WORD_LOOP_ONE_OPERAND  3716
EA_WORD_LOOP_RHS    30E0
ENDADDRESS_PROMPT   3DAA
END_ADDRESS         6010
END_ADDR_PROMPT     1056
END_MSG             3D76
END_OF_CHECK        3D0A
END_PROGRAM         42C4
EXIT_DISP_LOOP      16D6
EXIT_EA_LONG_LOOP_LHS  3570
EXIT_EA_LONG_LOOP_ONE_OPERAND  37A8
EXIT_EA_LONG_LOOP_RHS  3170
EXIT_EA_MOVEM_LONG_LOOP_LHS  274C
EXIT_EA_MOVEM_WORD_LOOP_LHS  26B6
EXIT_EA_WORD_LOOP_LHS  3510
EXIT_EA_WORD_LOOP_ONE_OPERAND  374E
EXIT_EA_WORD_LOOP_RHS  3116
EXIT_IMDATA_LOOP_L_LHS  32E4
EXIT_IMDATA_LOOP_L_RHS  321A
EXIT_IMDATA_LOOP_W_LHS  3296
EXIT_IMDATA_LOOP_W_RHS  31D2
EXIT_LOOP           1746
FINAL               3D26
FOR_LOOP_END        107E
FOR_LOOP_START      1046
GET_ADDI_BITS       220A
GET_BCC_BITS        21DA
GET_CLR_BITS        21E6
GET_DATA_8BITS      2246
GET_EAMODE_BITS     21BE
GET_EAREG_BITS      21CE
GET_IR_BITS         22B6
GET_JSR_BITS        21F2
GET_LEA_BITS        21FE
GET_MOVEM_BITS      2226
GET_MOVEM_DR_BITS   2236
GET_MOVEQ_BITS      2216
GET_MULS_DIVU_BITS  2256
GET_OPMODE_BITS     21AE
GET_REGISTER_BITS   218E
GET_REGISTER_BITS_0TO2  219E
GET_SHIFT_CR_NUM_BITS  22A6
GET_SHIFT_DIRECTION_BITS  2286
GET_SHIFT_IR_BITS   2296
GET_SHIFT_RS_BITS   2276
GET_SHIFT_SIZE_BITS  2266
GO_TO_EA            286E
HEX_TO_ACII_ADDR    161A
HEX_TO_ACII_DISPLACEMENT  1686
IMDATA_LOOP_L_LHS   32AC
IMDATA_LOOP_L_RHS   31E2
IMDATA_LOOP_W_LHS   3260
IMDATA_LOOP_W_RHS   319C
INITIALIZE_VARIABLES  3B1C
INTRO               1000
INVALID_E           11C8
INVALID_LEN_E       11B2
INVALID_LEN_S       1186
INVALID_LOOP        1710
INVALID_ODD_ADDR    1170
INVALID_OP          15AA
INVALID_OPWORD      16EC
INVALID_ROTATIONS_MS  15A4
INVALID_S           119C
IS_ADDA             6054
IS_ADDB             6052
IS_ADDI             6056
IS_ADDL             6060
IS_ADDW             6058
IS_ANDB             6062
IS_ANDL             6066
IS_ANDW             6064
IS_BYTE             6032
IS_CMP              6030
IS_DIVU             6044
IS_DNTOEA           6100
IS_EATODN           6102
IS_IMMEDIATE_DATA   6082
IS_LEA              6038
IS_LEFT             6084
IS_LONG             6036
IS_LONG_IMDATA      32A4
IS_LONG_IMDATA_R    31DA
IS_MEM_TO_REG       6076
IS_MINUSADDR        6080
IS_MOVE             6040
IS_MOVEM            6048
IS_MOVEM_EA_REG     6078
IS_MOVEQ            6046
IS_MULS             6042
IS_STOP             6050
IS_SUBB             6070
IS_SUBI             6068
IS_SUBL             6074
IS_SUBW             6072
IS_WORD             6034
JMP_LOOP            1268
JMP_TABLE           1296
JUMP_FLAG_MINUSADDR  249E
JUMP_SLASH          25A6
JUMP_SLASH_REG_TO_MEM  2564
JUMP_SLASH_SPECIAL_CASE  2570
LEA_RHS             38A8
LF                  A
LOOP_COUNTER        6026
MINUSADDR_REG_END   30AC
MOVEM_DIRECTION     246E
MOVEM_REGISTER_LHS_LOOP  2528
MOVEM_REGISTER_RHS_LOOP  2582
MOVEM_RHS           38B8
MOVEQ_RHS           38B4
MOVE_RHS            38C0
MSB_0000            12F6
MSB_0001            12FC
MSB_0010            1302
MSB_0011            1308
MSB_0100            130E
MSB_0101            1314
MSB_0110            1318
MSB_0111            131E
MSB_1000            1324
MSB_1001            132A
MSB_1010            1330
MSB_1011            1336
MSB_1100            133C
MSB_1101            1342
MSB_1110            1348
MSB_1111            134E
MSB_SUBR_0000       1352
MSB_SUBR_0001       138E
MSB_SUBR_0010       139A
MSB_SUBR_0011       13A6
MSB_SUBR_0100       13B2
MSB_SUBR_0101       1426
MSB_SUBR_0110       142C
MSB_SUBR_0111       1450
MSB_SUBR_1000       1464
MSB_SUBR_1001       1478
MSB_SUBR_1010       14D8
MSB_SUBR_1011       14B4
MSB_SUBR_1100       14DE
MSB_SUBR_1101       1528
MSB_SUBR_1110       1574
MSB_SUBR_1111       15AA
MSG_DECODE          3ECC
MSG_ENDPROGRAM      3F22
MSG_FINAL_PROMPT    3EFD
MSG_INVALID_ADDRESS  3E55
MSG_INVALID_ENTRY   3DE6
MSG_INVALID_LENGTH  3E12
MSG_INVALID_ODDADDR  3E9A
MSG_INVALID_PROMPT  3F38
MSG_WELCOME         3DC6
MULS_RHS            38AC
NO_L                6E
NO_U                4E
ONE_STEP_BEFORE_PRINT_LOGIC  2636
PRESS_ENTER         124C
PRESS_ENTER_PROMPT  3F68
PRINT_0_LHS         1E7E
PRINT_1_LHS         1E98
PRINT_2_LHS         1EB2
PRINT_3_LHS         1ECC
PRINT_4_LHS         1EE6
PRINT_5_LHS         1F00
PRINT_6_LHS         1F20
PRINT_7_LHS         1F3A
PRINT_8_LHS         1F54
PRINT_A0_LHS        1B3E
PRINT_A0_PM_LHS     1DAE
PRINT_A0_PM_RHS     19CE
PRINT_A0_PP_LHS     1CDE
PRINT_A0_PP_RHS     192E
PRINT_A0_P_LHS      1C0E
PRINT_A0_P_RHS      188E
PRINT_A0_RHS        17EE
PRINT_A1_LHS        1B58
PRINT_A1_PM_LHS     1DC8
PRINT_A1_PM_RHS     19E2
PRINT_A1_PP_LHS     1CF8
PRINT_A1_PP_RHS     1942
PRINT_A1_P_LHS      1C28
PRINT_A1_P_RHS      18A2
PRINT_A1_RHS        1802
PRINT_A2_LHS        1B72
PRINT_A2_PM_LHS     1DE2
PRINT_A2_PM_RHS     19F6
PRINT_A2_PP_LHS     1D12
PRINT_A2_PP_RHS     1956
PRINT_A2_P_LHS      1C42
PRINT_A2_P_RHS      18B6
PRINT_A2_RHS        1816
PRINT_A3_LHS        1B8C
PRINT_A3_PM_LHS     1DFC
PRINT_A3_PM_RHS     1A0A
PRINT_A3_PP_LHS     1D2C
PRINT_A3_PP_RHS     196A
PRINT_A3_P_LHS      1C5C
PRINT_A3_P_RHS      18CA
PRINT_A3_RHS        182A
PRINT_A4_LHS        1BA6
PRINT_A4_PM_LHS     1E16
PRINT_A4_PM_RHS     1A1E
PRINT_A4_PP_LHS     1D46
PRINT_A4_PP_RHS     197E
PRINT_A4_P_LHS      1C76
PRINT_A4_P_RHS      18DE
PRINT_A4_RHS        183E
PRINT_A5_LHS        1BC0
PRINT_A5_PM_LHS     1E30
PRINT_A5_PM_RHS     1A32
PRINT_A5_PP_LHS     1D60
PRINT_A5_PP_RHS     1992
PRINT_A5_P_LHS      1C90
PRINT_A5_P_RHS      18F2
PRINT_A5_RHS        1852
PRINT_A6_LHS        1BDA
PRINT_A6_PM_LHS     1E4A
PRINT_A6_PM_RHS     1A46
PRINT_A6_PP_LHS     1D7A
PRINT_A6_PP_RHS     19A6
PRINT_A6_P_LHS      1CAA
PRINT_A6_P_RHS      1906
PRINT_A6_RHS        1866
PRINT_A7_LHS        1BF4
PRINT_A7_PM_LHS     1E64
PRINT_A7_PM_RHS     1A5A
PRINT_A7_PP_LHS     1D94
PRINT_A7_PP_RHS     19BA
PRINT_A7_P_LHS      1CC4
PRINT_A7_P_RHS      191A
PRINT_A7_RHS        187A
PRINT_ADDR_CHAR     6022
PRINT_COMMA         15BE
PRINT_COUNTER       6020
PRINT_CR_NUM        2986
PRINT_D0_LHS        1A6E
PRINT_D0_RHS        174E
PRINT_D1_LHS        1A88
PRINT_D1_RHS        1762
PRINT_D2_LHS        1AA2
PRINT_D2_RHS        1776
PRINT_D3_LHS        1ABC
PRINT_D3_RHS        178A
PRINT_D4_LHS        1AD6
PRINT_D4_RHS        179E
PRINT_D5_LHS        1AF0
PRINT_D5_RHS        17B2
PRINT_D6_LHS        1B0A
PRINT_D6_RHS        17C6
PRINT_D7_LHS        1B24
PRINT_D7_RHS        17DA
PRINT_DISP_ADDR     166E
PRINT_DOLLAR        15CC
PRINT_IMDATA        15DA
PRINT_LOGIC         1222
PRINT_MOVEM_RHS_A0  207E
PRINT_MOVEM_RHS_A1  20A0
PRINT_MOVEM_RHS_A2  20C2
PRINT_MOVEM_RHS_A3  20E4
PRINT_MOVEM_RHS_A4  2106
PRINT_MOVEM_RHS_A5  2128
PRINT_MOVEM_RHS_A6  214A
PRINT_MOVEM_RHS_A7  216C
PRINT_MOVEM_RHS_D0  1F6E
PRINT_MOVEM_RHS_D1  1F90
PRINT_MOVEM_RHS_D2  1FB2
PRINT_MOVEM_RHS_D3  1FD4
PRINT_MOVEM_RHS_D4  1FF6
PRINT_MOVEM_RHS_D5  2018
PRINT_MOVEM_RHS_D6  203A
PRINT_MOVEM_RHS_D7  205C
PRINT_SHIFT_EA      2868
PRINT_SHIFT_RIGHT_BYTE  291E
PRINT_SLASH         15B0
REPRESENT_1_TO_8    299E
SAFE                128A
SET_MOVEQ_IMDATA    324A
SHIFT_10_BITS       A
SHIFT_11_BITS       B
SHIFT_12_BITS       C
SHIFT_13_BITS       D
SHIFT_14_BITS       E
SHIFT_15_BITS       F
SHIFT_16_BITS       10
SHIFT_1_BITS        1
SHIFT_4_BITS        4
SHIFT_5_BITS        5
SHIFT_6_BITS        6
SHIFT_7_BITS        7
SHIFT_8_BITS        8
SHIFT_DIRECTION_BYTE  2902
SHIFT_DIRECTION_MS  284C
SHIFT_PRINT_DOT_B   2952
SHIFT_PRINT_DOT_W   295A
SKIP_AN_SUB         2EDC
SKIP_TO_PRINT_LOGIC  2652
START               1000
STARTADDRESS_PROMPT  3D8C
START_ADDRESS       6000
START_ADDR_PROMPT   1026
STEP_FOR_MEM_TO_REG  2702
STOP_RHS            38BC
STORE_END_ADDRESS   109A
STORE_STR_ADDRESS   108E
SUBB_RHS            3A84
SUBI_RHS            3A54
SUB_W_L_RHS         3ACC
VALID_ROTATIONS_MS  1596
VAR_ASR_RS_BITS     0
VAR_BCC             4
VAR_BGT             E
VAR_BLE             F
VAR_CLRB            8
VAR_CLRL            A
VAR_CLRW            9
VAR_CMPB            0
VAR_CMPL            2
VAR_CMPW            1
VAR_DIVU            3
VAR_JSR             3A
VAR_LEA             7
VAR_LSL_RS_BITS     1
VAR_MOVEML          3
VAR_MOVEMW          2
VAR_MOVEQ           0
VAR_MULS            7
VAR_ROL_RS_BITS     3
WORD_DISPLACEMENT   2A8C
YES_L               79
YES_U               59
